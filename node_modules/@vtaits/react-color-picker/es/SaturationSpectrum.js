import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { fromRatio } from './utils/color';
import BaseComponent, { baseInitialState, basePropTypes, baseDefaultProps } from './utils/common';
import DEFAULT_COLOR from './defaultColor';
import VALIDATE from './utils/validate';
import toColorValue from './utils/toColorValue';

var getSaturationForPoint = function getSaturationForPoint(point) {
  return point.x / point.width;
};

var getColorValueForPoint = function getColorValueForPoint(point) {
  return (point.height - point.y) / point.height;
};

var prepareBackgroundColor = function prepareBackgroundColor(color) {
  var hsv = color;
  var col = fromRatio({
    h: hsv.h % 360 / 360,
    s: 1,
    v: 1
  });
  return col.toRgbString();
};

var SaturationSpectrum =
/*#__PURE__*/
function (_BaseComponent) {
  _inherits(SaturationSpectrum, _BaseComponent);

  function SaturationSpectrum() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, SaturationSpectrum);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SaturationSpectrum)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", _objectSpread({}, baseInitialState, {
      pointerTop: null,
      pointerLeft: null
    }));

    return _this;
  }

  _createClass(SaturationSpectrum, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.updateDragPositionIf();
    }
  }, {
    key: "isComponentMounted",
    value: function isComponentMounted() {
      return this.mounted;
    }
  }, {
    key: "updateDragPositionIf",
    value: function updateDragPositionIf() {
      if (!this.props.height || !this.props.width) {
        this.setState({});
      }
    }
  }, {
    key: "getDragPosition",
    value: function getDragPosition() {
      var _this$props = this.props,
          value = _this$props.value,
          pointerSize = _this$props.pointerSize;
      var _this$props2 = this.props,
          width = _this$props2.width,
          height = _this$props2.height;
      var mouseDown = this.state.mouseDown;
      var sizeDefined = width && height;

      if (!sizeDefined && !this.isComponentMounted()) {
        return null;
      }

      var region;

      if (!sizeDefined) {
        region = this.getDOMRegion();
        height = height || region.getHeight();
        width = width || region.getWidth();
      }

      var x = this.hsv.s * width;
      var y = height - this.hsv.v * height;
      var size = pointerSize;
      var diff = Math.floor(size / 2);

      if (value && mouseDown && !Number.isNaN(mouseDown.x)) {
        x = mouseDown.x;
      }

      return {
        left: x - diff,
        top: y - diff
      };
    }
  }, {
    key: "prepareProps",
    value: function prepareProps(thisProps, state) {
      var props = _objectSpread({}, thisProps);

      var color = state.value || props.value || props.defaultValue || props.defaultColor;
      props.color = color;
      this.hsv = toColorValue(color);
      props.style = this.prepareStyle(props);
      props.className = cx(thisProps.className, 'react-color-picker__saturation-spectrum');
      return props;
    }
  }, {
    key: "prepareStyle",
    value: function prepareStyle(props) {
      var style = _objectSpread({}, props.style);

      if (props.height) {
        style.height = props.height;
      }

      if (props.width) {
        style.width = props.width;
      }

      style.backgroundColor = prepareBackgroundColor(this.hsv);
      return style;
    }
  }, {
    key: "render",
    value: function render() {
      var pointerSize = this.props.pointerSize;
      var props = this.prepareProps(this.props, this.state);
      var dragStyle = {
        width: pointerSize,
        height: pointerSize
      };
      var dragPos = this.getDragPosition();

      if (dragPos) {
        dragStyle.top = dragPos.top;
        dragStyle.left = dragPos.left;
        dragStyle.display = 'block';
      }

      return React.createElement("div", {
        className: props.className,
        style: props.style,
        onMouseDown: this.onMouseDown,
        role: "button",
        ref: this.rootRef,
        tabIndex: 0
      }, React.createElement("div", {
        className: "react-color-picker__saturation-white"
      }, React.createElement("div", {
        className: "react-color-picker__saturation-black"
      })), React.createElement("div", {
        className: "react-color-picker__saturation-drag",
        style: dragStyle
      }, React.createElement("div", {
        className: "react-color-picker__saturation-inner"
      })));
    }
  }, {
    key: "updateColor",
    value: function updateColor(point) {
      var newPoint = VALIDATE(point);
      this.hsv.s = getSaturationForPoint(newPoint);
      this.hsv.v = getColorValueForPoint(newPoint);

      var newHsv = _objectSpread({}, this.hsv);

      this.hsv = newHsv;
      return newHsv;
    }
  }]);

  return SaturationSpectrum;
}(BaseComponent);

_defineProperty(SaturationSpectrum, "propTypes", _objectSpread({}, basePropTypes, {
  height: PropTypes.number,
  width: PropTypes.number,
  pointerSize: PropTypes.number,
  defaultColor: PropTypes.any,
  isSaturationSpectrum: PropTypes.bool
}));

_defineProperty(SaturationSpectrum, "defaultProps", _objectSpread({}, baseDefaultProps, {
  height: 300,
  width: 300,
  pointerSize: 7,
  defaultColor: DEFAULT_COLOR,
  isSaturationSpectrum: true
}));

export default SaturationSpectrum;