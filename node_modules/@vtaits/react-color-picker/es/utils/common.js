import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

/* eslint-disable react/no-unused-state */
import { Component, createRef } from 'react';
import PropTypes from 'prop-types';
import Region from 'region';
import DragHelper from 'drag-helper';
import toStringValue from './toStringValue';
export var baseInitialState = {
  top: 0,
  left: 0,
  mouseDown: null,
  value: null
};
export var basePropTypes = {
  inPicker: PropTypes.bool,
  value: PropTypes.any,
  onMouseDown: PropTypes.func,
  onDrag: PropTypes.func,
  onChange: PropTypes.func
};
export var baseDefaultProps = {
  inPicker: false,
  value: null,
  onMouseDown: null,
  onDrag: null,
  onChange: null
};

var getEventInfo = function getEventInfo(event, region) {
  var x = event.clientX - region.left;
  var y = event.clientY - region.top;
  return {
    x: x,
    y: y,
    width: region.getWidth(),
    height: region.getHeight()
  };
};

var BaseComponent =
/*#__PURE__*/
function (_Component) {
  _inherits(BaseComponent, _Component);

  function BaseComponent() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, BaseComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BaseComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", baseInitialState);

    _defineProperty(_assertThisInitialized(_this), "rootRef", createRef());

    _defineProperty(_assertThisInitialized(_this), "handleDragStart", Function.prototype);

    _defineProperty(_assertThisInitialized(_this), "onMouseDown", function (event) {
      event.preventDefault();

      var region = _this.getDOMRegion();

      var info = getEventInfo(event, region);
      DragHelper(event, {
        scope: _assertThisInitialized(_this),
        constrainTo: region,

        /* eslint-disable no-param-reassign */
        onDragStart: function onDragStart(dragStartEvent, config) {
          config.initialPoint = info;
          config.minLeft = 0;
          config.maxLeft = region.width;
          this.handleDragStart(dragStartEvent);
        },

        /* eslint-enable no-param-reassign */
        onDrag: function onDrag(dragEvent, config) {
          var dragInfo = getEventInfo(dragEvent, region);
          var newHsv = this.updateColor(dragInfo);
          this.handleDrag(dragEvent, config, newHsv);
        },
        onDrop: function onDrop(dropEvent, config) {
          var dropInfo = getEventInfo(dropEvent, region);
          var newHsv = this.updateColor(dropInfo);
          this.handleDrop(dropEvent, config, newHsv);
        }
      });

      _this.updateColor(info);

      _this.handleMouseDown(event, {
        initialPoint: info
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function (event, config) {
      var onMouseDown = _this.props.onMouseDown;

      if (onMouseDown) {
        onMouseDown.apply(_assertThisInitialized(_this), _this.getColors(_this.hsv));
      }

      _this.handleDrag(event, config, _this.hsv);
    });

    _defineProperty(_assertThisInitialized(_this), "handleUpdate", function (event, config) {
      var _this$props = _this.props,
          inPicker = _this$props.inPicker,
          value = _this$props.value;
      var diff = config.diff || {
        top: 0,
        left: 0
      };
      var initialPoint = config.initialPoint;

      if (initialPoint) {
        var left;
        left = initialPoint.x + diff.left;
        var top = initialPoint.y + diff.top;
        left = Math.max(left, config.minLeft);
        left = Math.min(left, config.maxLeft);

        _this.setState({
          top: top,
          left: left,
          mouseDown: {
            x: left,
            y: top,
            width: initialPoint.width,
            height: initialPoint.height
          }
        });
      }

      if (inPicker) {
        // the picker handles the values
        return;
      }

      if (!value) {
        _this.setState({
          // eslint-disable-next-line react/no-unused-state
          value: _this.hsv
        });
      }
    });

    return _this;
  }

  _createClass(BaseComponent, [{
    key: "getDOMRegion",
    value: function getDOMRegion() {
      return Region.fromDOM(this.rootRef.current);
    }
  }, {
    key: "getColors",
    value: function getColors(hsv) {
      var inPicker = this.props.inPicker;
      var first = inPicker ? hsv : toStringValue(hsv);
      var args = [first];

      if (!inPicker) {
        args.push(_objectSpread({}, hsv));
      }

      return args;
    }
  }, {
    key: "handleDrag",
    value: function handleDrag(event, config, hsv) {
      var onDrag = this.props.onDrag;
      this.handleUpdate(event, config);

      if (onDrag) {
        onDrag.apply(this, this.getColors(hsv));
      }
    }
  }, {
    key: "handleDrop",
    value: function handleDrop(event, config, hsv) {
      var onChange = this.props.onChange;
      this.handleUpdate(event, config);
      this.setState({
        mouseDown: false
      });

      if (onChange) {
        onChange.apply(this, this.getColors(hsv));
      }
    }
  }]);

  return BaseComponent;
}(Component);

_defineProperty(BaseComponent, "propTypes", basePropTypes);

_defineProperty(BaseComponent, "defaultProps", baseDefaultProps);

export default BaseComponent;