import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import BaseComponent, { baseInitialState, basePropTypes, baseDefaultProps } from './utils/common';
import DEFAULT_COLOR from './defaultColor';
import VALIDATE from './utils/validate';
import toColorValue from './utils/toColorValue';

var HueSpectrum =
/*#__PURE__*/
function (_BaseComponent) {
  _inherits(HueSpectrum, _BaseComponent);

  function HueSpectrum() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, HueSpectrum);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HueSpectrum)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", _objectSpread({}, baseInitialState, {
      h: 0
    }));

    return _this;
  }

  _createClass(HueSpectrum, [{
    key: "isComponentMounted",
    value: function isComponentMounted() {
      return this.mounted;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.updateDragPositionIf();
    }
  }, {
    key: "updateDragPositionIf",
    value: function updateDragPositionIf() {
      if (!this.props.height) {
        this.setState({});
      }
    }
  }, {
    key: "getDragPosition",
    value: function getDragPosition() {
      var _this$props = this.props,
          height = _this$props.height,
          pointerSize = _this$props.pointerSize;

      if (!height && !this.isComponentMounted()) {
        return null;
      }

      var computedHeight = height || this.getDOMRegion().getHeight();
      var size = pointerSize;
      var pos = Math.round(this.hsv.h * computedHeight / 360);
      var diff = Math.round(size / 2);
      return pos - diff;
    }
  }, {
    key: "updateColor",
    value: function updateColor(point) {
      var newPoint = VALIDATE(point);
      this.hsv.h = newPoint.y * 360 / newPoint.height;

      var newHsv = _objectSpread({}, this.hsv);

      var newH;

      if (this.hsv.h !== 0) {
        newH = this.hsv.h;
      }

      newH = this.hsv.h !== 0 ? this.hsv.h : 0;
      this.setState({
        h: newH
      });
      this.hsv = newHsv;
      return newHsv;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          style = _this$props2.style,
          value = _this$props2.value,
          defaultValue = _this$props2.defaultValue,
          defaultColor = _this$props2.defaultColor,
          pointerSize = _this$props2.pointerSize,
          height = _this$props2.height,
          width = _this$props2.width;
      var _this$state = this.state,
          stateValue = _this$state.value,
          h = _this$state.h;
      this.hsv = toColorValue(stateValue || value || defaultValue || defaultColor);

      if (h === 360 && !this.hsv.h) {
        // in order to show bottom red as well on drag
        this.hsv.h = 360;
      }

      var rootStyle = _objectSpread({}, style);

      if (height) {
        rootStyle.height = height;
      }

      if (width) {
        rootStyle.width = width;
      }

      var dragStyle = {
        height: pointerSize
      };
      var dragPos = this.getDragPosition();

      if (dragPos !== null) {
        dragStyle.top = dragPos;
        dragStyle.display = 'block';
      }

      return React.createElement("div", {
        className: "react-color-picker__hue-spectrum",
        style: rootStyle,
        onMouseDown: this.onMouseDown,
        role: "button",
        ref: this.rootRef,
        tabIndex: 0
      }, React.createElement("div", {
        className: "react-color-picker__hue-drag",
        style: dragStyle
      }, React.createElement("div", {
        className: "react-color-picker__hue-inner"
      })));
    }
  }]);

  return HueSpectrum;
}(BaseComponent);

_defineProperty(HueSpectrum, "propTypes", _objectSpread({}, basePropTypes, {
  height: PropTypes.number,
  width: PropTypes.number,
  pointerSize: PropTypes.number,
  defaultColor: PropTypes.any,
  isHueSpectrum: PropTypes.bool
}));

_defineProperty(HueSpectrum, "defaultProps", _objectSpread({}, baseDefaultProps, {
  height: 300,
  width: 30,
  pointerSize: 3,
  defaultColor: DEFAULT_COLOR,
  isHueSpectrum: true
}));

export default HueSpectrum;