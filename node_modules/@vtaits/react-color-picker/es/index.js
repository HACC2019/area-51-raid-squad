import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import HueSpectrum from './HueSpectrum';
import SaturationSpectrum from './SaturationSpectrum';
import toColorValue from './utils/toColorValue';
import toStringValue from './utils/toStringValue';
import DEFAULT_COLOR from './defaultColor';

var ColorPicker =
/*#__PURE__*/
function (_Component) {
  _inherits(ColorPicker, _Component);

  function ColorPicker(props) {
    var _this;

    _classCallCheck(this, ColorPicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorPicker).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleSaturationChange", function (color) {
      _this.handleChange(color);
    });

    _defineProperty(_assertThisInitialized(_this), "handleHueChange", function (color) {
      _this.handleChange(color);
    });

    _defineProperty(_assertThisInitialized(_this), "handleHueDrag", function (hsv) {
      _this.setState({
        dragHue: hsv.h
      });

      _this.handleDrag(hsv);
    });

    _defineProperty(_assertThisInitialized(_this), "handleSaturationDrag", function (hsv) {
      _this.handleDrag(hsv);
    });

    _defineProperty(_assertThisInitialized(_this), "handleHueMouseDown", function (hsv) {
      _this.setState({
        dragHue: hsv.h
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleSaturationMouseDown", function (hsv) {
      _this.setState({
        dragHue: hsv.h
      });
    });

    var defaultValue = props.defaultValue;
    _this.state = {
      value: defaultValue
    };
    return _this;
  }

  _createClass(ColorPicker, [{
    key: "handleDrag",
    value: function handleDrag(color) {
      var _this$props = this.props,
          value = _this$props.value,
          onDrag = _this$props.onDrag;

      if (!value) {
        this.setState({
          value: color
        });
      }

      onDrag(toStringValue(color), color);
    }
  }, {
    key: "handleChange",
    value: function handleChange(color) {
      var onChange = this.props.onChange;
      this.setState({
        dragHue: null
      });

      var newColor = _objectSpread({}, color);

      var value = toStringValue(newColor);
      onChange(value, newColor);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;

      var color = props.color,
          propsClassName = props.className,
          propsHueStyle = props.hueStyle,
          hueHeight = props.hueHeight,
          hueMargin = props.hueMargin,
          hueWidth = props.hueWidth,
          propsDefaultValue = props.defaultValue,
          defaultColor = props.defaultColor,
          propsValue = props.value,
          saturationHeight = props.saturationHeight,
          saturationWidth = props.saturationWidth,
          divProps = _objectWithoutProperties(props, ["color", "className", "hueStyle", "hueHeight", "hueMargin", "hueWidth", "defaultValue", "defaultColor", "value", "saturationHeight", "saturationWidth"]);

      var _this$state = this.state,
          stateValue = _this$state.value,
          dragHue = _this$state.dragHue;
      var className = cx(propsClassName, 'cp react-color-picker');

      var hueStyle = _objectSpread({}, propsHueStyle, {
        marginLeft: hueMargin
      });

      var value = props.value ? toColorValue(propsValue) : null;
      var defaultValue = !value ? toColorValue(stateValue || propsDefaultValue || defaultColor) : null;
      var children = props.children;
      var hueSpectrumProps = null;
      var saturationSpectrumProps = null;

      if (children) {
        children = React.Children.toArray(children).forEach(function (child) {
          if (child && child.props) {
            if (child.props.isHueSpectrum) {
              hueSpectrumProps = _objectSpread({}, child.props);
            }

            if (child.props.isSaturationSpectrum) {
              saturationSpectrumProps = _objectSpread({}, child.props);
            }
          }
        });
      }

      var saturationConfig = _objectSpread({
        onDrag: this.handleSaturationDrag,
        onChange: this.handleSaturationChange,
        onMouseDown: this.handleSaturationMouseDown
      }, saturationSpectrumProps);

      if (saturationConfig.width === undefined) {
        saturationConfig.width = saturationWidth;
      }

      if (saturationConfig.height === undefined) {
        saturationConfig.height = saturationHeight;
      }

      saturationConfig.inPicker = true;

      var hueConfig = _objectSpread({
        onDrag: this.handleHueDrag,
        onChange: this.handleHueChange,
        onMouseDown: this.handleHueMouseDown,
        style: hueStyle
      }, hueSpectrumProps);

      if (hueConfig.width === undefined) {
        hueConfig.width = hueWidth;
      }

      if (hueConfig.height === undefined) {
        hueConfig.height = hueHeight || saturationHeight;
      }

      hueConfig.inPicker = true;

      if (dragHue) {
        (value || defaultValue).h = dragHue;
      } // both value and defaultValue are objects like: {h,s,v}


      if (value) {
        saturationConfig.value = _objectSpread({}, value);
        hueConfig.value = _objectSpread({}, value);
      } else {
        saturationConfig.defaultValue = _objectSpread({}, defaultValue);
        hueConfig.defaultValue = _objectSpread({}, defaultValue);
      }

      return React.createElement("div", _extends({}, divProps, {
        className: className
      }), React.createElement(SaturationSpectrum, saturationConfig), React.createElement(HueSpectrum, hueConfig));
    }
  }]);

  return ColorPicker;
}(Component);

_defineProperty(ColorPicker, "propTypes", {
  onDrag: PropTypes.func,
  onChange: PropTypes.func,
  value: PropTypes.any,
  defaultValue: PropTypes.any,
  defaultColor: PropTypes.any,
  hueHeight: PropTypes.number,
  hueMargin: PropTypes.number,
  hueWidth: PropTypes.number,
  saturationWidth: PropTypes.number,
  saturationHeight: PropTypes.number
});

_defineProperty(ColorPicker, "defaultProps", {
  onDrag: Function.prototype,
  onChange: Function.prototype,
  value: null,
  defaultValue: null,
  defaultColor: DEFAULT_COLOR,
  hueHeight: null,
  hueMargin: 10,
  hueWidth: 30,
  saturationWidth: 300,
  saturationHeight: 300
});

export { HueSpectrum, SaturationSpectrum };
export default ColorPicker;