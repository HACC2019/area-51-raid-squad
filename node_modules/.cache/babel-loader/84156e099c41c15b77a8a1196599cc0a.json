{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { fromRatio } from './utils/color';\nimport BaseComponent, { baseInitialState, basePropTypes, baseDefaultProps } from './utils/common';\nimport DEFAULT_COLOR from './defaultColor';\nimport VALIDATE from './utils/validate';\nimport toColorValue from './utils/toColorValue';\n\nvar getSaturationForPoint = function getSaturationForPoint(point) {\n  return point.x / point.width;\n};\n\nvar getColorValueForPoint = function getColorValueForPoint(point) {\n  return (point.height - point.y) / point.height;\n};\n\nvar prepareBackgroundColor = function prepareBackgroundColor(color) {\n  var hsv = color;\n  var col = fromRatio({\n    h: hsv.h % 360 / 360,\n    s: 1,\n    v: 1\n  });\n  return col.toRgbString();\n};\n\nvar SaturationSpectrum =\n/*#__PURE__*/\nfunction (_BaseComponent) {\n  _inherits(SaturationSpectrum, _BaseComponent);\n\n  function SaturationSpectrum() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SaturationSpectrum);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SaturationSpectrum)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", _objectSpread({}, baseInitialState, {\n      pointerTop: null,\n      pointerLeft: null\n    }));\n\n    return _this;\n  }\n\n  _createClass(SaturationSpectrum, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true;\n      this.updateDragPositionIf();\n    }\n  }, {\n    key: \"isComponentMounted\",\n    value: function isComponentMounted() {\n      return this.mounted;\n    }\n  }, {\n    key: \"updateDragPositionIf\",\n    value: function updateDragPositionIf() {\n      if (!this.props.height || !this.props.width) {\n        this.setState({});\n      }\n    }\n  }, {\n    key: \"getDragPosition\",\n    value: function getDragPosition() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          pointerSize = _this$props.pointerSize;\n      var _this$props2 = this.props,\n          width = _this$props2.width,\n          height = _this$props2.height;\n      var mouseDown = this.state.mouseDown;\n      var sizeDefined = width && height;\n\n      if (!sizeDefined && !this.isComponentMounted()) {\n        return null;\n      }\n\n      var region;\n\n      if (!sizeDefined) {\n        region = this.getDOMRegion();\n        height = height || region.getHeight();\n        width = width || region.getWidth();\n      }\n\n      var x = this.hsv.s * width;\n      var y = height - this.hsv.v * height;\n      var size = pointerSize;\n      var diff = Math.floor(size / 2);\n\n      if (value && mouseDown && !Number.isNaN(mouseDown.x)) {\n        x = mouseDown.x;\n      }\n\n      return {\n        left: x - diff,\n        top: y - diff\n      };\n    }\n  }, {\n    key: \"prepareProps\",\n    value: function prepareProps(thisProps, state) {\n      var props = _objectSpread({}, thisProps);\n\n      var color = state.value || props.value || props.defaultValue || props.defaultColor;\n      props.color = color;\n      this.hsv = toColorValue(color);\n      props.style = this.prepareStyle(props);\n      props.className = cx(thisProps.className, 'react-color-picker__saturation-spectrum');\n      return props;\n    }\n  }, {\n    key: \"prepareStyle\",\n    value: function prepareStyle(props) {\n      var style = _objectSpread({}, props.style);\n\n      if (props.height) {\n        style.height = props.height;\n      }\n\n      if (props.width) {\n        style.width = props.width;\n      }\n\n      style.backgroundColor = prepareBackgroundColor(this.hsv);\n      return style;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var pointerSize = this.props.pointerSize;\n      var props = this.prepareProps(this.props, this.state);\n      var dragStyle = {\n        width: pointerSize,\n        height: pointerSize\n      };\n      var dragPos = this.getDragPosition();\n\n      if (dragPos) {\n        dragStyle.top = dragPos.top;\n        dragStyle.left = dragPos.left;\n        dragStyle.display = 'block';\n      }\n\n      return React.createElement(\"div\", {\n        className: props.className,\n        style: props.style,\n        onMouseDown: this.onMouseDown,\n        role: \"button\",\n        ref: this.rootRef,\n        tabIndex: 0\n      }, React.createElement(\"div\", {\n        className: \"react-color-picker__saturation-white\"\n      }, React.createElement(\"div\", {\n        className: \"react-color-picker__saturation-black\"\n      })), React.createElement(\"div\", {\n        className: \"react-color-picker__saturation-drag\",\n        style: dragStyle\n      }, React.createElement(\"div\", {\n        className: \"react-color-picker__saturation-inner\"\n      })));\n    }\n  }, {\n    key: \"updateColor\",\n    value: function updateColor(point) {\n      var newPoint = VALIDATE(point);\n      this.hsv.s = getSaturationForPoint(newPoint);\n      this.hsv.v = getColorValueForPoint(newPoint);\n\n      var newHsv = _objectSpread({}, this.hsv);\n\n      this.hsv = newHsv;\n      return newHsv;\n    }\n  }]);\n\n  return SaturationSpectrum;\n}(BaseComponent);\n\n_defineProperty(SaturationSpectrum, \"propTypes\", _objectSpread({}, basePropTypes, {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  pointerSize: PropTypes.number,\n  defaultColor: PropTypes.any,\n  isSaturationSpectrum: PropTypes.bool\n}));\n\n_defineProperty(SaturationSpectrum, \"defaultProps\", _objectSpread({}, baseDefaultProps, {\n  height: 300,\n  width: 300,\n  pointerSize: 7,\n  defaultColor: DEFAULT_COLOR,\n  isSaturationSpectrum: true\n}));\n\nexport default SaturationSpectrum;","map":null,"metadata":{},"sourceType":"module"}