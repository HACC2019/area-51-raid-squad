{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport HueSpectrum from './HueSpectrum';\nimport SaturationSpectrum from './SaturationSpectrum';\nimport toColorValue from './utils/toColorValue';\nimport toStringValue from './utils/toStringValue';\nimport DEFAULT_COLOR from './defaultColor';\n\nvar ColorPicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ColorPicker, _Component);\n\n  function ColorPicker(props) {\n    var _this;\n\n    _classCallCheck(this, ColorPicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorPicker).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSaturationChange\", function (color) {\n      _this.handleChange(color);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHueChange\", function (color) {\n      _this.handleChange(color);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHueDrag\", function (hsv) {\n      _this.setState({\n        dragHue: hsv.h\n      });\n\n      _this.handleDrag(hsv);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSaturationDrag\", function (hsv) {\n      _this.handleDrag(hsv);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHueMouseDown\", function (hsv) {\n      _this.setState({\n        dragHue: hsv.h\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSaturationMouseDown\", function (hsv) {\n      _this.setState({\n        dragHue: hsv.h\n      });\n    });\n\n    var defaultValue = props.defaultValue;\n    _this.state = {\n      value: defaultValue\n    };\n    return _this;\n  }\n\n  _createClass(ColorPicker, [{\n    key: \"handleDrag\",\n    value: function handleDrag(color) {\n      var _this$props = this.props,\n          value = _this$props.value,\n          onDrag = _this$props.onDrag;\n\n      if (!value) {\n        this.setState({\n          value: color\n        });\n      }\n\n      onDrag(toStringValue(color), color);\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(color) {\n      var onChange = this.props.onChange;\n      this.setState({\n        dragHue: null\n      });\n\n      var newColor = _objectSpread({}, color);\n\n      var value = toStringValue(newColor);\n      onChange(value, newColor);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n\n      var color = props.color,\n          propsClassName = props.className,\n          propsHueStyle = props.hueStyle,\n          hueHeight = props.hueHeight,\n          hueMargin = props.hueMargin,\n          hueWidth = props.hueWidth,\n          propsDefaultValue = props.defaultValue,\n          defaultColor = props.defaultColor,\n          propsValue = props.value,\n          saturationHeight = props.saturationHeight,\n          saturationWidth = props.saturationWidth,\n          divProps = _objectWithoutProperties(props, [\"color\", \"className\", \"hueStyle\", \"hueHeight\", \"hueMargin\", \"hueWidth\", \"defaultValue\", \"defaultColor\", \"value\", \"saturationHeight\", \"saturationWidth\"]);\n\n      var _this$state = this.state,\n          stateValue = _this$state.value,\n          dragHue = _this$state.dragHue;\n      var className = cx(propsClassName, 'cp react-color-picker');\n\n      var hueStyle = _objectSpread({}, propsHueStyle, {\n        marginLeft: hueMargin\n      });\n\n      var value = props.value ? toColorValue(propsValue) : null;\n      var defaultValue = !value ? toColorValue(stateValue || propsDefaultValue || defaultColor) : null;\n      var children = props.children;\n      var hueSpectrumProps = null;\n      var saturationSpectrumProps = null;\n\n      if (children) {\n        children = React.Children.toArray(children).forEach(function (child) {\n          if (child && child.props) {\n            if (child.props.isHueSpectrum) {\n              hueSpectrumProps = _objectSpread({}, child.props);\n            }\n\n            if (child.props.isSaturationSpectrum) {\n              saturationSpectrumProps = _objectSpread({}, child.props);\n            }\n          }\n        });\n      }\n\n      var saturationConfig = _objectSpread({\n        onDrag: this.handleSaturationDrag,\n        onChange: this.handleSaturationChange,\n        onMouseDown: this.handleSaturationMouseDown\n      }, saturationSpectrumProps);\n\n      if (saturationConfig.width === undefined) {\n        saturationConfig.width = saturationWidth;\n      }\n\n      if (saturationConfig.height === undefined) {\n        saturationConfig.height = saturationHeight;\n      }\n\n      saturationConfig.inPicker = true;\n\n      var hueConfig = _objectSpread({\n        onDrag: this.handleHueDrag,\n        onChange: this.handleHueChange,\n        onMouseDown: this.handleHueMouseDown,\n        style: hueStyle\n      }, hueSpectrumProps);\n\n      if (hueConfig.width === undefined) {\n        hueConfig.width = hueWidth;\n      }\n\n      if (hueConfig.height === undefined) {\n        hueConfig.height = hueHeight || saturationHeight;\n      }\n\n      hueConfig.inPicker = true;\n\n      if (dragHue) {\n        (value || defaultValue).h = dragHue;\n      } // both value and defaultValue are objects like: {h,s,v}\n\n\n      if (value) {\n        saturationConfig.value = _objectSpread({}, value);\n        hueConfig.value = _objectSpread({}, value);\n      } else {\n        saturationConfig.defaultValue = _objectSpread({}, defaultValue);\n        hueConfig.defaultValue = _objectSpread({}, defaultValue);\n      }\n\n      return React.createElement(\"div\", _extends({}, divProps, {\n        className: className\n      }), React.createElement(SaturationSpectrum, saturationConfig), React.createElement(HueSpectrum, hueConfig));\n    }\n  }]);\n\n  return ColorPicker;\n}(Component);\n\n_defineProperty(ColorPicker, \"propTypes\", {\n  onDrag: PropTypes.func,\n  onChange: PropTypes.func,\n  value: PropTypes.any,\n  defaultValue: PropTypes.any,\n  defaultColor: PropTypes.any,\n  hueHeight: PropTypes.number,\n  hueMargin: PropTypes.number,\n  hueWidth: PropTypes.number,\n  saturationWidth: PropTypes.number,\n  saturationHeight: PropTypes.number\n});\n\n_defineProperty(ColorPicker, \"defaultProps\", {\n  onDrag: Function.prototype,\n  onChange: Function.prototype,\n  value: null,\n  defaultValue: null,\n  defaultColor: DEFAULT_COLOR,\n  hueHeight: null,\n  hueMargin: 10,\n  hueWidth: 30,\n  saturationWidth: 300,\n  saturationHeight: 300\n});\n\nexport { HueSpectrum, SaturationSpectrum };\nexport default ColorPicker;","map":null,"metadata":{},"sourceType":"module"}