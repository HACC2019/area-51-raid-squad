{"ast":null,"code":"/*!\nFullCalendar Core Package v4.3.1\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n// Creating\n// ----------------------------------------------------------------------------------------------------------------\nvar elementPropHash = {\n  className: true,\n  colSpan: true,\n  rowSpan: true\n};\nvar containerTagHash = {\n  '<tr': 'tbody',\n  '<td': 'tr'\n};\n\nfunction createElement(tagName, attrs, content) {\n  var el = document.createElement(tagName);\n\n  if (attrs) {\n    for (var attrName in attrs) {\n      if (attrName === 'style') {\n        applyStyle(el, attrs[attrName]);\n      } else if (elementPropHash[attrName]) {\n        el[attrName] = attrs[attrName];\n      } else {\n        el.setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n\n  if (typeof content === 'string') {\n    el.innerHTML = content; // shortcut. no need to process HTML in any way\n  } else if (content != null) {\n    appendToElement(el, content);\n  }\n\n  return el;\n}\n\nfunction htmlToElement(html) {\n  html = html.trim();\n  var container = document.createElement(computeContainerTag(html));\n  container.innerHTML = html;\n  return container.firstChild;\n}\n\nfunction htmlToElements(html) {\n  return Array.prototype.slice.call(htmlToNodeList(html));\n}\n\nfunction htmlToNodeList(html) {\n  html = html.trim();\n  var container = document.createElement(computeContainerTag(html));\n  container.innerHTML = html;\n  return container.childNodes;\n} // assumes html already trimmed and tag names are lowercase\n\n\nfunction computeContainerTag(html) {\n  return containerTagHash[html.substr(0, 3) // faster than using regex\n  ] || 'div';\n}\n\nfunction appendToElement(el, content) {\n  var childNodes = normalizeContent(content);\n\n  for (var i = 0; i < childNodes.length; i++) {\n    el.appendChild(childNodes[i]);\n  }\n}\n\nfunction prependToElement(parent, content) {\n  var newEls = normalizeContent(content);\n  var afterEl = parent.firstChild || null; // if no firstChild, will append to end, but that's okay, b/c there were no children\n\n  for (var i = 0; i < newEls.length; i++) {\n    parent.insertBefore(newEls[i], afterEl);\n  }\n}\n\nfunction insertAfterElement(refEl, content) {\n  var newEls = normalizeContent(content);\n  var afterEl = refEl.nextSibling || null;\n\n  for (var i = 0; i < newEls.length; i++) {\n    refEl.parentNode.insertBefore(newEls[i], afterEl);\n  }\n}\n\nfunction normalizeContent(content) {\n  var els;\n\n  if (typeof content === 'string') {\n    els = htmlToElements(content);\n  } else if (content instanceof Node) {\n    els = [content];\n  } else {\n    // Node[] or NodeList\n    els = Array.prototype.slice.call(content);\n  }\n\n  return els;\n}\n\nfunction removeElement(el) {\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n} // Querying\n// ----------------------------------------------------------------------------------------------------------------\n// from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n\n\nvar matchesMethod = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.msMatchesSelector;\n\nvar closestMethod = Element.prototype.closest || function (selector) {\n  // polyfill\n  var el = this;\n\n  if (!document.documentElement.contains(el)) {\n    return null;\n  }\n\n  do {\n    if (elementMatches(el, selector)) {\n      return el;\n    }\n\n    el = el.parentElement || el.parentNode;\n  } while (el !== null && el.nodeType === 1);\n\n  return null;\n};\n\nfunction elementClosest(el, selector) {\n  return closestMethod.call(el, selector);\n}\n\nfunction elementMatches(el, selector) {\n  return matchesMethod.call(el, selector);\n} // accepts multiple subject els\n// returns a real array. good for methods like forEach\n\n\nfunction findElements(container, selector) {\n  var containers = container instanceof HTMLElement ? [container] : container;\n  var allMatches = [];\n\n  for (var i = 0; i < containers.length; i++) {\n    var matches = containers[i].querySelectorAll(selector);\n\n    for (var j = 0; j < matches.length; j++) {\n      allMatches.push(matches[j]);\n    }\n  }\n\n  return allMatches;\n} // accepts multiple subject els\n// only queries direct child elements\n\n\nfunction findChildren(parent, selector) {\n  var parents = parent instanceof HTMLElement ? [parent] : parent;\n  var allMatches = [];\n\n  for (var i = 0; i < parents.length; i++) {\n    var childNodes = parents[i].children; // only ever elements\n\n    for (var j = 0; j < childNodes.length; j++) {\n      var childNode = childNodes[j];\n\n      if (!selector || elementMatches(childNode, selector)) {\n        allMatches.push(childNode);\n      }\n    }\n  }\n\n  return allMatches;\n} // Attributes\n// ----------------------------------------------------------------------------------------------------------------\n\n\nfunction forceClassName(el, className, bool) {\n  if (bool) {\n    el.classList.add(className);\n  } else {\n    el.classList.remove(className);\n  }\n} // Style\n// ----------------------------------------------------------------------------------------------------------------\n\n\nvar PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;\n\nfunction applyStyle(el, props) {\n  for (var propName in props) {\n    applyStyleProp(el, propName, props[propName]);\n  }\n}\n\nfunction applyStyleProp(el, name, val) {\n  if (val == null) {\n    el.style[name] = '';\n  } else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) {\n    el.style[name] = val + 'px';\n  } else {\n    el.style[name] = val;\n  }\n}\n\nfunction pointInsideRect(point, rect) {\n  return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;\n} // Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false\n\n\nfunction intersectRects(rect1, rect2) {\n  var res = {\n    left: Math.max(rect1.left, rect2.left),\n    right: Math.min(rect1.right, rect2.right),\n    top: Math.max(rect1.top, rect2.top),\n    bottom: Math.min(rect1.bottom, rect2.bottom)\n  };\n\n  if (res.left < res.right && res.top < res.bottom) {\n    return res;\n  }\n\n  return false;\n}\n\nfunction translateRect(rect, deltaX, deltaY) {\n  return {\n    left: rect.left + deltaX,\n    right: rect.right + deltaX,\n    top: rect.top + deltaY,\n    bottom: rect.bottom + deltaY\n  };\n} // Returns a new point that will have been moved to reside within the given rectangle\n\n\nfunction constrainPoint(point, rect) {\n  return {\n    left: Math.min(Math.max(point.left, rect.left), rect.right),\n    top: Math.min(Math.max(point.top, rect.top), rect.bottom)\n  };\n} // Returns a point that is the center of the given rectangle\n\n\nfunction getRectCenter(rect) {\n  return {\n    left: (rect.left + rect.right) / 2,\n    top: (rect.top + rect.bottom) / 2\n  };\n} // Subtracts point2's coordinates from point1's coordinates, returning a delta\n\n\nfunction diffPoints(point1, point2) {\n  return {\n    left: point1.left - point2.left,\n    top: point1.top - point2.top\n  };\n} // Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side\n\n\nvar isRtlScrollbarOnLeft = null;\n\nfunction getIsRtlScrollbarOnLeft() {\n  if (isRtlScrollbarOnLeft === null) {\n    isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();\n  }\n\n  return isRtlScrollbarOnLeft;\n}\n\nfunction computeIsRtlScrollbarOnLeft() {\n  var outerEl = createElement('div', {\n    style: {\n      position: 'absolute',\n      top: -1000,\n      left: 0,\n      border: 0,\n      padding: 0,\n      overflow: 'scroll',\n      direction: 'rtl'\n    }\n  }, '<div></div>');\n  document.body.appendChild(outerEl);\n  var innerEl = outerEl.firstChild;\n  var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;\n  removeElement(outerEl);\n  return res;\n} // The scrollbar width computations in computeEdges are sometimes flawed when it comes to\n// retina displays, rounding, and IE11. Massage them into a usable value.\n\n\nfunction sanitizeScrollbarWidth(width) {\n  width = Math.max(0, width); // no negatives\n\n  width = Math.round(width);\n  return width;\n}\n\nfunction computeEdges(el, getPadding) {\n  if (getPadding === void 0) {\n    getPadding = false;\n  }\n\n  var computedStyle = window.getComputedStyle(el);\n  var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n  var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;\n  var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;\n  var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0; // must use offset(Width|Height) because compatible with client(Width|Height)\n\n  var scrollbarLeftRight = sanitizeScrollbarWidth(el.offsetWidth - el.clientWidth - borderLeft - borderRight);\n  var scrollbarBottom = sanitizeScrollbarWidth(el.offsetHeight - el.clientHeight - borderTop - borderBottom);\n  var res = {\n    borderLeft: borderLeft,\n    borderRight: borderRight,\n    borderTop: borderTop,\n    borderBottom: borderBottom,\n    scrollbarBottom: scrollbarBottom,\n    scrollbarLeft: 0,\n    scrollbarRight: 0\n  };\n\n  if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') {\n    // is the scrollbar on the left side?\n    res.scrollbarLeft = scrollbarLeftRight;\n  } else {\n    res.scrollbarRight = scrollbarLeftRight;\n  }\n\n  if (getPadding) {\n    res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n    res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n    res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n    res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n  }\n\n  return res;\n}\n\nfunction computeInnerRect(el, goWithinPadding) {\n  if (goWithinPadding === void 0) {\n    goWithinPadding = false;\n  }\n\n  var outerRect = computeRect(el);\n  var edges = computeEdges(el, goWithinPadding);\n  var res = {\n    left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,\n    right: outerRect.right - edges.borderRight - edges.scrollbarRight,\n    top: outerRect.top + edges.borderTop,\n    bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom\n  };\n\n  if (goWithinPadding) {\n    res.left += edges.paddingLeft;\n    res.right -= edges.paddingRight;\n    res.top += edges.paddingTop;\n    res.bottom -= edges.paddingBottom;\n  }\n\n  return res;\n}\n\nfunction computeRect(el) {\n  var rect = el.getBoundingClientRect();\n  return {\n    left: rect.left + window.pageXOffset,\n    top: rect.top + window.pageYOffset,\n    right: rect.right + window.pageXOffset,\n    bottom: rect.bottom + window.pageYOffset\n  };\n}\n\nfunction computeViewportRect() {\n  return {\n    left: window.pageXOffset,\n    right: window.pageXOffset + document.documentElement.clientWidth,\n    top: window.pageYOffset,\n    bottom: window.pageYOffset + document.documentElement.clientHeight\n  };\n}\n\nfunction computeHeightAndMargins(el) {\n  return el.getBoundingClientRect().height + computeVMargins(el);\n}\n\nfunction computeVMargins(el) {\n  var computed = window.getComputedStyle(el);\n  return parseInt(computed.marginTop, 10) + parseInt(computed.marginBottom, 10);\n} // does not return window\n\n\nfunction getClippingParents(el) {\n  var parents = [];\n\n  while (el instanceof HTMLElement) {\n    // will stop when gets to document or null\n    var computedStyle = window.getComputedStyle(el);\n\n    if (computedStyle.position === 'fixed') {\n      break;\n    }\n\n    if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {\n      parents.push(el);\n    }\n\n    el = el.parentNode;\n  }\n\n  return parents;\n}\n\nfunction computeClippingRect(el) {\n  return getClippingParents(el).map(function (el) {\n    return computeInnerRect(el);\n  }).concat(computeViewportRect()).reduce(function (rect0, rect1) {\n    return intersectRects(rect0, rect1) || rect1; // should always intersect\n  });\n} // Stops a mouse/touch event from doing it's native browser action\n\n\nfunction preventDefault(ev) {\n  ev.preventDefault();\n} // Event Delegation\n// ----------------------------------------------------------------------------------------------------------------\n\n\nfunction listenBySelector(container, eventType, selector, handler) {\n  function realHandler(ev) {\n    var matchedChild = elementClosest(ev.target, selector);\n\n    if (matchedChild) {\n      handler.call(matchedChild, ev, matchedChild);\n    }\n  }\n\n  container.addEventListener(eventType, realHandler);\n  return function () {\n    container.removeEventListener(eventType, realHandler);\n  };\n}\n\nfunction listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {\n  var currentMatchedChild;\n  return listenBySelector(container, 'mouseover', selector, function (ev, matchedChild) {\n    if (matchedChild !== currentMatchedChild) {\n      currentMatchedChild = matchedChild;\n      onMouseEnter(ev, matchedChild);\n\n      var realOnMouseLeave_1 = function realOnMouseLeave_1(ev) {\n        currentMatchedChild = null;\n        onMouseLeave(ev, matchedChild);\n        matchedChild.removeEventListener('mouseleave', realOnMouseLeave_1);\n      }; // listen to the next mouseleave, and then unattach\n\n\n      matchedChild.addEventListener('mouseleave', realOnMouseLeave_1);\n    }\n  });\n} // Animation\n// ----------------------------------------------------------------------------------------------------------------\n\n\nvar transitionEventNames = ['webkitTransitionEnd', 'otransitionend', 'oTransitionEnd', 'msTransitionEnd', 'transitionend']; // triggered only when the next single subsequent transition finishes\n\nfunction whenTransitionDone(el, callback) {\n  var realCallback = function realCallback(ev) {\n    callback(ev);\n    transitionEventNames.forEach(function (eventName) {\n      el.removeEventListener(eventName, realCallback);\n    });\n  };\n\n  transitionEventNames.forEach(function (eventName) {\n    el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes\n  });\n}\n\nvar DAY_IDS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']; // Adding\n\nfunction addWeeks(m, n) {\n  var a = dateToUtcArray(m);\n  a[2] += n * 7;\n  return arrayToUtcDate(a);\n}\n\nfunction addDays(m, n) {\n  var a = dateToUtcArray(m);\n  a[2] += n;\n  return arrayToUtcDate(a);\n}\n\nfunction addMs(m, n) {\n  var a = dateToUtcArray(m);\n  a[6] += n;\n  return arrayToUtcDate(a);\n} // Diffing (all return floats)\n\n\nfunction diffWeeks(m0, m1) {\n  return diffDays(m0, m1) / 7;\n}\n\nfunction diffDays(m0, m1) {\n  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);\n}\n\nfunction diffHours(m0, m1) {\n  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);\n}\n\nfunction diffMinutes(m0, m1) {\n  return (m1.valueOf() - m0.valueOf()) / (1000 * 60);\n}\n\nfunction diffSeconds(m0, m1) {\n  return (m1.valueOf() - m0.valueOf()) / 1000;\n}\n\nfunction diffDayAndTime(m0, m1) {\n  var m0day = startOfDay(m0);\n  var m1day = startOfDay(m1);\n  return {\n    years: 0,\n    months: 0,\n    days: Math.round(diffDays(m0day, m1day)),\n    milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())\n  };\n} // Diffing Whole Units\n\n\nfunction diffWholeWeeks(m0, m1) {\n  var d = diffWholeDays(m0, m1);\n\n  if (d !== null && d % 7 === 0) {\n    return d / 7;\n  }\n\n  return null;\n}\n\nfunction diffWholeDays(m0, m1) {\n  if (timeAsMs(m0) === timeAsMs(m1)) {\n    return Math.round(diffDays(m0, m1));\n  }\n\n  return null;\n} // Start-Of\n\n\nfunction startOfDay(m) {\n  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate()]);\n}\n\nfunction startOfHour(m) {\n  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours()]);\n}\n\nfunction startOfMinute(m) {\n  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes()]);\n}\n\nfunction startOfSecond(m) {\n  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes(), m.getUTCSeconds()]);\n} // Week Computation\n\n\nfunction weekOfYear(marker, dow, doy) {\n  var y = marker.getUTCFullYear();\n  var w = weekOfGivenYear(marker, y, dow, doy);\n\n  if (w < 1) {\n    return weekOfGivenYear(marker, y - 1, dow, doy);\n  }\n\n  var nextW = weekOfGivenYear(marker, y + 1, dow, doy);\n\n  if (nextW >= 1) {\n    return Math.min(w, nextW);\n  }\n\n  return w;\n}\n\nfunction weekOfGivenYear(marker, year, dow, doy) {\n  var firstWeekStart = arrayToUtcDate([year, 0, 1 + firstWeekOffset(year, dow, doy)]);\n  var dayStart = startOfDay(marker);\n  var days = Math.round(diffDays(firstWeekStart, dayStart));\n  return Math.floor(days / 7) + 1; // zero-indexed\n} // start-of-first-week - start-of-year\n\n\nfunction firstWeekOffset(year, dow, doy) {\n  // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n  var fwd = 7 + dow - doy; // first-week day local weekday -- which local weekday is fwd\n\n  var fwdlw = (7 + arrayToUtcDate([year, 0, fwd]).getUTCDay() - dow) % 7;\n  return -fwdlw + fwd - 1;\n} // Array Conversion\n\n\nfunction dateToLocalArray(date) {\n  return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];\n}\n\nfunction arrayToLocalDate(a) {\n  return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], // day of month\n  a[3] || 0, a[4] || 0, a[5] || 0);\n}\n\nfunction dateToUtcArray(date) {\n  return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()];\n}\n\nfunction arrayToUtcDate(a) {\n  // according to web standards (and Safari), a month index is required.\n  // massage if only given a year.\n  if (a.length === 1) {\n    a = a.concat([0]);\n  }\n\n  return new Date(Date.UTC.apply(Date, a));\n} // Other Utils\n\n\nfunction isValidDate(m) {\n  return !isNaN(m.valueOf());\n}\n\nfunction timeAsMs(m) {\n  return m.getUTCHours() * 1000 * 60 * 60 + m.getUTCMinutes() * 1000 * 60 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();\n}\n\nvar INTERNAL_UNITS = ['years', 'months', 'days', 'milliseconds'];\nvar PARSE_RE = /^(-?)(?:(\\d+)\\.)?(\\d+):(\\d\\d)(?::(\\d\\d)(?:\\.(\\d\\d\\d))?)?/; // Parsing and Creation\n\nfunction createDuration(input, unit) {\n  var _a;\n\n  if (typeof input === 'string') {\n    return parseString(input);\n  } else if (typeof input === 'object' && input) {\n    // non-null object\n    return normalizeObject(input);\n  } else if (typeof input === 'number') {\n    return normalizeObject((_a = {}, _a[unit || 'milliseconds'] = input, _a));\n  } else {\n    return null;\n  }\n}\n\nfunction parseString(s) {\n  var m = PARSE_RE.exec(s);\n\n  if (m) {\n    var sign = m[1] ? -1 : 1;\n    return {\n      years: 0,\n      months: 0,\n      days: sign * (m[2] ? parseInt(m[2], 10) : 0),\n      milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + // hours\n      (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + // minutes\n      (m[5] ? parseInt(m[5], 10) : 0) * 1000 + ( // seconds\n      m[6] ? parseInt(m[6], 10) : 0) // ms\n      )\n    };\n  }\n\n  return null;\n}\n\nfunction normalizeObject(obj) {\n  return {\n    years: obj.years || obj.year || 0,\n    months: obj.months || obj.month || 0,\n    days: (obj.days || obj.day || 0) + getWeeksFromInput(obj) * 7,\n    milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + // hours\n    (obj.minutes || obj.minute || 0) * 60 * 1000 + // minutes\n    (obj.seconds || obj.second || 0) * 1000 + ( // seconds\n    obj.milliseconds || obj.millisecond || obj.ms || 0) // ms\n\n  };\n}\n\nfunction getWeeksFromInput(obj) {\n  return obj.weeks || obj.week || 0;\n} // Equality\n\n\nfunction durationsEqual(d0, d1) {\n  return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;\n}\n\nfunction isSingleDay(dur) {\n  return dur.years === 0 && dur.months === 0 && dur.days === 1 && dur.milliseconds === 0;\n} // Simple Math\n\n\nfunction addDurations(d0, d1) {\n  return {\n    years: d0.years + d1.years,\n    months: d0.months + d1.months,\n    days: d0.days + d1.days,\n    milliseconds: d0.milliseconds + d1.milliseconds\n  };\n}\n\nfunction subtractDurations(d1, d0) {\n  return {\n    years: d1.years - d0.years,\n    months: d1.months - d0.months,\n    days: d1.days - d0.days,\n    milliseconds: d1.milliseconds - d0.milliseconds\n  };\n}\n\nfunction multiplyDuration(d, n) {\n  return {\n    years: d.years * n,\n    months: d.months * n,\n    days: d.days * n,\n    milliseconds: d.milliseconds * n\n  };\n} // Conversions\n// \"Rough\" because they are based on average-case Gregorian months/years\n\n\nfunction asRoughYears(dur) {\n  return asRoughDays(dur) / 365;\n}\n\nfunction asRoughMonths(dur) {\n  return asRoughDays(dur) / 30;\n}\n\nfunction asRoughDays(dur) {\n  return asRoughMs(dur) / 864e5;\n}\n\nfunction asRoughMinutes(dur) {\n  return asRoughMs(dur) / (1000 * 60);\n}\n\nfunction asRoughSeconds(dur) {\n  return asRoughMs(dur) / 1000;\n}\n\nfunction asRoughMs(dur) {\n  return dur.years * (365 * 864e5) + dur.months * (30 * 864e5) + dur.days * 864e5 + dur.milliseconds;\n} // Advanced Math\n\n\nfunction wholeDivideDurations(numerator, denominator) {\n  var res = null;\n\n  for (var i = 0; i < INTERNAL_UNITS.length; i++) {\n    var unit = INTERNAL_UNITS[i];\n\n    if (denominator[unit]) {\n      var localRes = numerator[unit] / denominator[unit];\n\n      if (!isInt(localRes) || res !== null && res !== localRes) {\n        return null;\n      }\n\n      res = localRes;\n    } else if (numerator[unit]) {\n      // needs to divide by something but can't!\n      return null;\n    }\n  }\n\n  return res;\n}\n\nfunction greatestDurationDenominator(dur, dontReturnWeeks) {\n  var ms = dur.milliseconds;\n\n  if (ms) {\n    if (ms % 1000 !== 0) {\n      return {\n        unit: 'millisecond',\n        value: ms\n      };\n    }\n\n    if (ms % (1000 * 60) !== 0) {\n      return {\n        unit: 'second',\n        value: ms / 1000\n      };\n    }\n\n    if (ms % (1000 * 60 * 60) !== 0) {\n      return {\n        unit: 'minute',\n        value: ms / (1000 * 60)\n      };\n    }\n\n    if (ms) {\n      return {\n        unit: 'hour',\n        value: ms / (1000 * 60 * 60)\n      };\n    }\n  }\n\n  if (dur.days) {\n    if (!dontReturnWeeks && dur.days % 7 === 0) {\n      return {\n        unit: 'week',\n        value: dur.days / 7\n      };\n    }\n\n    return {\n      unit: 'day',\n      value: dur.days\n    };\n  }\n\n  if (dur.months) {\n    return {\n      unit: 'month',\n      value: dur.months\n    };\n  }\n\n  if (dur.years) {\n    return {\n      unit: 'year',\n      value: dur.years\n    };\n  }\n\n  return {\n    unit: 'millisecond',\n    value: 0\n  };\n}\n/* FullCalendar-specific DOM Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left\n// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.\n\n\nfunction compensateScroll(rowEl, scrollbarWidths) {\n  if (scrollbarWidths.left) {\n    applyStyle(rowEl, {\n      borderLeftWidth: 1,\n      marginLeft: scrollbarWidths.left - 1\n    });\n  }\n\n  if (scrollbarWidths.right) {\n    applyStyle(rowEl, {\n      borderRightWidth: 1,\n      marginRight: scrollbarWidths.right - 1\n    });\n  }\n} // Undoes compensateScroll and restores all borders/margins\n\n\nfunction uncompensateScroll(rowEl) {\n  applyStyle(rowEl, {\n    marginLeft: '',\n    marginRight: '',\n    borderLeftWidth: '',\n    borderRightWidth: ''\n  });\n} // Make the mouse cursor express that an event is not allowed in the current area\n\n\nfunction disableCursor() {\n  document.body.classList.add('fc-not-allowed');\n} // Returns the mouse cursor to its original look\n\n\nfunction enableCursor() {\n  document.body.classList.remove('fc-not-allowed');\n} // Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.\n// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering\n// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and\n// reduces the available height.\n\n\nfunction distributeHeight(els, availableHeight, shouldRedistribute) {\n  // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,\n  // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.\n  var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element\n\n  var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*\n\n  var flexEls = []; // elements that are allowed to expand. array of DOM nodes\n\n  var flexOffsets = []; // amount of vertical space it takes up\n\n  var flexHeights = []; // actual css height\n\n  var usedHeight = 0;\n  undistributeHeight(els); // give all elements their natural height\n  // find elements that are below the recommended height (expandable).\n  // important to query for heights in a single first pass (to avoid reflow oscillation).\n\n  els.forEach(function (el, i) {\n    var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;\n    var naturalHeight = el.getBoundingClientRect().height;\n    var naturalOffset = naturalHeight + computeVMargins(el);\n\n    if (naturalOffset < minOffset) {\n      flexEls.push(el);\n      flexOffsets.push(naturalOffset);\n      flexHeights.push(naturalHeight);\n    } else {\n      // this element stretches past recommended height (non-expandable). mark the space as occupied.\n      usedHeight += naturalOffset;\n    }\n  }); // readjust the recommended height to only consider the height available to non-maxed-out rows.\n\n  if (shouldRedistribute) {\n    availableHeight -= usedHeight;\n    minOffset1 = Math.floor(availableHeight / flexEls.length);\n    minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*\n  } // assign heights to all expandable elements\n\n\n  flexEls.forEach(function (el, i) {\n    var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;\n    var naturalOffset = flexOffsets[i];\n    var naturalHeight = flexHeights[i];\n    var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding\n\n    if (naturalOffset < minOffset) {\n      // we check this again because redistribution might have changed things\n      el.style.height = newHeight + 'px';\n    }\n  });\n} // Undoes distrubuteHeight, restoring all els to their natural height\n\n\nfunction undistributeHeight(els) {\n  els.forEach(function (el) {\n    el.style.height = '';\n  });\n} // Given `els`, a set of <td> cells, find the cell with the largest natural width and set the widths of all the\n// cells to be that width.\n// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline\n\n\nfunction matchCellWidths(els) {\n  var maxInnerWidth = 0;\n  els.forEach(function (el) {\n    var innerEl = el.firstChild; // hopefully an element\n\n    if (innerEl instanceof HTMLElement) {\n      var innerWidth_1 = innerEl.getBoundingClientRect().width;\n\n      if (innerWidth_1 > maxInnerWidth) {\n        maxInnerWidth = innerWidth_1;\n      }\n    }\n  });\n  maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance\n\n  els.forEach(function (el) {\n    el.style.width = maxInnerWidth + 'px';\n  });\n  return maxInnerWidth;\n} // Given one element that resides inside another,\n// Subtracts the height of the inner element from the outer element.\n\n\nfunction subtractInnerElHeight(outerEl, innerEl) {\n  // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked\n  var reflowStyleProps = {\n    position: 'relative',\n    left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll\n\n  };\n  applyStyle(outerEl, reflowStyleProps);\n  applyStyle(innerEl, reflowStyleProps);\n  var diff = // grab the dimensions\n  outerEl.getBoundingClientRect().height - innerEl.getBoundingClientRect().height; // undo hack\n\n  var resetStyleProps = {\n    position: '',\n    left: ''\n  };\n  applyStyle(outerEl, resetStyleProps);\n  applyStyle(innerEl, resetStyleProps);\n  return diff;\n}\n/* Selection\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nfunction preventSelection(el) {\n  el.classList.add('fc-unselectable');\n  el.addEventListener('selectstart', preventDefault);\n}\n\nfunction allowSelection(el) {\n  el.classList.remove('fc-unselectable');\n  el.removeEventListener('selectstart', preventDefault);\n}\n/* Context Menu\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nfunction preventContextMenu(el) {\n  el.addEventListener('contextmenu', preventDefault);\n}\n\nfunction allowContextMenu(el) {\n  el.removeEventListener('contextmenu', preventDefault);\n}\n/* Object Ordering by Field\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nfunction parseFieldSpecs(input) {\n  var specs = [];\n  var tokens = [];\n  var i;\n  var token;\n\n  if (typeof input === 'string') {\n    tokens = input.split(/\\s*,\\s*/);\n  } else if (typeof input === 'function') {\n    tokens = [input];\n  } else if (Array.isArray(input)) {\n    tokens = input;\n  }\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    if (typeof token === 'string') {\n      specs.push(token.charAt(0) === '-' ? {\n        field: token.substring(1),\n        order: -1\n      } : {\n        field: token,\n        order: 1\n      });\n    } else if (typeof token === 'function') {\n      specs.push({\n        func: token\n      });\n    }\n  }\n\n  return specs;\n}\n\nfunction compareByFieldSpecs(obj0, obj1, fieldSpecs) {\n  var i;\n  var cmp;\n\n  for (i = 0; i < fieldSpecs.length; i++) {\n    cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);\n\n    if (cmp) {\n      return cmp;\n    }\n  }\n\n  return 0;\n}\n\nfunction compareByFieldSpec(obj0, obj1, fieldSpec) {\n  if (fieldSpec.func) {\n    return fieldSpec.func(obj0, obj1);\n  }\n\n  return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);\n}\n\nfunction flexibleCompare(a, b) {\n  if (!a && !b) {\n    return 0;\n  }\n\n  if (b == null) {\n    return -1;\n  }\n\n  if (a == null) {\n    return 1;\n  }\n\n  if (typeof a === 'string' || typeof b === 'string') {\n    return String(a).localeCompare(String(b));\n  }\n\n  return a - b;\n}\n/* String Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nfunction capitaliseFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction padStart(val, len) {\n  var s = String(val);\n  return '000'.substr(0, len - s.length) + s;\n}\n/* Number Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isInt(n) {\n  return n % 1 === 0;\n}\n/* Weird Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nfunction applyAll(functions, thisObj, args) {\n  if (typeof functions === 'function') {\n    // supplied a single function\n    functions = [functions];\n  }\n\n  if (functions) {\n    var i = void 0;\n    var ret = void 0;\n\n    for (i = 0; i < functions.length; i++) {\n      ret = functions[i].apply(thisObj, args) || ret;\n    }\n\n    return ret;\n  }\n}\n\nfunction firstDefined() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  for (var i = 0; i < args.length; i++) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n} // Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714\n\n\nfunction debounce(func, wait) {\n  var timeout;\n  var args;\n  var context;\n  var timestamp;\n  var result;\n\n  var later = function later() {\n    var last = new Date().valueOf() - timestamp;\n\n    if (last < wait) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      result = func.apply(context, args);\n      context = args = null;\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().valueOf();\n\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n\n    return result;\n  };\n} // Number and Boolean are only types that defaults or not computed for\n// TODO: write more comments\n\n\nfunction refineProps(rawProps, processors, defaults, leftoverProps) {\n  if (defaults === void 0) {\n    defaults = {};\n  }\n\n  var refined = {};\n\n  for (var key in processors) {\n    var processor = processors[key];\n\n    if (rawProps[key] !== undefined) {\n      // found\n      if (processor === Function) {\n        refined[key] = typeof rawProps[key] === 'function' ? rawProps[key] : null;\n      } else if (processor) {\n        // a refining function?\n        refined[key] = processor(rawProps[key]);\n      } else {\n        refined[key] = rawProps[key];\n      }\n    } else if (defaults[key] !== undefined) {\n      // there's an explicit default\n      refined[key] = defaults[key];\n    } else {\n      // must compute a default\n      if (processor === String) {\n        refined[key] = ''; // empty string is default for String\n      } else if (!processor || processor === Number || processor === Boolean || processor === Function) {\n        refined[key] = null; // assign null for other non-custom processor funcs\n      } else {\n        refined[key] = processor(null); // run the custom processor func\n      }\n    }\n  }\n\n  if (leftoverProps) {\n    for (var key in rawProps) {\n      if (processors[key] === undefined) {\n        leftoverProps[key] = rawProps[key];\n      }\n    }\n  }\n\n  return refined;\n}\n/* Date stuff that doesn't belong in datelib core\n----------------------------------------------------------------------------------------------------------------------*/\n// given a timed range, computes an all-day range that has the same exact duration,\n// but whose start time is aligned with the start of the day.\n\n\nfunction computeAlignedDayRange(timedRange) {\n  var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;\n  var start = startOfDay(timedRange.start);\n  var end = addDays(start, dayCnt);\n  return {\n    start: start,\n    end: end\n  };\n} // given a timed range, computes an all-day range based on how for the end date bleeds into the next day\n// TODO: give nextDayThreshold a default arg\n\n\nfunction computeVisibleDayRange(timedRange, nextDayThreshold) {\n  if (nextDayThreshold === void 0) {\n    nextDayThreshold = createDuration(0);\n  }\n\n  var startDay = null;\n  var endDay = null;\n\n  if (timedRange.end) {\n    endDay = startOfDay(timedRange.end);\n    var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`\n    // If the end time is actually inclusively part of the next day and is equal to or\n    // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.\n    // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.\n\n    if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {\n      endDay = addDays(endDay, 1);\n    }\n  }\n\n  if (timedRange.start) {\n    startDay = startOfDay(timedRange.start); // the beginning of the day the range starts\n    // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.\n\n    if (endDay && endDay <= startDay) {\n      endDay = addDays(startDay, 1);\n    }\n  }\n\n  return {\n    start: startDay,\n    end: endDay\n  };\n} // spans from one day into another?\n\n\nfunction isMultiDayRange(range) {\n  var visibleRange = computeVisibleDayRange(range);\n  return diffDays(visibleRange.start, visibleRange.end) > 1;\n}\n\nfunction diffDates(date0, date1, dateEnv, largeUnit) {\n  if (largeUnit === 'year') {\n    return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');\n  } else if (largeUnit === 'month') {\n    return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');\n  } else {\n    return diffDayAndTime(date0, date1); // returns a duration\n  }\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction parseRecurring(eventInput, allDayDefault, dateEnv, recurringTypes, leftovers) {\n  for (var i = 0; i < recurringTypes.length; i++) {\n    var localLeftovers = {};\n    var parsed = recurringTypes[i].parse(eventInput, localLeftovers, dateEnv);\n\n    if (parsed) {\n      var allDay = localLeftovers.allDay;\n      delete localLeftovers.allDay; // remove from leftovers\n\n      if (allDay == null) {\n        allDay = allDayDefault;\n\n        if (allDay == null) {\n          allDay = parsed.allDayGuess;\n\n          if (allDay == null) {\n            allDay = false;\n          }\n        }\n      }\n\n      _assign(leftovers, localLeftovers);\n\n      return {\n        allDay: allDay,\n        duration: parsed.duration,\n        typeData: parsed.typeData,\n        typeId: i\n      };\n    }\n  }\n\n  return null;\n}\n/*\nEvent MUST have a recurringDef\n*/\n\n\nfunction expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {\n  var typeDef = recurringTypes[eventDef.recurringDef.typeId];\n  var markers = typeDef.expand(eventDef.recurringDef.typeData, {\n    start: dateEnv.subtract(framingRange.start, duration),\n    end: framingRange.end\n  }, dateEnv); // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to\n\n  if (eventDef.allDay) {\n    markers = markers.map(startOfDay);\n  }\n\n  return markers;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty; // Merges an array of objects into a single object.\n// The second argument allows for an array of property names who's object values will be merged together.\n\nfunction mergeProps(propObjs, complexProps) {\n  var dest = {};\n  var i;\n  var name;\n  var complexObjs;\n  var j;\n  var val;\n  var props;\n\n  if (complexProps) {\n    for (i = 0; i < complexProps.length; i++) {\n      name = complexProps[i];\n      complexObjs = []; // collect the trailing object values, stopping when a non-object is discovered\n\n      for (j = propObjs.length - 1; j >= 0; j--) {\n        val = propObjs[j][name];\n\n        if (typeof val === 'object' && val) {\n          // non-null object\n          complexObjs.unshift(val);\n        } else if (val !== undefined) {\n          dest[name] = val; // if there were no objects, this value will be used\n\n          break;\n        }\n      } // if the trailing values were objects, use the merged value\n\n\n      if (complexObjs.length) {\n        dest[name] = mergeProps(complexObjs);\n      }\n    }\n  } // copy values into the destination, going from last to first\n\n\n  for (i = propObjs.length - 1; i >= 0; i--) {\n    props = propObjs[i];\n\n    for (name in props) {\n      if (!(name in dest)) {\n        // if already assigned by previous props or complex props, don't reassign\n        dest[name] = props[name];\n      }\n    }\n  }\n\n  return dest;\n}\n\nfunction filterHash(hash, func) {\n  var filtered = {};\n\n  for (var key in hash) {\n    if (func(hash[key], key)) {\n      filtered[key] = hash[key];\n    }\n  }\n\n  return filtered;\n}\n\nfunction mapHash(hash, func) {\n  var newHash = {};\n\n  for (var key in hash) {\n    newHash[key] = func(hash[key], key);\n  }\n\n  return newHash;\n}\n\nfunction arrayToHash(a) {\n  var hash = {};\n\n  for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {\n    var item = a_1[_i];\n    hash[item] = true;\n  }\n\n  return hash;\n}\n\nfunction hashValuesToArray(obj) {\n  var a = [];\n\n  for (var key in obj) {\n    a.push(obj[key]);\n  }\n\n  return a;\n}\n\nfunction isPropsEqual(obj0, obj1) {\n  for (var key in obj0) {\n    if (hasOwnProperty.call(obj0, key)) {\n      if (!(key in obj1)) {\n        return false;\n      }\n    }\n  }\n\n  for (var key in obj1) {\n    if (hasOwnProperty.call(obj1, key)) {\n      if (obj0[key] !== obj1[key]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction parseEvents(rawEvents, sourceId, calendar, allowOpenRange) {\n  var eventStore = createEmptyEventStore();\n\n  for (var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++) {\n    var rawEvent = rawEvents_1[_i];\n    var tuple = parseEvent(rawEvent, sourceId, calendar, allowOpenRange);\n\n    if (tuple) {\n      eventTupleToStore(tuple, eventStore);\n    }\n  }\n\n  return eventStore;\n}\n\nfunction eventTupleToStore(tuple, eventStore) {\n  if (eventStore === void 0) {\n    eventStore = createEmptyEventStore();\n  }\n\n  eventStore.defs[tuple.def.defId] = tuple.def;\n\n  if (tuple.instance) {\n    eventStore.instances[tuple.instance.instanceId] = tuple.instance;\n  }\n\n  return eventStore;\n}\n\nfunction expandRecurring(eventStore, framingRange, calendar) {\n  var dateEnv = calendar.dateEnv;\n  var defs = eventStore.defs,\n      instances = eventStore.instances; // remove existing recurring instances\n\n  instances = filterHash(instances, function (instance) {\n    return !defs[instance.defId].recurringDef;\n  });\n\n  for (var defId in defs) {\n    var def = defs[defId];\n\n    if (def.recurringDef) {\n      var duration = def.recurringDef.duration;\n\n      if (!duration) {\n        duration = def.allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration;\n      }\n\n      var starts = expandRecurringRanges(def, duration, framingRange, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes);\n\n      for (var _i = 0, starts_1 = starts; _i < starts_1.length; _i++) {\n        var start = starts_1[_i];\n        var instance = createEventInstance(defId, {\n          start: start,\n          end: dateEnv.add(start, duration)\n        });\n        instances[instance.instanceId] = instance;\n      }\n    }\n  }\n\n  return {\n    defs: defs,\n    instances: instances\n  };\n} // retrieves events that have the same groupId as the instance specified by `instanceId`\n// or they are the same as the instance.\n// why might instanceId not be in the store? an event from another calendar?\n\n\nfunction getRelevantEvents(eventStore, instanceId) {\n  var instance = eventStore.instances[instanceId];\n\n  if (instance) {\n    var def_1 = eventStore.defs[instance.defId]; // get events/instances with same group\n\n    var newStore = filterEventStoreDefs(eventStore, function (lookDef) {\n      return isEventDefsGrouped(def_1, lookDef);\n    }); // add the original\n    // TODO: wish we could use eventTupleToStore or something like it\n\n    newStore.defs[def_1.defId] = def_1;\n    newStore.instances[instance.instanceId] = instance;\n    return newStore;\n  }\n\n  return createEmptyEventStore();\n}\n\nfunction isEventDefsGrouped(def0, def1) {\n  return Boolean(def0.groupId && def0.groupId === def1.groupId);\n}\n\nfunction transformRawEvents(rawEvents, eventSource, calendar) {\n  var calEachTransform = calendar.opt('eventDataTransform');\n  var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;\n\n  if (sourceEachTransform) {\n    rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);\n  }\n\n  if (calEachTransform) {\n    rawEvents = transformEachRawEvent(rawEvents, calEachTransform);\n  }\n\n  return rawEvents;\n}\n\nfunction transformEachRawEvent(rawEvents, func) {\n  var refinedEvents;\n\n  if (!func) {\n    refinedEvents = rawEvents;\n  } else {\n    refinedEvents = [];\n\n    for (var _i = 0, rawEvents_2 = rawEvents; _i < rawEvents_2.length; _i++) {\n      var rawEvent = rawEvents_2[_i];\n      var refinedEvent = func(rawEvent);\n\n      if (refinedEvent) {\n        refinedEvents.push(refinedEvent);\n      } else if (refinedEvent == null) {\n        refinedEvents.push(rawEvent);\n      } // if a different falsy value, do nothing\n\n    }\n  }\n\n  return refinedEvents;\n}\n\nfunction createEmptyEventStore() {\n  return {\n    defs: {},\n    instances: {}\n  };\n}\n\nfunction mergeEventStores(store0, store1) {\n  return {\n    defs: _assign({}, store0.defs, store1.defs),\n    instances: _assign({}, store0.instances, store1.instances)\n  };\n}\n\nfunction filterEventStoreDefs(eventStore, filterFunc) {\n  var defs = filterHash(eventStore.defs, filterFunc);\n  var instances = filterHash(eventStore.instances, function (instance) {\n    return defs[instance.defId]; // still exists?\n  });\n  return {\n    defs: defs,\n    instances: instances\n  };\n}\n\nfunction parseRange(input, dateEnv) {\n  var start = null;\n  var end = null;\n\n  if (input.start) {\n    start = dateEnv.createMarker(input.start);\n  }\n\n  if (input.end) {\n    end = dateEnv.createMarker(input.end);\n  }\n\n  if (!start && !end) {\n    return null;\n  }\n\n  if (start && end && end < start) {\n    return null;\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n} // SIDE-EFFECT: will mutate ranges.\n// Will return a new array result.\n\n\nfunction invertRanges(ranges, constraintRange) {\n  var invertedRanges = [];\n  var start = constraintRange.start; // the end of the previous range. the start of the new range\n\n  var i;\n  var dateRange; // ranges need to be in order. required for our date-walking algorithm\n\n  ranges.sort(compareRanges);\n\n  for (i = 0; i < ranges.length; i++) {\n    dateRange = ranges[i]; // add the span of time before the event (if there is any)\n\n    if (dateRange.start > start) {\n      // compare millisecond time (skip any ambig logic)\n      invertedRanges.push({\n        start: start,\n        end: dateRange.start\n      });\n    }\n\n    if (dateRange.end > start) {\n      start = dateRange.end;\n    }\n  } // add the span of time after the last event (if there is any)\n\n\n  if (start < constraintRange.end) {\n    // compare millisecond time (skip any ambig logic)\n    invertedRanges.push({\n      start: start,\n      end: constraintRange.end\n    });\n  }\n\n  return invertedRanges;\n}\n\nfunction compareRanges(range0, range1) {\n  return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first\n}\n\nfunction intersectRanges(range0, range1) {\n  var start = range0.start;\n  var end = range0.end;\n  var newRange = null;\n\n  if (range1.start !== null) {\n    if (start === null) {\n      start = range1.start;\n    } else {\n      start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));\n    }\n  }\n\n  if (range1.end != null) {\n    if (end === null) {\n      end = range1.end;\n    } else {\n      end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));\n    }\n  }\n\n  if (start === null || end === null || start < end) {\n    newRange = {\n      start: start,\n      end: end\n    };\n  }\n\n  return newRange;\n}\n\nfunction rangesEqual(range0, range1) {\n  return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());\n}\n\nfunction rangesIntersect(range0, range1) {\n  return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);\n}\n\nfunction rangeContainsRange(outerRange, innerRange) {\n  return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);\n}\n\nfunction rangeContainsMarker(range, date) {\n  return (range.start === null || date >= range.start) && (range.end === null || date < range.end);\n} // If the given date is not within the given range, move it inside.\n// (If it's past the end, make it one millisecond before the end).\n\n\nfunction constrainMarkerToRange(date, range) {\n  if (range.start != null && date < range.start) {\n    return range.start;\n  }\n\n  if (range.end != null && date >= range.end) {\n    return new Date(range.end.valueOf() - 1);\n  }\n\n  return date;\n}\n\nfunction removeExact(array, exactVal) {\n  var removeCnt = 0;\n  var i = 0;\n\n  while (i < array.length) {\n    if (array[i] === exactVal) {\n      array.splice(i, 1);\n      removeCnt++;\n    } else {\n      i++;\n    }\n  }\n\n  return removeCnt;\n}\n\nfunction isArraysEqual(a0, a1) {\n  var len = a0.length;\n  var i;\n\n  if (len !== a1.length) {\n    // not array? or not same length?\n    return false;\n  }\n\n  for (i = 0; i < len; i++) {\n    if (a0[i] !== a1[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction memoize(workerFunc) {\n  var args;\n  var res;\n  return function () {\n    if (!args || !isArraysEqual(args, arguments)) {\n      args = arguments;\n      res = workerFunc.apply(this, arguments);\n    }\n\n    return res;\n  };\n}\n/*\nalways executes the workerFunc, but if the result is equal to the previous result,\nreturn the previous result instead.\n*/\n\n\nfunction memoizeOutput(workerFunc, equalityFunc) {\n  var cachedRes = null;\n  return function () {\n    var newRes = workerFunc.apply(this, arguments);\n\n    if (cachedRes === null || !(cachedRes === newRes || equalityFunc(cachedRes, newRes))) {\n      cachedRes = newRes;\n    }\n\n    return cachedRes;\n  };\n}\n\nvar EXTENDED_SETTINGS_AND_SEVERITIES = {\n  week: 3,\n  separator: 0,\n  omitZeroMinute: 0,\n  meridiem: 0,\n  omitCommas: 0\n};\nvar STANDARD_DATE_PROP_SEVERITIES = {\n  timeZoneName: 7,\n  era: 6,\n  year: 5,\n  month: 4,\n  day: 2,\n  weekday: 2,\n  hour: 1,\n  minute: 1,\n  second: 1\n};\nvar MERIDIEM_RE = /\\s*([ap])\\.?m\\.?/i; // eats up leading spaces too\n\nvar COMMA_RE = /,/g; // we need re for globalness\n\nvar MULTI_SPACE_RE = /\\s+/g;\nvar LTR_RE = /\\u200e/g; // control character\n\nvar UTC_RE = /UTC|GMT/;\n\nvar NativeFormatter =\n/** @class */\nfunction () {\n  function NativeFormatter(formatSettings) {\n    var standardDateProps = {};\n    var extendedSettings = {};\n    var severity = 0;\n\n    for (var name_1 in formatSettings) {\n      if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {\n        extendedSettings[name_1] = formatSettings[name_1];\n        severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);\n      } else {\n        standardDateProps[name_1] = formatSettings[name_1];\n\n        if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {\n          severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);\n        }\n      }\n    }\n\n    this.standardDateProps = standardDateProps;\n    this.extendedSettings = extendedSettings;\n    this.severity = severity;\n    this.buildFormattingFunc = memoize(buildFormattingFunc);\n  }\n\n  NativeFormatter.prototype.format = function (date, context) {\n    return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);\n  };\n\n  NativeFormatter.prototype.formatRange = function (start, end, context) {\n    var _a = this,\n        standardDateProps = _a.standardDateProps,\n        extendedSettings = _a.extendedSettings;\n\n    var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);\n\n    if (!diffSeverity) {\n      return this.format(start, context);\n    }\n\n    var biggestUnitForPartial = diffSeverity;\n\n    if (biggestUnitForPartial > 1 && ( // the two dates are different in a way that's larger scale than time\n    standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') && (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') && (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) {\n      biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time\n    }\n\n    var full0 = this.format(start, context);\n    var full1 = this.format(end, context);\n\n    if (full0 === full1) {\n      return full0;\n    }\n\n    var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);\n    var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);\n    var partial0 = partialFormattingFunc(start);\n    var partial1 = partialFormattingFunc(end);\n    var insertion = findCommonInsertion(full0, partial0, full1, partial1);\n    var separator = extendedSettings.separator || '';\n\n    if (insertion) {\n      return insertion.before + partial0 + separator + partial1 + insertion.after;\n    }\n\n    return full0 + separator + full1;\n  };\n\n  NativeFormatter.prototype.getLargestUnit = function () {\n    switch (this.severity) {\n      case 7:\n      case 6:\n      case 5:\n        return 'year';\n\n      case 4:\n        return 'month';\n\n      case 3:\n        return 'week';\n\n      default:\n        return 'day';\n    }\n  };\n\n  return NativeFormatter;\n}();\n\nfunction buildFormattingFunc(standardDateProps, extendedSettings, context) {\n  var standardDatePropCnt = Object.keys(standardDateProps).length;\n\n  if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') {\n    return function (date) {\n      return formatTimeZoneOffset(date.timeZoneOffset);\n    };\n  }\n\n  if (standardDatePropCnt === 0 && extendedSettings.week) {\n    return function (date) {\n      return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekLabel, context.locale, extendedSettings.week);\n    };\n  }\n\n  return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);\n}\n\nfunction buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {\n  standardDateProps = _assign({}, standardDateProps); // copy\n\n  extendedSettings = _assign({}, extendedSettings); // copy\n\n  sanitizeSettings(standardDateProps, extendedSettings);\n  standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers\n\n  var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);\n  var zeroFormat; // needed?\n\n  if (extendedSettings.omitZeroMinute) {\n    var zeroProps = _assign({}, standardDateProps);\n\n    delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings\n\n    zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);\n  }\n\n  return function (date) {\n    var marker = date.marker;\n    var format;\n\n    if (zeroFormat && !marker.getUTCMinutes()) {\n      format = zeroFormat;\n    } else {\n      format = normalFormat;\n    }\n\n    var s = format.format(marker);\n    return postProcess(s, date, standardDateProps, extendedSettings, context);\n  };\n}\n\nfunction sanitizeSettings(standardDateProps, extendedSettings) {\n  // deal with a browser inconsistency where formatting the timezone\n  // requires that the hour/minute be present.\n  if (standardDateProps.timeZoneName) {\n    if (!standardDateProps.hour) {\n      standardDateProps.hour = '2-digit';\n    }\n\n    if (!standardDateProps.minute) {\n      standardDateProps.minute = '2-digit';\n    }\n  } // only support short timezone names\n\n\n  if (standardDateProps.timeZoneName === 'long') {\n    standardDateProps.timeZoneName = 'short';\n  } // if requesting to display seconds, MUST display minutes\n\n\n  if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {\n    delete extendedSettings.omitZeroMinute;\n  }\n}\n\nfunction postProcess(s, date, standardDateProps, extendedSettings, context) {\n  s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes\n\n  if (standardDateProps.timeZoneName === 'short') {\n    s = injectTzoStr(s, context.timeZone === 'UTC' || date.timeZoneOffset == null ? 'UTC' : // important to normalize for IE, which does \"GMT\"\n    formatTimeZoneOffset(date.timeZoneOffset));\n  }\n\n  if (extendedSettings.omitCommas) {\n    s = s.replace(COMMA_RE, '').trim();\n  }\n\n  if (extendedSettings.omitZeroMinute) {\n    s = s.replace(':00', ''); // zeroFormat doesn't always achieve this\n  } // ^ do anything that might create adjacent spaces before this point,\n  // because MERIDIEM_RE likes to eat up loading spaces\n\n\n  if (extendedSettings.meridiem === false) {\n    s = s.replace(MERIDIEM_RE, '').trim();\n  } else if (extendedSettings.meridiem === 'narrow') {\n    // a/p\n    s = s.replace(MERIDIEM_RE, function (m0, m1) {\n      return m1.toLocaleLowerCase();\n    });\n  } else if (extendedSettings.meridiem === 'short') {\n    // am/pm\n    s = s.replace(MERIDIEM_RE, function (m0, m1) {\n      return m1.toLocaleLowerCase() + 'm';\n    });\n  } else if (extendedSettings.meridiem === 'lowercase') {\n    // other meridiem transformers already converted to lowercase\n    s = s.replace(MERIDIEM_RE, function (m0) {\n      return m0.toLocaleLowerCase();\n    });\n  }\n\n  s = s.replace(MULTI_SPACE_RE, ' ');\n  s = s.trim();\n  return s;\n}\n\nfunction injectTzoStr(s, tzoStr) {\n  var replaced = false;\n  s = s.replace(UTC_RE, function () {\n    replaced = true;\n    return tzoStr;\n  }); // IE11 doesn't include UTC/GMT in the original string, so append to end\n\n  if (!replaced) {\n    s += ' ' + tzoStr;\n  }\n\n  return s;\n}\n\nfunction formatWeekNumber(num, weekLabel, locale, display) {\n  var parts = [];\n\n  if (display === 'narrow') {\n    parts.push(weekLabel);\n  } else if (display === 'short') {\n    parts.push(weekLabel, ' ');\n  } // otherwise, considered 'numeric'\n\n\n  parts.push(locale.simpleNumberFormat.format(num));\n\n  if (locale.options.isRtl) {\n    // TODO: use control characters instead?\n    parts.reverse();\n  }\n\n  return parts.join('');\n} // Range Formatting Utils\n// 0 = exactly the same\n// 1 = different by time\n// and bigger\n\n\nfunction computeMarkerDiffSeverity(d0, d1, ca) {\n  if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {\n    return 5;\n  }\n\n  if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {\n    return 4;\n  }\n\n  if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {\n    return 2;\n  }\n\n  if (timeAsMs(d0) !== timeAsMs(d1)) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction computePartialFormattingOptions(options, biggestUnit) {\n  var partialOptions = {};\n\n  for (var name_2 in options) {\n    if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)\n    STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {\n      partialOptions[name_2] = options[name_2];\n    }\n  }\n\n  return partialOptions;\n}\n\nfunction findCommonInsertion(full0, partial0, full1, partial1) {\n  var i0 = 0;\n\n  while (i0 < full0.length) {\n    var found0 = full0.indexOf(partial0, i0);\n\n    if (found0 === -1) {\n      break;\n    }\n\n    var before0 = full0.substr(0, found0);\n    i0 = found0 + partial0.length;\n    var after0 = full0.substr(i0);\n    var i1 = 0;\n\n    while (i1 < full1.length) {\n      var found1 = full1.indexOf(partial1, i1);\n\n      if (found1 === -1) {\n        break;\n      }\n\n      var before1 = full1.substr(0, found1);\n      i1 = found1 + partial1.length;\n      var after1 = full1.substr(i1);\n\n      if (before0 === before1 && after0 === after1) {\n        return {\n          before: before0,\n          after: after0\n        };\n      }\n    }\n  }\n\n  return null;\n}\n/*\nTODO: fix the terminology of \"formatter\" vs \"formatting func\"\n*/\n\n/*\nAt the time of instantiation, this object does not know which cmd-formatting system it will use.\nIt receives this at the time of formatting, as a setting.\n*/\n\n\nvar CmdFormatter =\n/** @class */\nfunction () {\n  function CmdFormatter(cmdStr, separator) {\n    this.cmdStr = cmdStr;\n    this.separator = separator;\n  }\n\n  CmdFormatter.prototype.format = function (date, context) {\n    return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, this.separator));\n  };\n\n  CmdFormatter.prototype.formatRange = function (start, end, context) {\n    return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, this.separator));\n  };\n\n  return CmdFormatter;\n}();\n\nvar FuncFormatter =\n/** @class */\nfunction () {\n  function FuncFormatter(func) {\n    this.func = func;\n  }\n\n  FuncFormatter.prototype.format = function (date, context) {\n    return this.func(createVerboseFormattingArg(date, null, context));\n  };\n\n  FuncFormatter.prototype.formatRange = function (start, end, context) {\n    return this.func(createVerboseFormattingArg(start, end, context));\n  };\n\n  return FuncFormatter;\n}(); // Formatter Object Creation\n\n\nfunction createFormatter(input, defaultSeparator) {\n  if (typeof input === 'object' && input) {\n    // non-null object\n    if (typeof defaultSeparator === 'string') {\n      input = _assign({\n        separator: defaultSeparator\n      }, input);\n    }\n\n    return new NativeFormatter(input);\n  } else if (typeof input === 'string') {\n    return new CmdFormatter(input, defaultSeparator);\n  } else if (typeof input === 'function') {\n    return new FuncFormatter(input);\n  }\n} // String Utils\n// timeZoneOffset is in minutes\n\n\nfunction buildIsoString(marker, timeZoneOffset, stripZeroTime) {\n  if (stripZeroTime === void 0) {\n    stripZeroTime = false;\n  }\n\n  var s = marker.toISOString();\n  s = s.replace('.000', '');\n\n  if (stripZeroTime) {\n    s = s.replace('T00:00:00Z', '');\n  }\n\n  if (s.length > 10) {\n    // time part wasn't stripped, can add timezone info\n    if (timeZoneOffset == null) {\n      s = s.replace('Z', '');\n    } else if (timeZoneOffset !== 0) {\n      s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));\n    } // otherwise, its UTC-0 and we want to keep the Z\n\n  }\n\n  return s;\n}\n\nfunction formatIsoTimeString(marker) {\n  return padStart(marker.getUTCHours(), 2) + ':' + padStart(marker.getUTCMinutes(), 2) + ':' + padStart(marker.getUTCSeconds(), 2);\n}\n\nfunction formatTimeZoneOffset(minutes, doIso) {\n  if (doIso === void 0) {\n    doIso = false;\n  }\n\n  var sign = minutes < 0 ? '-' : '+';\n  var abs = Math.abs(minutes);\n  var hours = Math.floor(abs / 60);\n  var mins = Math.round(abs % 60);\n\n  if (doIso) {\n    return sign + padStart(hours, 2) + ':' + padStart(mins, 2);\n  } else {\n    return 'GMT' + sign + hours + (mins ? ':' + padStart(mins, 2) : '');\n  }\n} // Arg Utils\n\n\nfunction createVerboseFormattingArg(start, end, context, separator) {\n  var startInfo = expandZonedMarker(start, context.calendarSystem);\n  var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;\n  return {\n    date: startInfo,\n    start: startInfo,\n    end: endInfo,\n    timeZone: context.timeZone,\n    localeCodes: context.locale.codes,\n    separator: separator\n  };\n}\n\nfunction expandZonedMarker(dateInfo, calendarSystem) {\n  var a = calendarSystem.markerToArray(dateInfo.marker);\n  return {\n    marker: dateInfo.marker,\n    timeZoneOffset: dateInfo.timeZoneOffset,\n    array: a,\n    year: a[0],\n    month: a[1],\n    day: a[2],\n    hour: a[3],\n    minute: a[4],\n    second: a[5],\n    millisecond: a[6]\n  };\n}\n\nvar EventSourceApi =\n/** @class */\nfunction () {\n  function EventSourceApi(calendar, internalEventSource) {\n    this.calendar = calendar;\n    this.internalEventSource = internalEventSource;\n  }\n\n  EventSourceApi.prototype.remove = function () {\n    this.calendar.dispatch({\n      type: 'REMOVE_EVENT_SOURCE',\n      sourceId: this.internalEventSource.sourceId\n    });\n  };\n\n  EventSourceApi.prototype.refetch = function () {\n    this.calendar.dispatch({\n      type: 'FETCH_EVENT_SOURCES',\n      sourceIds: [this.internalEventSource.sourceId]\n    });\n  };\n\n  Object.defineProperty(EventSourceApi.prototype, \"id\", {\n    get: function get() {\n      return this.internalEventSource.publicId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventSourceApi.prototype, \"url\", {\n    // only relevant to json-feed event sources\n    get: function get() {\n      return this.internalEventSource.meta.url;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return EventSourceApi;\n}();\n\nvar EventApi =\n/** @class */\nfunction () {\n  function EventApi(calendar, def, instance) {\n    this._calendar = calendar;\n    this._def = def;\n    this._instance = instance || null;\n  }\n  /*\n  TODO: make event struct more responsible for this\n  */\n\n\n  EventApi.prototype.setProp = function (name, val) {\n    var _a, _b;\n\n    if (name in DATE_PROPS) ;else if (name in NON_DATE_PROPS) {\n      if (typeof NON_DATE_PROPS[name] === 'function') {\n        val = NON_DATE_PROPS[name](val);\n      }\n\n      this.mutate({\n        standardProps: (_a = {}, _a[name] = val, _a)\n      });\n    } else if (name in UNSCOPED_EVENT_UI_PROPS) {\n      var ui = void 0;\n\n      if (typeof UNSCOPED_EVENT_UI_PROPS[name] === 'function') {\n        val = UNSCOPED_EVENT_UI_PROPS[name](val);\n      }\n\n      if (name === 'color') {\n        ui = {\n          backgroundColor: val,\n          borderColor: val\n        };\n      } else if (name === 'editable') {\n        ui = {\n          startEditable: val,\n          durationEditable: val\n        };\n      } else {\n        ui = (_b = {}, _b[name] = val, _b);\n      }\n\n      this.mutate({\n        standardProps: {\n          ui: ui\n        }\n      });\n    }\n  };\n\n  EventApi.prototype.setExtendedProp = function (name, val) {\n    var _a;\n\n    this.mutate({\n      extendedProps: (_a = {}, _a[name] = val, _a)\n    });\n  };\n\n  EventApi.prototype.setStart = function (startInput, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var dateEnv = this._calendar.dateEnv;\n    var start = dateEnv.createMarker(startInput);\n\n    if (start && this._instance) {\n      // TODO: warning if parsed bad\n      var instanceRange = this._instance.range;\n      var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?\n\n      if (options.maintainDuration) {\n        this.mutate({\n          datesDelta: startDelta\n        });\n      } else {\n        this.mutate({\n          startDelta: startDelta\n        });\n      }\n    }\n  };\n\n  EventApi.prototype.setEnd = function (endInput, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var dateEnv = this._calendar.dateEnv;\n    var end;\n\n    if (endInput != null) {\n      end = dateEnv.createMarker(endInput);\n\n      if (!end) {\n        return; // TODO: warning if parsed bad\n      }\n    }\n\n    if (this._instance) {\n      if (end) {\n        var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);\n        this.mutate({\n          endDelta: endDelta\n        });\n      } else {\n        this.mutate({\n          standardProps: {\n            hasEnd: false\n          }\n        });\n      }\n    }\n  };\n\n  EventApi.prototype.setDates = function (startInput, endInput, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var dateEnv = this._calendar.dateEnv;\n    var standardProps = {\n      allDay: options.allDay\n    };\n    var start = dateEnv.createMarker(startInput);\n    var end;\n\n    if (!start) {\n      return; // TODO: warning if parsed bad\n    }\n\n    if (endInput != null) {\n      end = dateEnv.createMarker(endInput);\n\n      if (!end) {\n        // TODO: warning if parsed bad\n        return;\n      }\n    }\n\n    if (this._instance) {\n      var instanceRange = this._instance.range; // when computing the diff for an event being converted to all-day,\n      // compute diff off of the all-day values the way event-mutation does.\n\n      if (options.allDay === true) {\n        instanceRange = computeAlignedDayRange(instanceRange);\n      }\n\n      var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);\n\n      if (end) {\n        var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);\n\n        if (durationsEqual(startDelta, endDelta)) {\n          this.mutate({\n            datesDelta: startDelta,\n            standardProps: standardProps\n          });\n        } else {\n          this.mutate({\n            startDelta: startDelta,\n            endDelta: endDelta,\n            standardProps: standardProps\n          });\n        }\n      } else {\n        // means \"clear the end\"\n        standardProps.hasEnd = false;\n        this.mutate({\n          datesDelta: startDelta,\n          standardProps: standardProps\n        });\n      }\n    }\n  };\n\n  EventApi.prototype.moveStart = function (deltaInput) {\n    var delta = createDuration(deltaInput);\n\n    if (delta) {\n      // TODO: warning if parsed bad\n      this.mutate({\n        startDelta: delta\n      });\n    }\n  };\n\n  EventApi.prototype.moveEnd = function (deltaInput) {\n    var delta = createDuration(deltaInput);\n\n    if (delta) {\n      // TODO: warning if parsed bad\n      this.mutate({\n        endDelta: delta\n      });\n    }\n  };\n\n  EventApi.prototype.moveDates = function (deltaInput) {\n    var delta = createDuration(deltaInput);\n\n    if (delta) {\n      // TODO: warning if parsed bad\n      this.mutate({\n        datesDelta: delta\n      });\n    }\n  };\n\n  EventApi.prototype.setAllDay = function (allDay, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var standardProps = {\n      allDay: allDay\n    };\n    var maintainDuration = options.maintainDuration;\n\n    if (maintainDuration == null) {\n      maintainDuration = this._calendar.opt('allDayMaintainDuration');\n    }\n\n    if (this._def.allDay !== allDay) {\n      standardProps.hasEnd = maintainDuration;\n    }\n\n    this.mutate({\n      standardProps: standardProps\n    });\n  };\n\n  EventApi.prototype.formatRange = function (formatInput) {\n    var dateEnv = this._calendar.dateEnv;\n    var instance = this._instance;\n    var formatter = createFormatter(formatInput, this._calendar.opt('defaultRangeSeparator'));\n\n    if (this._def.hasEnd) {\n      return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {\n        forcedStartTzo: instance.forcedStartTzo,\n        forcedEndTzo: instance.forcedEndTzo\n      });\n    } else {\n      return dateEnv.format(instance.range.start, formatter, {\n        forcedTzo: instance.forcedStartTzo\n      });\n    }\n  };\n\n  EventApi.prototype.mutate = function (mutation) {\n    var def = this._def;\n    var instance = this._instance;\n\n    if (instance) {\n      this._calendar.dispatch({\n        type: 'MUTATE_EVENTS',\n        instanceId: instance.instanceId,\n        mutation: mutation,\n        fromApi: true\n      });\n\n      var eventStore = this._calendar.state.eventStore;\n      this._def = eventStore.defs[def.defId];\n      this._instance = eventStore.instances[instance.instanceId];\n    }\n  };\n\n  EventApi.prototype.remove = function () {\n    this._calendar.dispatch({\n      type: 'REMOVE_EVENT_DEF',\n      defId: this._def.defId\n    });\n  };\n\n  Object.defineProperty(EventApi.prototype, \"source\", {\n    get: function get() {\n      var sourceId = this._def.sourceId;\n\n      if (sourceId) {\n        return new EventSourceApi(this._calendar, this._calendar.state.eventSources[sourceId]);\n      }\n\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"start\", {\n    get: function get() {\n      return this._instance ? this._calendar.dateEnv.toDate(this._instance.range.start) : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"end\", {\n    get: function get() {\n      return this._instance && this._def.hasEnd ? this._calendar.dateEnv.toDate(this._instance.range.end) : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"id\", {\n    // computable props that all access the def\n    // TODO: find a TypeScript-compatible way to do this at scale\n    get: function get() {\n      return this._def.publicId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"groupId\", {\n    get: function get() {\n      return this._def.groupId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"allDay\", {\n    get: function get() {\n      return this._def.allDay;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"title\", {\n    get: function get() {\n      return this._def.title;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"url\", {\n    get: function get() {\n      return this._def.url;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"rendering\", {\n    get: function get() {\n      return this._def.rendering;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"startEditable\", {\n    get: function get() {\n      return this._def.ui.startEditable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"durationEditable\", {\n    get: function get() {\n      return this._def.ui.durationEditable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"constraint\", {\n    get: function get() {\n      return this._def.ui.constraints[0] || null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"overlap\", {\n    get: function get() {\n      return this._def.ui.overlap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"allow\", {\n    get: function get() {\n      return this._def.ui.allows[0] || null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"backgroundColor\", {\n    get: function get() {\n      return this._def.ui.backgroundColor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"borderColor\", {\n    get: function get() {\n      return this._def.ui.borderColor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"textColor\", {\n    get: function get() {\n      return this._def.ui.textColor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"classNames\", {\n    // NOTE: user can't modify these because Object.freeze was called in event-def parsing\n    get: function get() {\n      return this._def.ui.classNames;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EventApi.prototype, \"extendedProps\", {\n    get: function get() {\n      return this._def.extendedProps;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return EventApi;\n}();\n/*\nSpecifying nextDayThreshold signals that all-day ranges should be sliced.\n*/\n\n\nfunction sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {\n  var inverseBgByGroupId = {};\n  var inverseBgByDefId = {};\n  var defByGroupId = {};\n  var bgRanges = [];\n  var fgRanges = [];\n  var eventUis = compileEventUis(eventStore.defs, eventUiBases);\n\n  for (var defId in eventStore.defs) {\n    var def = eventStore.defs[defId];\n\n    if (def.rendering === 'inverse-background') {\n      if (def.groupId) {\n        inverseBgByGroupId[def.groupId] = [];\n\n        if (!defByGroupId[def.groupId]) {\n          defByGroupId[def.groupId] = def;\n        }\n      } else {\n        inverseBgByDefId[defId] = [];\n      }\n    }\n  }\n\n  for (var instanceId in eventStore.instances) {\n    var instance = eventStore.instances[instanceId];\n    var def = eventStore.defs[instance.defId];\n    var ui = eventUis[def.defId];\n    var origRange = instance.range;\n    var normalRange = !def.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;\n    var slicedRange = intersectRanges(normalRange, framingRange);\n\n    if (slicedRange) {\n      if (def.rendering === 'inverse-background') {\n        if (def.groupId) {\n          inverseBgByGroupId[def.groupId].push(slicedRange);\n        } else {\n          inverseBgByDefId[instance.defId].push(slicedRange);\n        }\n      } else {\n        (def.rendering === 'background' ? bgRanges : fgRanges).push({\n          def: def,\n          ui: ui,\n          instance: instance,\n          range: slicedRange,\n          isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),\n          isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()\n        });\n      }\n    }\n  }\n\n  for (var groupId in inverseBgByGroupId) {\n    // BY GROUP\n    var ranges = inverseBgByGroupId[groupId];\n    var invertedRanges = invertRanges(ranges, framingRange);\n\n    for (var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++) {\n      var invertedRange = invertedRanges_1[_i];\n      var def = defByGroupId[groupId];\n      var ui = eventUis[def.defId];\n      bgRanges.push({\n        def: def,\n        ui: ui,\n        instance: null,\n        range: invertedRange,\n        isStart: false,\n        isEnd: false\n      });\n    }\n  }\n\n  for (var defId in inverseBgByDefId) {\n    var ranges = inverseBgByDefId[defId];\n    var invertedRanges = invertRanges(ranges, framingRange);\n\n    for (var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++) {\n      var invertedRange = invertedRanges_2[_a];\n      bgRanges.push({\n        def: eventStore.defs[defId],\n        ui: eventUis[defId],\n        instance: null,\n        range: invertedRange,\n        isStart: false,\n        isEnd: false\n      });\n    }\n  }\n\n  return {\n    bg: bgRanges,\n    fg: fgRanges\n  };\n}\n\nfunction hasBgRendering(def) {\n  return def.rendering === 'background' || def.rendering === 'inverse-background';\n}\n\nfunction filterSegsViaEls(view, segs, isMirror) {\n  if (view.hasPublicHandlers('eventRender')) {\n    segs = segs.filter(function (seg) {\n      var custom = view.publiclyTrigger('eventRender', [{\n        event: new EventApi(view.calendar, seg.eventRange.def, seg.eventRange.instance),\n        isMirror: isMirror,\n        isStart: seg.isStart,\n        isEnd: seg.isEnd,\n        // TODO: include seg.range once all components consistently generate it\n        el: seg.el,\n        view: view\n      }]);\n\n      if (custom === false) {\n        // means don't render at all\n        return false;\n      } else if (custom && custom !== true) {\n        seg.el = custom;\n      }\n\n      return true;\n    });\n  }\n\n  for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n    var seg = segs_1[_i];\n    setElSeg(seg.el, seg);\n  }\n\n  return segs;\n}\n\nfunction setElSeg(el, seg) {\n  el.fcSeg = seg;\n}\n\nfunction getElSeg(el) {\n  return el.fcSeg || null;\n} // event ui computation\n\n\nfunction compileEventUis(eventDefs, eventUiBases) {\n  return mapHash(eventDefs, function (eventDef) {\n    return compileEventUi(eventDef, eventUiBases);\n  });\n}\n\nfunction compileEventUi(eventDef, eventUiBases) {\n  var uis = [];\n\n  if (eventUiBases['']) {\n    uis.push(eventUiBases['']);\n  }\n\n  if (eventUiBases[eventDef.defId]) {\n    uis.push(eventUiBases[eventDef.defId]);\n  }\n\n  uis.push(eventDef.ui);\n  return combineEventUis(uis);\n} // applies the mutation to ALL defs/instances within the event store\n\n\nfunction applyMutationToEventStore(eventStore, eventConfigBase, mutation, calendar) {\n  var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);\n  var dest = createEmptyEventStore();\n\n  for (var defId in eventStore.defs) {\n    var def = eventStore.defs[defId];\n    dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, calendar.pluginSystem.hooks.eventDefMutationAppliers, calendar);\n  }\n\n  for (var instanceId in eventStore.instances) {\n    var instance = eventStore.instances[instanceId];\n    var def = dest.defs[instance.defId]; // important to grab the newly modified def\n\n    dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, calendar);\n  }\n\n  return dest;\n}\n\nfunction applyMutationToEventDef(eventDef, eventConfig, mutation, appliers, calendar) {\n  var standardProps = mutation.standardProps || {}; // if hasEnd has not been specified, guess a good value based on deltas.\n  // if duration will change, there's no way the default duration will persist,\n  // and thus, we need to mark the event as having a real end\n\n  if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) {\n    standardProps.hasEnd = true; // TODO: is this mutation okay?\n  }\n\n  var copy = _assign({}, eventDef, standardProps, {\n    ui: _assign({}, eventDef.ui, standardProps.ui)\n  });\n\n  if (mutation.extendedProps) {\n    copy.extendedProps = _assign({}, copy.extendedProps, mutation.extendedProps);\n  }\n\n  for (var _i = 0, appliers_1 = appliers; _i < appliers_1.length; _i++) {\n    var applier = appliers_1[_i];\n    applier(copy, mutation, calendar);\n  }\n\n  if (!copy.hasEnd && calendar.opt('forceEventDuration')) {\n    copy.hasEnd = true;\n  }\n\n  return copy;\n}\n\nfunction applyMutationToEventInstance(eventInstance, eventDef, // must first be modified by applyMutationToEventDef\neventConfig, mutation, calendar) {\n  var dateEnv = calendar.dateEnv;\n  var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;\n  var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;\n\n  var copy = _assign({}, eventInstance);\n\n  if (forceAllDay) {\n    copy.range = computeAlignedDayRange(copy.range);\n  }\n\n  if (mutation.datesDelta && eventConfig.startEditable) {\n    copy.range = {\n      start: dateEnv.add(copy.range.start, mutation.datesDelta),\n      end: dateEnv.add(copy.range.end, mutation.datesDelta)\n    };\n  }\n\n  if (mutation.startDelta && eventConfig.durationEditable) {\n    copy.range = {\n      start: dateEnv.add(copy.range.start, mutation.startDelta),\n      end: copy.range.end\n    };\n  }\n\n  if (mutation.endDelta && eventConfig.durationEditable) {\n    copy.range = {\n      start: copy.range.start,\n      end: dateEnv.add(copy.range.end, mutation.endDelta)\n    };\n  }\n\n  if (clearEnd) {\n    copy.range = {\n      start: copy.range.start,\n      end: calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start)\n    };\n  } // in case event was all-day but the supplied deltas were not\n  // better util for this?\n\n\n  if (eventDef.allDay) {\n    copy.range = {\n      start: startOfDay(copy.range.start),\n      end: startOfDay(copy.range.end)\n    };\n  } // handle invalid durations\n\n\n  if (copy.range.end < copy.range.start) {\n    copy.range.end = calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start);\n  }\n\n  return copy;\n}\n\nfunction reduceEventStore(eventStore, action, eventSources, dateProfile, calendar) {\n  switch (action.type) {\n    case 'RECEIVE_EVENTS':\n      // raw\n      return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, calendar);\n\n    case 'ADD_EVENTS':\n      // already parsed, but not expanded\n      return addEvent(eventStore, action.eventStore, // new ones\n      dateProfile ? dateProfile.activeRange : null, calendar);\n\n    case 'MERGE_EVENTS':\n      // already parsed and expanded\n      return mergeEventStores(eventStore, action.eventStore);\n\n    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n\n    case 'NEXT':\n    case 'SET_DATE':\n    case 'SET_VIEW_TYPE':\n      if (dateProfile) {\n        return expandRecurring(eventStore, dateProfile.activeRange, calendar);\n      } else {\n        return eventStore;\n      }\n\n    case 'CHANGE_TIMEZONE':\n      return rezoneDates(eventStore, action.oldDateEnv, calendar.dateEnv);\n\n    case 'MUTATE_EVENTS':\n      return applyMutationToRelated(eventStore, action.instanceId, action.mutation, action.fromApi, calendar);\n\n    case 'REMOVE_EVENT_INSTANCES':\n      return excludeInstances(eventStore, action.instances);\n\n    case 'REMOVE_EVENT_DEF':\n      return filterEventStoreDefs(eventStore, function (eventDef) {\n        return eventDef.defId !== action.defId;\n      });\n\n    case 'REMOVE_EVENT_SOURCE':\n      return excludeEventsBySourceId(eventStore, action.sourceId);\n\n    case 'REMOVE_ALL_EVENT_SOURCES':\n      return filterEventStoreDefs(eventStore, function (eventDef) {\n        return !eventDef.sourceId; // only keep events with no source id\n      });\n\n    case 'REMOVE_ALL_EVENTS':\n      return createEmptyEventStore();\n\n    case 'RESET_EVENTS':\n      return {\n        defs: eventStore.defs,\n        instances: eventStore.instances\n      };\n\n    default:\n      return eventStore;\n  }\n}\n\nfunction receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, calendar) {\n  if (eventSource && // not already removed\n  fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources\n  ) {\n      var subset = parseEvents(transformRawEvents(rawEvents, eventSource, calendar), eventSource.sourceId, calendar);\n\n      if (fetchRange) {\n        subset = expandRecurring(subset, fetchRange, calendar);\n      }\n\n      return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);\n    }\n\n  return eventStore;\n}\n\nfunction addEvent(eventStore, subset, expandRange, calendar) {\n  if (expandRange) {\n    subset = expandRecurring(subset, expandRange, calendar);\n  }\n\n  return mergeEventStores(eventStore, subset);\n}\n\nfunction rezoneDates(eventStore, oldDateEnv, newDateEnv) {\n  var defs = eventStore.defs;\n  var instances = mapHash(eventStore.instances, function (instance) {\n    var def = defs[instance.defId];\n\n    if (def.allDay || def.recurringDef) {\n      return instance; // isn't dependent on timezone\n    } else {\n      return _assign({}, instance, {\n        range: {\n          start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),\n          end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))\n        },\n        forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,\n        forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo\n      });\n    }\n  });\n  return {\n    defs: defs,\n    instances: instances\n  };\n}\n\nfunction applyMutationToRelated(eventStore, instanceId, mutation, fromApi, calendar) {\n  var relevant = getRelevantEvents(eventStore, instanceId);\n  var eventConfigBase = fromApi ? {\n    '': {\n      startEditable: true,\n      durationEditable: true,\n      constraints: [],\n      overlap: null,\n      allows: [],\n      backgroundColor: '',\n      borderColor: '',\n      textColor: '',\n      classNames: []\n    }\n  } : calendar.eventUiBases;\n  relevant = applyMutationToEventStore(relevant, eventConfigBase, mutation, calendar);\n  return mergeEventStores(eventStore, relevant);\n}\n\nfunction excludeEventsBySourceId(eventStore, sourceId) {\n  return filterEventStoreDefs(eventStore, function (eventDef) {\n    return eventDef.sourceId !== sourceId;\n  });\n} // QUESTION: why not just return instances? do a general object-property-exclusion util\n\n\nfunction excludeInstances(eventStore, removals) {\n  return {\n    defs: eventStore.defs,\n    instances: filterHash(eventStore.instances, function (instance) {\n      return !removals[instance.instanceId];\n    })\n  };\n} // high-level segmenting-aware tester functions\n// ------------------------------------------------------------------------------------------------------------------------\n\n\nfunction isInteractionValid(interaction, calendar) {\n  return isNewPropsValid({\n    eventDrag: interaction\n  }, calendar); // HACK: the eventDrag props is used for ALL interactions\n}\n\nfunction isDateSelectionValid(dateSelection, calendar) {\n  return isNewPropsValid({\n    dateSelection: dateSelection\n  }, calendar);\n}\n\nfunction isNewPropsValid(newProps, calendar) {\n  var view = calendar.view;\n\n  var props = _assign({\n    businessHours: view ? view.props.businessHours : createEmptyEventStore(),\n    dateSelection: '',\n    eventStore: calendar.state.eventStore,\n    eventUiBases: calendar.eventUiBases,\n    eventSelection: '',\n    eventDrag: null,\n    eventResize: null\n  }, newProps);\n\n  return (calendar.pluginSystem.hooks.isPropsValid || isPropsValid)(props, calendar);\n}\n\nfunction isPropsValid(state, calendar, dateSpanMeta, filterConfig) {\n  if (dateSpanMeta === void 0) {\n    dateSpanMeta = {};\n  }\n\n  if (state.eventDrag && !isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {\n    return false;\n  }\n\n  if (state.dateSelection && !isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {\n    return false;\n  }\n\n  return true;\n} // Moving Event Validation\n// ------------------------------------------------------------------------------------------------------------------------\n\n\nfunction isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig) {\n  var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions\n\n  var subjectEventStore = interaction.mutatedEvents;\n  var subjectDefs = subjectEventStore.defs;\n  var subjectInstances = subjectEventStore.instances;\n  var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {\n    '': calendar.selectionConfig\n  } // if not a real event, validate as a selection\n  );\n\n  if (filterConfig) {\n    subjectConfigs = mapHash(subjectConfigs, filterConfig);\n  }\n\n  var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances); // exclude the subject events. TODO: exclude defs too?\n\n  var otherDefs = otherEventStore.defs;\n  var otherInstances = otherEventStore.instances;\n  var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);\n\n  for (var subjectInstanceId in subjectInstances) {\n    var subjectInstance = subjectInstances[subjectInstanceId];\n    var subjectRange = subjectInstance.range;\n    var subjectConfig = subjectConfigs[subjectInstance.defId];\n    var subjectDef = subjectDefs[subjectInstance.defId]; // constraint\n\n    if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, calendar)) {\n      return false;\n    } // overlap\n\n\n    var overlapFunc = calendar.opt('eventOverlap');\n\n    if (typeof overlapFunc !== 'function') {\n      overlapFunc = null;\n    }\n\n    for (var otherInstanceId in otherInstances) {\n      var otherInstance = otherInstances[otherInstanceId]; // intersect! evaluate\n\n      if (rangesIntersect(subjectRange, otherInstance.range)) {\n        var otherOverlap = otherConfigs[otherInstance.defId].overlap; // consider the other event's overlap. only do this if the subject event is a \"real\" event\n\n        if (otherOverlap === false && interaction.isEvent) {\n          return false;\n        }\n\n        if (subjectConfig.overlap === false) {\n          return false;\n        }\n\n        if (overlapFunc && !overlapFunc(new EventApi(calendar, otherDefs[otherInstance.defId], otherInstance), // still event\n        new EventApi(calendar, subjectDef, subjectInstance) // moving event\n        )) {\n          return false;\n        }\n      }\n    } // allow (a function)\n\n\n    var calendarEventStore = calendar.state.eventStore; // need global-to-calendar, not local to component (splittable)state\n\n    for (var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++) {\n      var subjectAllow = _a[_i];\n\n      var subjectDateSpan = _assign({}, dateSpanMeta, {\n        range: subjectInstance.range,\n        allDay: subjectDef.allDay\n      });\n\n      var origDef = calendarEventStore.defs[subjectDef.defId];\n      var origInstance = calendarEventStore.instances[subjectInstanceId];\n      var eventApi = void 0;\n\n      if (origDef) {\n        // was previously in the calendar\n        eventApi = new EventApi(calendar, origDef, origInstance);\n      } else {\n        // was an external event\n        eventApi = new EventApi(calendar, subjectDef); // no instance, because had no dates\n      }\n\n      if (!subjectAllow(calendar.buildDateSpanApi(subjectDateSpan), eventApi)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n} // Date Selection Validation\n// ------------------------------------------------------------------------------------------------------------------------\n\n\nfunction isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig) {\n  var relevantEventStore = state.eventStore;\n  var relevantDefs = relevantEventStore.defs;\n  var relevantInstances = relevantEventStore.instances;\n  var selection = state.dateSelection;\n  var selectionRange = selection.range;\n  var selectionConfig = calendar.selectionConfig;\n\n  if (filterConfig) {\n    selectionConfig = filterConfig(selectionConfig);\n  } // constraint\n\n\n  if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, calendar)) {\n    return false;\n  } // overlap\n\n\n  var overlapFunc = calendar.opt('selectOverlap');\n\n  if (typeof overlapFunc !== 'function') {\n    overlapFunc = null;\n  }\n\n  for (var relevantInstanceId in relevantInstances) {\n    var relevantInstance = relevantInstances[relevantInstanceId]; // intersect! evaluate\n\n    if (rangesIntersect(selectionRange, relevantInstance.range)) {\n      if (selectionConfig.overlap === false) {\n        return false;\n      }\n\n      if (overlapFunc && !overlapFunc(new EventApi(calendar, relevantDefs[relevantInstance.defId], relevantInstance))) {\n        return false;\n      }\n    }\n  } // allow (a function)\n\n\n  for (var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++) {\n    var selectionAllow = _a[_i];\n\n    var fullDateSpan = _assign({}, dateSpanMeta, selection);\n\n    if (!selectionAllow(calendar.buildDateSpanApi(fullDateSpan), null)) {\n      return false;\n    }\n  }\n\n  return true;\n} // Constraint Utils\n// ------------------------------------------------------------------------------------------------------------------------\n\n\nfunction allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, calendar) {\n  for (var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++) {\n    var constraint = constraints_1[_i];\n\n    if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, calendar), subjectRange)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constraintToRanges(constraint, subjectRange, // for expanding a recurring constraint, or expanding business hours\notherEventStore, // for if constraint is an even group ID\nbusinessHoursUnexpanded, // for if constraint is 'businessHours'\ncalendar // for expanding businesshours\n) {\n  if (constraint === 'businessHours') {\n    return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, calendar));\n  } else if (typeof constraint === 'string') {\n    // an group ID\n    return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function (eventDef) {\n      return eventDef.groupId === constraint;\n    }));\n  } else if (typeof constraint === 'object' && constraint) {\n    // non-null object\n    return eventStoreToRanges(expandRecurring(constraint, subjectRange, calendar));\n  }\n\n  return []; // if it's false\n} // TODO: move to event-store file?\n\n\nfunction eventStoreToRanges(eventStore) {\n  var instances = eventStore.instances;\n  var ranges = [];\n\n  for (var instanceId in instances) {\n    ranges.push(instances[instanceId].range);\n  }\n\n  return ranges;\n} // TODO: move to geom file?\n\n\nfunction anyRangesContainRange(outerRanges, innerRange) {\n  for (var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++) {\n    var outerRange = outerRanges_1[_i];\n\n    if (rangeContainsRange(outerRange, innerRange)) {\n      return true;\n    }\n  }\n\n  return false;\n} // Parsing\n// ------------------------------------------------------------------------------------------------------------------------\n\n\nfunction normalizeConstraint(input, calendar) {\n  if (Array.isArray(input)) {\n    return parseEvents(input, '', calendar, true); // allowOpenRange=true\n  } else if (typeof input === 'object' && input) {\n    // non-null object\n    return parseEvents([input], '', calendar, true); // allowOpenRange=true\n  } else if (input != null) {\n    return String(input);\n  } else {\n    return null;\n  }\n}\n\nfunction htmlEscape(s) {\n  return (s + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#039;').replace(/\"/g, '&quot;').replace(/\\n/g, '<br />');\n} // Given a hash of CSS properties, returns a string of CSS.\n// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.\n\n\nfunction cssToStr(cssProps) {\n  var statements = [];\n\n  for (var name_1 in cssProps) {\n    var val = cssProps[name_1];\n\n    if (val != null && val !== '') {\n      statements.push(name_1 + ':' + val);\n    }\n  }\n\n  return statements.join(';');\n} // Given an object hash of HTML attribute names to values,\n// generates a string that can be injected between < > in HTML\n\n\nfunction attrsToStr(attrs) {\n  var parts = [];\n\n  for (var name_2 in attrs) {\n    var val = attrs[name_2];\n\n    if (val != null) {\n      parts.push(name_2 + '=\"' + htmlEscape(val) + '\"');\n    }\n  }\n\n  return parts.join(' ');\n}\n\nfunction parseClassName(raw) {\n  if (Array.isArray(raw)) {\n    return raw;\n  } else if (typeof raw === 'string') {\n    return raw.split(/\\s+/);\n  } else {\n    return [];\n  }\n}\n\nvar UNSCOPED_EVENT_UI_PROPS = {\n  editable: Boolean,\n  startEditable: Boolean,\n  durationEditable: Boolean,\n  constraint: null,\n  overlap: null,\n  allow: null,\n  className: parseClassName,\n  classNames: parseClassName,\n  color: String,\n  backgroundColor: String,\n  borderColor: String,\n  textColor: String\n};\n\nfunction processUnscopedUiProps(rawProps, calendar, leftovers) {\n  var props = refineProps(rawProps, UNSCOPED_EVENT_UI_PROPS, {}, leftovers);\n  var constraint = normalizeConstraint(props.constraint, calendar);\n  return {\n    startEditable: props.startEditable != null ? props.startEditable : props.editable,\n    durationEditable: props.durationEditable != null ? props.durationEditable : props.editable,\n    constraints: constraint != null ? [constraint] : [],\n    overlap: props.overlap,\n    allows: props.allow != null ? [props.allow] : [],\n    backgroundColor: props.backgroundColor || props.color,\n    borderColor: props.borderColor || props.color,\n    textColor: props.textColor,\n    classNames: props.classNames.concat(props.className)\n  };\n}\n\nfunction processScopedUiProps(prefix, rawScoped, calendar, leftovers) {\n  var rawUnscoped = {};\n  var wasFound = {};\n\n  for (var key in UNSCOPED_EVENT_UI_PROPS) {\n    var scopedKey = prefix + capitaliseFirstLetter(key);\n    rawUnscoped[key] = rawScoped[scopedKey];\n    wasFound[scopedKey] = true;\n  }\n\n  if (prefix === 'event') {\n    rawUnscoped.editable = rawScoped.editable; // special case. there is no 'eventEditable', just 'editable'\n  }\n\n  if (leftovers) {\n    for (var key in rawScoped) {\n      if (!wasFound[key]) {\n        leftovers[key] = rawScoped[key];\n      }\n    }\n  }\n\n  return processUnscopedUiProps(rawUnscoped, calendar);\n}\n\nvar EMPTY_EVENT_UI = {\n  startEditable: null,\n  durationEditable: null,\n  constraints: [],\n  overlap: null,\n  allows: [],\n  backgroundColor: '',\n  borderColor: '',\n  textColor: '',\n  classNames: []\n}; // prevent against problems with <2 args!\n\nfunction combineEventUis(uis) {\n  return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);\n}\n\nfunction combineTwoEventUis(item0, item1) {\n  return {\n    startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,\n    durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,\n    constraints: item0.constraints.concat(item1.constraints),\n    overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,\n    allows: item0.allows.concat(item1.allows),\n    backgroundColor: item1.backgroundColor || item0.backgroundColor,\n    borderColor: item1.borderColor || item0.borderColor,\n    textColor: item1.textColor || item0.textColor,\n    classNames: item0.classNames.concat(item1.classNames)\n  };\n}\n\nvar NON_DATE_PROPS = {\n  id: String,\n  groupId: String,\n  title: String,\n  url: String,\n  rendering: String,\n  extendedProps: null\n};\nvar DATE_PROPS = {\n  start: null,\n  date: null,\n  end: null,\n  allDay: null\n};\nvar uid = 0;\n\nfunction parseEvent(raw, sourceId, calendar, allowOpenRange) {\n  var allDayDefault = computeIsAllDayDefault(sourceId, calendar);\n  var leftovers0 = {};\n  var recurringRes = parseRecurring(raw, // raw, but with single-event stuff stripped out\n  allDayDefault, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes, leftovers0 // will populate with non-recurring props\n  );\n\n  if (recurringRes) {\n    var def = parseEventDef(leftovers0, sourceId, recurringRes.allDay, Boolean(recurringRes.duration), calendar);\n    def.recurringDef = {\n      typeId: recurringRes.typeId,\n      typeData: recurringRes.typeData,\n      duration: recurringRes.duration\n    };\n    return {\n      def: def,\n      instance: null\n    };\n  } else {\n    var leftovers1 = {};\n    var singleRes = parseSingle(raw, allDayDefault, calendar, leftovers1, allowOpenRange);\n\n    if (singleRes) {\n      var def = parseEventDef(leftovers1, sourceId, singleRes.allDay, singleRes.hasEnd, calendar);\n      var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);\n      return {\n        def: def,\n        instance: instance\n      };\n    }\n  }\n\n  return null;\n}\n/*\nWill NOT populate extendedProps with the leftover properties.\nWill NOT populate date-related props.\nThe EventNonDateInput has been normalized (id => publicId, etc).\n*/\n\n\nfunction parseEventDef(raw, sourceId, allDay, hasEnd, calendar) {\n  var leftovers = {};\n  var def = pluckNonDateProps(raw, calendar, leftovers);\n  def.defId = String(uid++);\n  def.sourceId = sourceId;\n  def.allDay = allDay;\n  def.hasEnd = hasEnd;\n\n  for (var _i = 0, _a = calendar.pluginSystem.hooks.eventDefParsers; _i < _a.length; _i++) {\n    var eventDefParser = _a[_i];\n    var newLeftovers = {};\n    eventDefParser(def, leftovers, newLeftovers);\n    leftovers = newLeftovers;\n  }\n\n  def.extendedProps = _assign(leftovers, def.extendedProps || {}); // help out EventApi from having user modify props\n\n  Object.freeze(def.ui.classNames);\n  Object.freeze(def.extendedProps);\n  return def;\n}\n\nfunction createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {\n  return {\n    instanceId: String(uid++),\n    defId: defId,\n    range: range,\n    forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,\n    forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo\n  };\n}\n\nfunction parseSingle(raw, allDayDefault, calendar, leftovers, allowOpenRange) {\n  var props = pluckDateProps(raw, leftovers);\n  var allDay = props.allDay;\n  var startMeta;\n  var startMarker = null;\n  var hasEnd = false;\n  var endMeta;\n  var endMarker = null;\n  startMeta = calendar.dateEnv.createMarkerMeta(props.start);\n\n  if (startMeta) {\n    startMarker = startMeta.marker;\n  } else if (!allowOpenRange) {\n    return null;\n  }\n\n  if (props.end != null) {\n    endMeta = calendar.dateEnv.createMarkerMeta(props.end);\n  }\n\n  if (allDay == null) {\n    if (allDayDefault != null) {\n      allDay = allDayDefault;\n    } else {\n      // fall back to the date props LAST\n      allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);\n    }\n  }\n\n  if (allDay && startMarker) {\n    startMarker = startOfDay(startMarker);\n  }\n\n  if (endMeta) {\n    endMarker = endMeta.marker;\n\n    if (allDay) {\n      endMarker = startOfDay(endMarker);\n    }\n\n    if (startMarker && endMarker <= startMarker) {\n      endMarker = null;\n    }\n  }\n\n  if (endMarker) {\n    hasEnd = true;\n  } else if (!allowOpenRange) {\n    hasEnd = calendar.opt('forceEventDuration') || false;\n    endMarker = calendar.dateEnv.add(startMarker, allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration);\n  }\n\n  return {\n    allDay: allDay,\n    hasEnd: hasEnd,\n    range: {\n      start: startMarker,\n      end: endMarker\n    },\n    forcedStartTzo: startMeta ? startMeta.forcedTzo : null,\n    forcedEndTzo: endMeta ? endMeta.forcedTzo : null\n  };\n}\n\nfunction pluckDateProps(raw, leftovers) {\n  var props = refineProps(raw, DATE_PROPS, {}, leftovers);\n  props.start = props.start !== null ? props.start : props.date;\n  delete props.date;\n  return props;\n}\n\nfunction pluckNonDateProps(raw, calendar, leftovers) {\n  var preLeftovers = {};\n  var props = refineProps(raw, NON_DATE_PROPS, {}, preLeftovers);\n  var ui = processUnscopedUiProps(preLeftovers, calendar, leftovers);\n  props.publicId = props.id;\n  delete props.id;\n  props.ui = ui;\n  return props;\n}\n\nfunction computeIsAllDayDefault(sourceId, calendar) {\n  var res = null;\n\n  if (sourceId) {\n    var source = calendar.state.eventSources[sourceId];\n    res = source.allDayDefault;\n  }\n\n  if (res == null) {\n    res = calendar.opt('allDayDefault');\n  }\n\n  return res;\n}\n\nvar DEF_DEFAULTS = {\n  startTime: '09:00',\n  endTime: '17:00',\n  daysOfWeek: [1, 2, 3, 4, 5],\n  rendering: 'inverse-background',\n  classNames: 'fc-nonbusiness',\n  groupId: '_businessHours' // so multiple defs get grouped\n\n};\n/*\nTODO: pass around as EventDefHash!!!\n*/\n\nfunction parseBusinessHours(input, calendar) {\n  return parseEvents(refineInputs(input), '', calendar);\n}\n\nfunction refineInputs(input) {\n  var rawDefs;\n\n  if (input === true) {\n    rawDefs = [{}]; // will get DEF_DEFAULTS verbatim\n  } else if (Array.isArray(input)) {\n    // if specifying an array, every sub-definition NEEDS a day-of-week\n    rawDefs = input.filter(function (rawDef) {\n      return rawDef.daysOfWeek;\n    });\n  } else if (typeof input === 'object' && input) {\n    // non-null object\n    rawDefs = [input];\n  } else {\n    // is probably false\n    rawDefs = [];\n  }\n\n  rawDefs = rawDefs.map(function (rawDef) {\n    return _assign({}, DEF_DEFAULTS, rawDef);\n  });\n  return rawDefs;\n}\n\nfunction memoizeRendering(renderFunc, unrenderFunc, dependencies) {\n  if (dependencies === void 0) {\n    dependencies = [];\n  }\n\n  var dependents = [];\n  var thisContext;\n  var prevArgs;\n\n  function unrender() {\n    if (prevArgs) {\n      for (var _i = 0, dependents_1 = dependents; _i < dependents_1.length; _i++) {\n        var dependent = dependents_1[_i];\n        dependent.unrender();\n      }\n\n      if (unrenderFunc) {\n        unrenderFunc.apply(thisContext, prevArgs);\n      }\n\n      prevArgs = null;\n    }\n  }\n\n  function res() {\n    if (!prevArgs || !isArraysEqual(prevArgs, arguments)) {\n      unrender();\n      thisContext = this;\n      prevArgs = arguments;\n      renderFunc.apply(this, arguments);\n    }\n  }\n\n  res.dependents = dependents;\n  res.unrender = unrender;\n\n  for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {\n    var dependency = dependencies_1[_i];\n    dependency.dependents.push(res);\n  }\n\n  return res;\n}\n\nvar EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere\n\nvar Splitter =\n/** @class */\nfunction () {\n  function Splitter() {\n    this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);\n    this.splitDateSelection = memoize(this._splitDateSpan);\n    this.splitEventStore = memoize(this._splitEventStore);\n    this.splitIndividualUi = memoize(this._splitIndividualUi);\n    this.splitEventDrag = memoize(this._splitInteraction);\n    this.splitEventResize = memoize(this._splitInteraction);\n    this.eventUiBuilders = {}; // TODO: typescript protection\n  }\n\n  Splitter.prototype.splitProps = function (props) {\n    var _this = this;\n\n    var keyInfos = this.getKeyInfo(props);\n    var defKeys = this.getKeysForEventDefs(props.eventStore);\n    var dateSelections = this.splitDateSelection(props.dateSelection);\n    var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*\n\n    var eventStores = this.splitEventStore(props.eventStore, defKeys);\n    var eventDrags = this.splitEventDrag(props.eventDrag);\n    var eventResizes = this.splitEventResize(props.eventResize);\n    var splitProps = {};\n    this.eventUiBuilders = mapHash(keyInfos, function (info, key) {\n      return _this.eventUiBuilders[key] || memoize(buildEventUiForKey);\n    });\n\n    for (var key in keyInfos) {\n      var keyInfo = keyInfos[key];\n      var eventStore = eventStores[key] || EMPTY_EVENT_STORE;\n      var buildEventUi = this.eventUiBuilders[key];\n      splitProps[key] = {\n        businessHours: keyInfo.businessHours || props.businessHours,\n        dateSelection: dateSelections[key] || null,\n        eventStore: eventStore,\n        eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),\n        eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',\n        eventDrag: eventDrags[key] || null,\n        eventResize: eventResizes[key] || null\n      };\n    }\n\n    return splitProps;\n  };\n\n  Splitter.prototype._splitDateSpan = function (dateSpan) {\n    var dateSpans = {};\n\n    if (dateSpan) {\n      var keys = this.getKeysForDateSpan(dateSpan);\n\n      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        dateSpans[key] = dateSpan;\n      }\n    }\n\n    return dateSpans;\n  };\n\n  Splitter.prototype._getKeysForEventDefs = function (eventStore) {\n    var _this = this;\n\n    return mapHash(eventStore.defs, function (eventDef) {\n      return _this.getKeysForEventDef(eventDef);\n    });\n  };\n\n  Splitter.prototype._splitEventStore = function (eventStore, defKeys) {\n    var defs = eventStore.defs,\n        instances = eventStore.instances;\n    var splitStores = {};\n\n    for (var defId in defs) {\n      for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        if (!splitStores[key]) {\n          splitStores[key] = createEmptyEventStore();\n        }\n\n        splitStores[key].defs[defId] = defs[defId];\n      }\n    }\n\n    for (var instanceId in instances) {\n      var instance = instances[instanceId];\n\n      for (var _b = 0, _c = defKeys[instance.defId]; _b < _c.length; _b++) {\n        var key = _c[_b];\n\n        if (splitStores[key]) {\n          // must have already been created\n          splitStores[key].instances[instanceId] = instance;\n        }\n      }\n    }\n\n    return splitStores;\n  };\n\n  Splitter.prototype._splitIndividualUi = function (eventUiBases, defKeys) {\n    var splitHashes = {};\n\n    for (var defId in eventUiBases) {\n      if (defId) {\n        // not the '' key\n        for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {\n          var key = _a[_i];\n\n          if (!splitHashes[key]) {\n            splitHashes[key] = {};\n          }\n\n          splitHashes[key][defId] = eventUiBases[defId];\n        }\n      }\n    }\n\n    return splitHashes;\n  };\n\n  Splitter.prototype._splitInteraction = function (interaction) {\n    var splitStates = {};\n\n    if (interaction) {\n      var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents) // can't use cached. might be events from other calendar\n      ); // can't rely on defKeys because event data is mutated\n\n\n      var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);\n\n      var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);\n\n      var populate = function populate(key) {\n        if (!splitStates[key]) {\n          splitStates[key] = {\n            affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,\n            mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,\n            isEvent: interaction.isEvent,\n            origSeg: interaction.origSeg\n          };\n        }\n      };\n\n      for (var key in affectedStores_1) {\n        populate(key);\n      }\n\n      for (var key in mutatedStores_1) {\n        populate(key);\n      }\n    }\n\n    return splitStates;\n  };\n\n  return Splitter;\n}();\n\nfunction buildEventUiForKey(allUi, eventUiForKey, individualUi) {\n  var baseParts = [];\n\n  if (allUi) {\n    baseParts.push(allUi);\n  }\n\n  if (eventUiForKey) {\n    baseParts.push(eventUiForKey);\n  }\n\n  var stuff = {\n    '': combineEventUis(baseParts)\n  };\n\n  if (individualUi) {\n    _assign(stuff, individualUi);\n  }\n\n  return stuff;\n} // Generates HTML for an anchor to another view into the calendar.\n// Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.\n// `gotoOptions` can either be a DateMarker, or an object with the form:\n// { date, type, forceOff }\n// `type` is a view-type like \"day\" or \"week\". default value is \"day\".\n// `attrs` and `innerHtml` are use to generate the rest of the HTML tag.\n\n\nfunction buildGotoAnchorHtml(component, gotoOptions, attrs, innerHtml) {\n  var dateEnv = component.dateEnv;\n  var date;\n  var type;\n  var forceOff;\n  var finalOptions;\n\n  if (gotoOptions instanceof Date) {\n    date = gotoOptions; // a single date-like input\n  } else {\n    date = gotoOptions.date;\n    type = gotoOptions.type;\n    forceOff = gotoOptions.forceOff;\n  }\n\n  finalOptions = {\n    date: dateEnv.formatIso(date, {\n      omitTime: true\n    }),\n    type: type || 'day'\n  };\n\n  if (typeof attrs === 'string') {\n    innerHtml = attrs;\n    attrs = null;\n  }\n\n  attrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space\n\n  innerHtml = innerHtml || '';\n\n  if (!forceOff && component.opt('navLinks')) {\n    return '<a' + attrs + ' data-goto=\"' + htmlEscape(JSON.stringify(finalOptions)) + '\">' + innerHtml + '</a>';\n  } else {\n    return '<span' + attrs + '>' + innerHtml + '</span>';\n  }\n}\n\nfunction getAllDayHtml(component) {\n  return component.opt('allDayHtml') || htmlEscape(component.opt('allDayText'));\n} // Computes HTML classNames for a single-day element\n\n\nfunction getDayClasses(date, dateProfile, context, noThemeHighlight) {\n  var calendar = context.calendar,\n      view = context.view,\n      theme = context.theme,\n      dateEnv = context.dateEnv;\n  var classes = [];\n  var todayStart;\n  var todayEnd;\n\n  if (!rangeContainsMarker(dateProfile.activeRange, date)) {\n    classes.push('fc-disabled-day');\n  } else {\n    classes.push('fc-' + DAY_IDS[date.getUTCDay()]);\n\n    if (view.opt('monthMode') && dateEnv.getMonth(date) !== dateEnv.getMonth(dateProfile.currentRange.start)) {\n      classes.push('fc-other-month');\n    }\n\n    todayStart = startOfDay(calendar.getNow());\n    todayEnd = addDays(todayStart, 1);\n\n    if (date < todayStart) {\n      classes.push('fc-past');\n    } else if (date >= todayEnd) {\n      classes.push('fc-future');\n    } else {\n      classes.push('fc-today');\n\n      if (noThemeHighlight !== true) {\n        classes.push(theme.getClass('today'));\n      }\n    }\n  }\n\n  return classes;\n} // given a function that resolves a result asynchronously.\n// the function can either call passed-in success and failure callbacks,\n// or it can return a promise.\n// if you need to pass additional params to func, bind them first.\n\n\nfunction unpromisify(func, success, failure) {\n  // guard against success/failure callbacks being called more than once\n  // and guard against a promise AND callback being used together.\n  var isResolved = false;\n\n  var wrappedSuccess = function wrappedSuccess() {\n    if (!isResolved) {\n      isResolved = true;\n      success.apply(this, arguments);\n    }\n  };\n\n  var wrappedFailure = function wrappedFailure() {\n    if (!isResolved) {\n      isResolved = true;\n\n      if (failure) {\n        failure.apply(this, arguments);\n      }\n    }\n  };\n\n  var res = func(wrappedSuccess, wrappedFailure);\n\n  if (res && typeof res.then === 'function') {\n    res.then(wrappedSuccess, wrappedFailure);\n  }\n}\n\nvar Mixin =\n/** @class */\nfunction () {\n  function Mixin() {} // mix into a CLASS\n\n\n  Mixin.mixInto = function (destClass) {\n    this.mixIntoObj(destClass.prototype);\n  }; // mix into ANY object\n\n\n  Mixin.mixIntoObj = function (destObj) {\n    var _this = this;\n\n    Object.getOwnPropertyNames(this.prototype).forEach(function (name) {\n      if (!destObj[name]) {\n        // if destination doesn't already define it\n        destObj[name] = _this.prototype[name];\n      }\n    });\n  };\n  /*\n  will override existing methods\n  TODO: remove! not used anymore\n  */\n\n\n  Mixin.mixOver = function (destClass) {\n    var _this = this;\n\n    Object.getOwnPropertyNames(this.prototype).forEach(function (name) {\n      destClass.prototype[name] = _this.prototype[name];\n    });\n  };\n\n  return Mixin;\n}();\n/*\nUSAGE:\n  import { default as EmitterMixin, EmitterInterface } from './EmitterMixin'\nin class:\n  on: EmitterInterface['on']\n  one: EmitterInterface['one']\n  off: EmitterInterface['off']\n  trigger: EmitterInterface['trigger']\n  triggerWith: EmitterInterface['triggerWith']\n  hasHandlers: EmitterInterface['hasHandlers']\nafter class:\n  EmitterMixin.mixInto(TheClass)\n*/\n\n\nvar EmitterMixin =\n/** @class */\nfunction (_super) {\n  __extends(EmitterMixin, _super);\n\n  function EmitterMixin() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  EmitterMixin.prototype.on = function (type, handler) {\n    addToHash(this._handlers || (this._handlers = {}), type, handler);\n    return this; // for chaining\n  }; // todo: add comments\n\n\n  EmitterMixin.prototype.one = function (type, handler) {\n    addToHash(this._oneHandlers || (this._oneHandlers = {}), type, handler);\n    return this; // for chaining\n  };\n\n  EmitterMixin.prototype.off = function (type, handler) {\n    if (this._handlers) {\n      removeFromHash(this._handlers, type, handler);\n    }\n\n    if (this._oneHandlers) {\n      removeFromHash(this._oneHandlers, type, handler);\n    }\n\n    return this; // for chaining\n  };\n\n  EmitterMixin.prototype.trigger = function (type) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    this.triggerWith(type, this, args);\n    return this; // for chaining\n  };\n\n  EmitterMixin.prototype.triggerWith = function (type, context, args) {\n    if (this._handlers) {\n      applyAll(this._handlers[type], context, args);\n    }\n\n    if (this._oneHandlers) {\n      applyAll(this._oneHandlers[type], context, args);\n      delete this._oneHandlers[type]; // will never fire again\n    }\n\n    return this; // for chaining\n  };\n\n  EmitterMixin.prototype.hasHandlers = function (type) {\n    return this._handlers && this._handlers[type] && this._handlers[type].length || this._oneHandlers && this._oneHandlers[type] && this._oneHandlers[type].length;\n  };\n\n  return EmitterMixin;\n}(Mixin);\n\nfunction addToHash(hash, type, handler) {\n  (hash[type] || (hash[type] = [])).push(handler);\n}\n\nfunction removeFromHash(hash, type, handler) {\n  if (handler) {\n    if (hash[type]) {\n      hash[type] = hash[type].filter(function (func) {\n        return func !== handler;\n      });\n    }\n  } else {\n    delete hash[type]; // remove all handler funcs for this type\n  }\n}\n/*\nRecords offset information for a set of elements, relative to an origin element.\nCan record the left/right OR the top/bottom OR both.\nProvides methods for querying the cache by position.\n*/\n\n\nvar PositionCache =\n/** @class */\nfunction () {\n  function PositionCache(originEl, els, isHorizontal, isVertical) {\n    this.originEl = originEl;\n    this.els = els;\n    this.isHorizontal = isHorizontal;\n    this.isVertical = isVertical;\n  } // Queries the els for coordinates and stores them.\n  // Call this method before using and of the get* methods below.\n\n\n  PositionCache.prototype.build = function () {\n    var originEl = this.originEl;\n    var originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left\n\n    if (this.isHorizontal) {\n      this.buildElHorizontals(originClientRect.left);\n    }\n\n    if (this.isVertical) {\n      this.buildElVerticals(originClientRect.top);\n    }\n  }; // Populates the left/right internal coordinate arrays\n\n\n  PositionCache.prototype.buildElHorizontals = function (originClientLeft) {\n    var lefts = [];\n    var rights = [];\n\n    for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\n      var el = _a[_i];\n      var rect = el.getBoundingClientRect();\n      lefts.push(rect.left - originClientLeft);\n      rights.push(rect.right - originClientLeft);\n    }\n\n    this.lefts = lefts;\n    this.rights = rights;\n  }; // Populates the top/bottom internal coordinate arrays\n\n\n  PositionCache.prototype.buildElVerticals = function (originClientTop) {\n    var tops = [];\n    var bottoms = [];\n\n    for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\n      var el = _a[_i];\n      var rect = el.getBoundingClientRect();\n      tops.push(rect.top - originClientTop);\n      bottoms.push(rect.bottom - originClientTop);\n    }\n\n    this.tops = tops;\n    this.bottoms = bottoms;\n  }; // Given a left offset (from document left), returns the index of the el that it horizontally intersects.\n  // If no intersection is made, returns undefined.\n\n\n  PositionCache.prototype.leftToIndex = function (leftPosition) {\n    var lefts = this.lefts;\n    var rights = this.rights;\n    var len = lefts.length;\n    var i;\n\n    for (i = 0; i < len; i++) {\n      if (leftPosition >= lefts[i] && leftPosition < rights[i]) {\n        return i;\n      }\n    }\n  }; // Given a top offset (from document top), returns the index of the el that it vertically intersects.\n  // If no intersection is made, returns undefined.\n\n\n  PositionCache.prototype.topToIndex = function (topPosition) {\n    var tops = this.tops;\n    var bottoms = this.bottoms;\n    var len = tops.length;\n    var i;\n\n    for (i = 0; i < len; i++) {\n      if (topPosition >= tops[i] && topPosition < bottoms[i]) {\n        return i;\n      }\n    }\n  }; // Gets the width of the element at the given index\n\n\n  PositionCache.prototype.getWidth = function (leftIndex) {\n    return this.rights[leftIndex] - this.lefts[leftIndex];\n  }; // Gets the height of the element at the given index\n\n\n  PositionCache.prototype.getHeight = function (topIndex) {\n    return this.bottoms[topIndex] - this.tops[topIndex];\n  };\n\n  return PositionCache;\n}();\n/*\nAn object for getting/setting scroll-related information for an element.\nInternally, this is done very differently for window versus DOM element,\nso this object serves as a common interface.\n*/\n\n\nvar ScrollController =\n/** @class */\nfunction () {\n  function ScrollController() {}\n\n  ScrollController.prototype.getMaxScrollTop = function () {\n    return this.getScrollHeight() - this.getClientHeight();\n  };\n\n  ScrollController.prototype.getMaxScrollLeft = function () {\n    return this.getScrollWidth() - this.getClientWidth();\n  };\n\n  ScrollController.prototype.canScrollVertically = function () {\n    return this.getMaxScrollTop() > 0;\n  };\n\n  ScrollController.prototype.canScrollHorizontally = function () {\n    return this.getMaxScrollLeft() > 0;\n  };\n\n  ScrollController.prototype.canScrollUp = function () {\n    return this.getScrollTop() > 0;\n  };\n\n  ScrollController.prototype.canScrollDown = function () {\n    return this.getScrollTop() < this.getMaxScrollTop();\n  };\n\n  ScrollController.prototype.canScrollLeft = function () {\n    return this.getScrollLeft() > 0;\n  };\n\n  ScrollController.prototype.canScrollRight = function () {\n    return this.getScrollLeft() < this.getMaxScrollLeft();\n  };\n\n  return ScrollController;\n}();\n\nvar ElementScrollController =\n/** @class */\nfunction (_super) {\n  __extends(ElementScrollController, _super);\n\n  function ElementScrollController(el) {\n    var _this = _super.call(this) || this;\n\n    _this.el = el;\n    return _this;\n  }\n\n  ElementScrollController.prototype.getScrollTop = function () {\n    return this.el.scrollTop;\n  };\n\n  ElementScrollController.prototype.getScrollLeft = function () {\n    return this.el.scrollLeft;\n  };\n\n  ElementScrollController.prototype.setScrollTop = function (top) {\n    this.el.scrollTop = top;\n  };\n\n  ElementScrollController.prototype.setScrollLeft = function (left) {\n    this.el.scrollLeft = left;\n  };\n\n  ElementScrollController.prototype.getScrollWidth = function () {\n    return this.el.scrollWidth;\n  };\n\n  ElementScrollController.prototype.getScrollHeight = function () {\n    return this.el.scrollHeight;\n  };\n\n  ElementScrollController.prototype.getClientHeight = function () {\n    return this.el.clientHeight;\n  };\n\n  ElementScrollController.prototype.getClientWidth = function () {\n    return this.el.clientWidth;\n  };\n\n  return ElementScrollController;\n}(ScrollController);\n\nvar WindowScrollController =\n/** @class */\nfunction (_super) {\n  __extends(WindowScrollController, _super);\n\n  function WindowScrollController() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  WindowScrollController.prototype.getScrollTop = function () {\n    return window.pageYOffset;\n  };\n\n  WindowScrollController.prototype.getScrollLeft = function () {\n    return window.pageXOffset;\n  };\n\n  WindowScrollController.prototype.setScrollTop = function (n) {\n    window.scroll(window.pageXOffset, n);\n  };\n\n  WindowScrollController.prototype.setScrollLeft = function (n) {\n    window.scroll(n, window.pageYOffset);\n  };\n\n  WindowScrollController.prototype.getScrollWidth = function () {\n    return document.documentElement.scrollWidth;\n  };\n\n  WindowScrollController.prototype.getScrollHeight = function () {\n    return document.documentElement.scrollHeight;\n  };\n\n  WindowScrollController.prototype.getClientHeight = function () {\n    return document.documentElement.clientHeight;\n  };\n\n  WindowScrollController.prototype.getClientWidth = function () {\n    return document.documentElement.clientWidth;\n  };\n\n  return WindowScrollController;\n}(ScrollController);\n/*\nEmbodies a div that has potential scrollbars\n*/\n\n\nvar ScrollComponent =\n/** @class */\nfunction (_super) {\n  __extends(ScrollComponent, _super);\n\n  function ScrollComponent(overflowX, overflowY) {\n    var _this = _super.call(this, createElement('div', {\n      className: 'fc-scroller'\n    })) || this;\n\n    _this.overflowX = overflowX;\n    _this.overflowY = overflowY;\n\n    _this.applyOverflow();\n\n    return _this;\n  } // sets to natural height, unlocks overflow\n\n\n  ScrollComponent.prototype.clear = function () {\n    this.setHeight('auto');\n    this.applyOverflow();\n  };\n\n  ScrollComponent.prototype.destroy = function () {\n    removeElement(this.el);\n  }; // Overflow\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  ScrollComponent.prototype.applyOverflow = function () {\n    applyStyle(this.el, {\n      overflowX: this.overflowX,\n      overflowY: this.overflowY\n    });\n  }; // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.\n  // Useful for preserving scrollbar widths regardless of future resizes.\n  // Can pass in scrollbarWidths for optimization.\n\n\n  ScrollComponent.prototype.lockOverflow = function (scrollbarWidths) {\n    var overflowX = this.overflowX;\n    var overflowY = this.overflowY;\n    scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();\n\n    if (overflowX === 'auto') {\n      overflowX = scrollbarWidths.bottom || // horizontal scrollbars?\n      this.canScrollHorizontally() // OR scrolling pane with massless scrollbars?\n      ? 'scroll' : 'hidden';\n    }\n\n    if (overflowY === 'auto') {\n      overflowY = scrollbarWidths.left || scrollbarWidths.right || // horizontal scrollbars?\n      this.canScrollVertically() // OR scrolling pane with massless scrollbars?\n      ? 'scroll' : 'hidden';\n    }\n\n    applyStyle(this.el, {\n      overflowX: overflowX,\n      overflowY: overflowY\n    });\n  };\n\n  ScrollComponent.prototype.setHeight = function (height) {\n    applyStyleProp(this.el, 'height', height);\n  };\n\n  ScrollComponent.prototype.getScrollbarWidths = function () {\n    var edges = computeEdges(this.el);\n    return {\n      left: edges.scrollbarLeft,\n      right: edges.scrollbarRight,\n      bottom: edges.scrollbarBottom\n    };\n  };\n\n  return ScrollComponent;\n}(ElementScrollController);\n\nvar Theme =\n/** @class */\nfunction () {\n  function Theme(calendarOptions) {\n    this.calendarOptions = calendarOptions;\n    this.processIconOverride();\n  }\n\n  Theme.prototype.processIconOverride = function () {\n    if (this.iconOverrideOption) {\n      this.setIconOverride(this.calendarOptions[this.iconOverrideOption]);\n    }\n  };\n\n  Theme.prototype.setIconOverride = function (iconOverrideHash) {\n    var iconClassesCopy;\n    var buttonName;\n\n    if (typeof iconOverrideHash === 'object' && iconOverrideHash) {\n      // non-null object\n      iconClassesCopy = _assign({}, this.iconClasses);\n\n      for (buttonName in iconOverrideHash) {\n        iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);\n      }\n\n      this.iconClasses = iconClassesCopy;\n    } else if (iconOverrideHash === false) {\n      this.iconClasses = {};\n    }\n  };\n\n  Theme.prototype.applyIconOverridePrefix = function (className) {\n    var prefix = this.iconOverridePrefix;\n\n    if (prefix && className.indexOf(prefix) !== 0) {\n      // if not already present\n      className = prefix + className;\n    }\n\n    return className;\n  };\n\n  Theme.prototype.getClass = function (key) {\n    return this.classes[key] || '';\n  };\n\n  Theme.prototype.getIconClass = function (buttonName) {\n    var className = this.iconClasses[buttonName];\n\n    if (className) {\n      return this.baseIconClass + ' ' + className;\n    }\n\n    return '';\n  };\n\n  Theme.prototype.getCustomButtonIconClass = function (customButtonProps) {\n    var className;\n\n    if (this.iconOverrideCustomButtonOption) {\n      className = customButtonProps[this.iconOverrideCustomButtonOption];\n\n      if (className) {\n        return this.baseIconClass + ' ' + this.applyIconOverridePrefix(className);\n      }\n    }\n\n    return '';\n  };\n\n  return Theme;\n}();\n\nTheme.prototype.classes = {};\nTheme.prototype.iconClasses = {};\nTheme.prototype.baseIconClass = '';\nTheme.prototype.iconOverridePrefix = '';\nvar guid = 0;\n\nvar Component =\n/** @class */\nfunction () {\n  function Component(context, isView) {\n    // HACK to populate view at top of component instantiation call chain\n    if (isView) {\n      context.view = this;\n    }\n\n    this.uid = String(guid++);\n    this.context = context;\n    this.dateEnv = context.dateEnv;\n    this.theme = context.theme;\n    this.view = context.view;\n    this.calendar = context.calendar;\n    this.isRtl = this.opt('dir') === 'rtl';\n  }\n\n  Component.addEqualityFuncs = function (newFuncs) {\n    this.prototype.equalityFuncs = _assign({}, this.prototype.equalityFuncs, newFuncs);\n  };\n\n  Component.prototype.opt = function (name) {\n    return this.context.options[name];\n  };\n\n  Component.prototype.receiveProps = function (props) {\n    var _a = recycleProps(this.props || {}, props, this.equalityFuncs),\n        anyChanges = _a.anyChanges,\n        comboProps = _a.comboProps;\n\n    this.props = comboProps;\n\n    if (anyChanges) {\n      this.render(comboProps);\n    }\n  };\n\n  Component.prototype.render = function (props) {}; // after destroy is called, this component won't ever be used again\n\n\n  Component.prototype.destroy = function () {};\n\n  return Component;\n}();\n\nComponent.prototype.equalityFuncs = {};\n/*\nReuses old values when equal. If anything is unequal, returns newProps as-is.\nGreat for PureComponent, but won't be feasible with React, so just eliminate and use React's DOM diffing.\n*/\n\nfunction recycleProps(oldProps, newProps, equalityFuncs) {\n  var comboProps = {}; // some old, some new\n\n  var anyChanges = false;\n\n  for (var key in newProps) {\n    if (key in oldProps && (oldProps[key] === newProps[key] || equalityFuncs[key] && equalityFuncs[key](oldProps[key], newProps[key]))) {\n      // equal to old? use old prop\n      comboProps[key] = oldProps[key];\n    } else {\n      comboProps[key] = newProps[key];\n      anyChanges = true;\n    }\n  }\n\n  for (var key in oldProps) {\n    if (!(key in newProps)) {\n      anyChanges = true;\n      break;\n    }\n  }\n\n  return {\n    anyChanges: anyChanges,\n    comboProps: comboProps\n  };\n}\n/*\nPURPOSES:\n- hook up to fg, fill, and mirror renderers\n- interface for dragging and hits\n*/\n\n\nvar DateComponent =\n/** @class */\nfunction (_super) {\n  __extends(DateComponent, _super);\n\n  function DateComponent(context, el, isView) {\n    var _this = _super.call(this, context, isView) || this;\n\n    _this.el = el;\n    return _this;\n  }\n\n  DateComponent.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    removeElement(this.el);\n  }; // TODO: WHAT ABOUT (sourceSeg && sourceSeg.component.doesDragMirror)\n  //\n  // Event Drag-n-Drop Rendering (for both events and external elements)\n  // ---------------------------------------------------------------------------------------------------------------\n\n  /*\n  renderEventDragSegs(state: EventSegUiInteractionState) {\n    if (state) {\n      let { isEvent, segs, sourceSeg } = state\n         if (this.eventRenderer) {\n        this.eventRenderer.hideByHash(state.affectedInstances)\n      }\n         // if the user is dragging something that is considered an event with real event data,\n      // and this component likes to do drag mirrors OR the component where the seg came from\n      // likes to do drag mirrors, then render a drag mirror.\n      if (isEvent && (this.doesDragMirror || sourceSeg && sourceSeg.component.doesDragMirror)) {\n        if (this.mirrorRenderer) {\n          this.mirrorRenderer.renderSegs(segs, { isDragging: true, sourceSeg })\n        }\n      }\n         // if it would be impossible to render a drag mirror OR this component likes to render\n      // highlights, then render a highlight.\n      if (!isEvent || this.doesDragHighlight) {\n        if (this.fillRenderer) {\n          this.fillRenderer.renderSegs('highlight', segs)\n        }\n      }\n    }\n  }\n  */\n  // Hit System\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  DateComponent.prototype.buildPositionCaches = function () {};\n\n  DateComponent.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {\n    return null; // this should be abstract\n  }; // Validation\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  DateComponent.prototype.isInteractionValid = function (interaction) {\n    var calendar = this.calendar;\n    var dateProfile = this.props.dateProfile; // HACK\n\n    var instances = interaction.mutatedEvents.instances;\n\n    if (dateProfile) {\n      // HACK for DayTile\n      for (var instanceId in instances) {\n        if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {\n          return false;\n        }\n      }\n    }\n\n    return isInteractionValid(interaction, calendar);\n  };\n\n  DateComponent.prototype.isDateSelectionValid = function (selection) {\n    var dateProfile = this.props.dateProfile; // HACK\n\n    if (dateProfile && // HACK for DayTile\n    !rangeContainsRange(dateProfile.validRange, selection.range)) {\n      return false;\n    }\n\n    return isDateSelectionValid(selection, this.calendar);\n  }; // Triggering\n  // -----------------------------------------------------------------------------------------------------------------\n  // TODO: move to Calendar\n\n\n  DateComponent.prototype.publiclyTrigger = function (name, args) {\n    var calendar = this.calendar;\n    return calendar.publiclyTrigger(name, args);\n  };\n\n  DateComponent.prototype.publiclyTriggerAfterSizing = function (name, args) {\n    var calendar = this.calendar;\n    return calendar.publiclyTriggerAfterSizing(name, args);\n  };\n\n  DateComponent.prototype.hasPublicHandlers = function (name) {\n    var calendar = this.calendar;\n    return calendar.hasPublicHandlers(name);\n  };\n\n  DateComponent.prototype.triggerRenderedSegs = function (segs, isMirrors) {\n    var calendar = this.calendar;\n\n    if (this.hasPublicHandlers('eventPositioned')) {\n      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n        var seg = segs_1[_i];\n        this.publiclyTriggerAfterSizing('eventPositioned', [{\n          event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n          isMirror: isMirrors,\n          isStart: seg.isStart,\n          isEnd: seg.isEnd,\n          el: seg.el,\n          view: this // safe to cast because this method is only called on context.view\n\n        }]);\n      }\n    }\n\n    if (!calendar.state.loadingLevel) {\n      // avoid initial empty state while pending\n      calendar.afterSizingTriggers._eventsPositioned = [null]; // fire once\n    }\n  };\n\n  DateComponent.prototype.triggerWillRemoveSegs = function (segs, isMirrors) {\n    var calendar = this.calendar;\n\n    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n      var seg = segs_2[_i];\n      calendar.trigger('eventElRemove', seg.el);\n    }\n\n    if (this.hasPublicHandlers('eventDestroy')) {\n      for (var _a = 0, segs_3 = segs; _a < segs_3.length; _a++) {\n        var seg = segs_3[_a];\n        this.publiclyTrigger('eventDestroy', [{\n          event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n          isMirror: isMirrors,\n          el: seg.el,\n          view: this // safe to cast because this method is only called on context.view\n\n        }]);\n      }\n    }\n  }; // Pointer Interaction Utils\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  DateComponent.prototype.isValidSegDownEl = function (el) {\n    return !this.props.eventDrag && // HACK\n    !this.props.eventResize && // HACK\n    !elementClosest(el, '.fc-mirror') && (this.isPopover() || !this.isInPopover(el)); // ^above line ensures we don't detect a seg interaction within a nested component.\n    // it's a HACK because it only supports a popover as the nested component.\n  };\n\n  DateComponent.prototype.isValidDateDownEl = function (el) {\n    var segEl = elementClosest(el, this.fgSegSelector);\n    return (!segEl || segEl.classList.contains('fc-mirror')) && !elementClosest(el, '.fc-more') && // a \"more..\" link\n    !elementClosest(el, 'a[data-goto]') && // a clickable nav link\n    !this.isInPopover(el);\n  };\n\n  DateComponent.prototype.isPopover = function () {\n    return this.el.classList.contains('fc-popover');\n  };\n\n  DateComponent.prototype.isInPopover = function (el) {\n    return Boolean(elementClosest(el, '.fc-popover'));\n  };\n\n  return DateComponent;\n}(Component);\n\nDateComponent.prototype.fgSegSelector = '.fc-event-container > *';\nDateComponent.prototype.bgSegSelector = '.fc-bgevent:not(.fc-nonbusiness)';\nvar uid$1 = 0;\n\nfunction createPlugin(input) {\n  return {\n    id: String(uid$1++),\n    deps: input.deps || [],\n    reducers: input.reducers || [],\n    eventDefParsers: input.eventDefParsers || [],\n    isDraggableTransformers: input.isDraggableTransformers || [],\n    eventDragMutationMassagers: input.eventDragMutationMassagers || [],\n    eventDefMutationAppliers: input.eventDefMutationAppliers || [],\n    dateSelectionTransformers: input.dateSelectionTransformers || [],\n    datePointTransforms: input.datePointTransforms || [],\n    dateSpanTransforms: input.dateSpanTransforms || [],\n    views: input.views || {},\n    viewPropsTransformers: input.viewPropsTransformers || [],\n    isPropsValid: input.isPropsValid || null,\n    externalDefTransforms: input.externalDefTransforms || [],\n    eventResizeJoinTransforms: input.eventResizeJoinTransforms || [],\n    viewContainerModifiers: input.viewContainerModifiers || [],\n    eventDropTransformers: input.eventDropTransformers || [],\n    componentInteractions: input.componentInteractions || [],\n    calendarInteractions: input.calendarInteractions || [],\n    themeClasses: input.themeClasses || {},\n    eventSourceDefs: input.eventSourceDefs || [],\n    cmdFormatter: input.cmdFormatter,\n    recurringTypes: input.recurringTypes || [],\n    namedTimeZonedImpl: input.namedTimeZonedImpl,\n    defaultView: input.defaultView || '',\n    elementDraggingImpl: input.elementDraggingImpl,\n    optionChangeHandlers: input.optionChangeHandlers || {}\n  };\n}\n\nvar PluginSystem =\n/** @class */\nfunction () {\n  function PluginSystem() {\n    this.hooks = {\n      reducers: [],\n      eventDefParsers: [],\n      isDraggableTransformers: [],\n      eventDragMutationMassagers: [],\n      eventDefMutationAppliers: [],\n      dateSelectionTransformers: [],\n      datePointTransforms: [],\n      dateSpanTransforms: [],\n      views: {},\n      viewPropsTransformers: [],\n      isPropsValid: null,\n      externalDefTransforms: [],\n      eventResizeJoinTransforms: [],\n      viewContainerModifiers: [],\n      eventDropTransformers: [],\n      componentInteractions: [],\n      calendarInteractions: [],\n      themeClasses: {},\n      eventSourceDefs: [],\n      cmdFormatter: null,\n      recurringTypes: [],\n      namedTimeZonedImpl: null,\n      defaultView: '',\n      elementDraggingImpl: null,\n      optionChangeHandlers: {}\n    };\n    this.addedHash = {};\n  }\n\n  PluginSystem.prototype.add = function (plugin) {\n    if (!this.addedHash[plugin.id]) {\n      this.addedHash[plugin.id] = true;\n\n      for (var _i = 0, _a = plugin.deps; _i < _a.length; _i++) {\n        var dep = _a[_i];\n        this.add(dep);\n      }\n\n      this.hooks = combineHooks(this.hooks, plugin);\n    }\n  };\n\n  return PluginSystem;\n}();\n\nfunction combineHooks(hooks0, hooks1) {\n  return {\n    reducers: hooks0.reducers.concat(hooks1.reducers),\n    eventDefParsers: hooks0.eventDefParsers.concat(hooks1.eventDefParsers),\n    isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),\n    eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),\n    eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),\n    dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),\n    datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),\n    dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),\n    views: _assign({}, hooks0.views, hooks1.views),\n    viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),\n    isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,\n    externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),\n    eventResizeJoinTransforms: hooks0.eventResizeJoinTransforms.concat(hooks1.eventResizeJoinTransforms),\n    viewContainerModifiers: hooks0.viewContainerModifiers.concat(hooks1.viewContainerModifiers),\n    eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),\n    calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),\n    componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),\n    themeClasses: _assign({}, hooks0.themeClasses, hooks1.themeClasses),\n    eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),\n    cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,\n    recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),\n    namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,\n    defaultView: hooks0.defaultView || hooks1.defaultView,\n    elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,\n    optionChangeHandlers: _assign({}, hooks0.optionChangeHandlers, hooks1.optionChangeHandlers)\n  };\n}\n\nvar eventSourceDef = {\n  ignoreRange: true,\n  parseMeta: function parseMeta(raw) {\n    if (Array.isArray(raw)) {\n      // short form\n      return raw;\n    } else if (Array.isArray(raw.events)) {\n      return raw.events;\n    }\n\n    return null;\n  },\n  fetch: function fetch(arg, success) {\n    success({\n      rawEvents: arg.eventSource.meta\n    });\n  }\n};\nvar ArrayEventSourcePlugin = createPlugin({\n  eventSourceDefs: [eventSourceDef]\n});\nvar eventSourceDef$1 = {\n  parseMeta: function parseMeta(raw) {\n    if (typeof raw === 'function') {\n      // short form\n      return raw;\n    } else if (typeof raw.events === 'function') {\n      return raw.events;\n    }\n\n    return null;\n  },\n  fetch: function fetch(arg, success, failure) {\n    var dateEnv = arg.calendar.dateEnv;\n    var func = arg.eventSource.meta;\n    unpromisify(func.bind(null, {\n      start: dateEnv.toDate(arg.range.start),\n      end: dateEnv.toDate(arg.range.end),\n      startStr: dateEnv.formatIso(arg.range.start),\n      endStr: dateEnv.formatIso(arg.range.end),\n      timeZone: dateEnv.timeZone\n    }), function (rawEvents) {\n      success({\n        rawEvents: rawEvents\n      }); // needs an object response\n    }, failure // send errorObj directly to failure callback\n    );\n  }\n};\nvar FuncEventSourcePlugin = createPlugin({\n  eventSourceDefs: [eventSourceDef$1]\n});\n\nfunction requestJson(method, url, params, successCallback, failureCallback) {\n  method = method.toUpperCase();\n  var body = null;\n\n  if (method === 'GET') {\n    url = injectQueryStringParams(url, params);\n  } else {\n    body = encodeParams(params);\n  }\n\n  var xhr = new XMLHttpRequest();\n  xhr.open(method, url, true);\n\n  if (method !== 'GET') {\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  }\n\n  xhr.onload = function () {\n    if (xhr.status >= 200 && xhr.status < 400) {\n      try {\n        var res = JSON.parse(xhr.responseText);\n        successCallback(res, xhr);\n      } catch (err) {\n        failureCallback('Failure parsing JSON', xhr);\n      }\n    } else {\n      failureCallback('Request failed', xhr);\n    }\n  };\n\n  xhr.onerror = function () {\n    failureCallback('Request failed', xhr);\n  };\n\n  xhr.send(body);\n}\n\nfunction injectQueryStringParams(url, params) {\n  return url + (url.indexOf('?') === -1 ? '?' : '&') + encodeParams(params);\n}\n\nfunction encodeParams(params) {\n  var parts = [];\n\n  for (var key in params) {\n    parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));\n  }\n\n  return parts.join('&');\n}\n\nvar eventSourceDef$2 = {\n  parseMeta: function parseMeta(raw) {\n    if (typeof raw === 'string') {\n      // short form\n      raw = {\n        url: raw\n      };\n    } else if (!raw || typeof raw !== 'object' || !raw.url) {\n      return null;\n    }\n\n    return {\n      url: raw.url,\n      method: (raw.method || 'GET').toUpperCase(),\n      extraParams: raw.extraParams,\n      startParam: raw.startParam,\n      endParam: raw.endParam,\n      timeZoneParam: raw.timeZoneParam\n    };\n  },\n  fetch: function fetch(arg, success, failure) {\n    var meta = arg.eventSource.meta;\n    var requestParams = buildRequestParams(meta, arg.range, arg.calendar);\n    requestJson(meta.method, meta.url, requestParams, function (rawEvents, xhr) {\n      success({\n        rawEvents: rawEvents,\n        xhr: xhr\n      });\n    }, function (errorMessage, xhr) {\n      failure({\n        message: errorMessage,\n        xhr: xhr\n      });\n    });\n  }\n};\nvar JsonFeedEventSourcePlugin = createPlugin({\n  eventSourceDefs: [eventSourceDef$2]\n});\n\nfunction buildRequestParams(meta, range, calendar) {\n  var dateEnv = calendar.dateEnv;\n  var startParam;\n  var endParam;\n  var timeZoneParam;\n  var customRequestParams;\n  var params = {};\n  startParam = meta.startParam;\n\n  if (startParam == null) {\n    startParam = calendar.opt('startParam');\n  }\n\n  endParam = meta.endParam;\n\n  if (endParam == null) {\n    endParam = calendar.opt('endParam');\n  }\n\n  timeZoneParam = meta.timeZoneParam;\n\n  if (timeZoneParam == null) {\n    timeZoneParam = calendar.opt('timeZoneParam');\n  } // retrieve any outbound GET/POST data from the options\n\n\n  if (typeof meta.extraParams === 'function') {\n    // supplied as a function that returns a key/value object\n    customRequestParams = meta.extraParams();\n  } else {\n    // probably supplied as a straight key/value object\n    customRequestParams = meta.extraParams || {};\n  }\n\n  _assign(params, customRequestParams);\n\n  params[startParam] = dateEnv.formatIso(range.start);\n  params[endParam] = dateEnv.formatIso(range.end);\n\n  if (dateEnv.timeZone !== 'local') {\n    params[timeZoneParam] = dateEnv.timeZone;\n  }\n\n  return params;\n}\n\nvar recurring = {\n  parse: function parse(rawEvent, leftoverProps, dateEnv) {\n    var createMarker = dateEnv.createMarker.bind(dateEnv);\n    var processors = {\n      daysOfWeek: null,\n      startTime: createDuration,\n      endTime: createDuration,\n      startRecur: createMarker,\n      endRecur: createMarker\n    };\n    var props = refineProps(rawEvent, processors, {}, leftoverProps);\n    var anyValid = false;\n\n    for (var propName in props) {\n      if (props[propName] != null) {\n        anyValid = true;\n        break;\n      }\n    }\n\n    if (anyValid) {\n      var duration = null;\n\n      if ('duration' in leftoverProps) {\n        duration = createDuration(leftoverProps.duration);\n        delete leftoverProps.duration;\n      }\n\n      if (!duration && props.startTime && props.endTime) {\n        duration = subtractDurations(props.endTime, props.startTime);\n      }\n\n      return {\n        allDayGuess: Boolean(!props.startTime && !props.endTime),\n        duration: duration,\n        typeData: props // doesn't need endTime anymore but oh well\n\n      };\n    }\n\n    return null;\n  },\n  expand: function expand(typeData, framingRange, dateEnv) {\n    var clippedFramingRange = intersectRanges(framingRange, {\n      start: typeData.startRecur,\n      end: typeData.endRecur\n    });\n\n    if (clippedFramingRange) {\n      return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);\n    } else {\n      return [];\n    }\n  }\n};\nvar SimpleRecurrencePlugin = createPlugin({\n  recurringTypes: [recurring]\n});\n\nfunction expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {\n  var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;\n  var dayMarker = startOfDay(framingRange.start);\n  var endMarker = framingRange.end;\n  var instanceStarts = [];\n\n  while (dayMarker < endMarker) {\n    var instanceStart // if everyday, or this particular day-of-week\n    = void 0; // if everyday, or this particular day-of-week\n\n    if (!dowHash || dowHash[dayMarker.getUTCDay()]) {\n      if (startTime) {\n        instanceStart = dateEnv.add(dayMarker, startTime);\n      } else {\n        instanceStart = dayMarker;\n      }\n\n      instanceStarts.push(instanceStart);\n    }\n\n    dayMarker = addDays(dayMarker, 1);\n  }\n\n  return instanceStarts;\n}\n\nvar DefaultOptionChangeHandlers = createPlugin({\n  optionChangeHandlers: {\n    events: function events(_events, calendar, deepEqual) {\n      handleEventSources([_events], calendar, deepEqual);\n    },\n    eventSources: handleEventSources,\n    plugins: handlePlugins\n  }\n});\n\nfunction handleEventSources(inputs, calendar, deepEqual) {\n  var unfoundSources = hashValuesToArray(calendar.state.eventSources);\n  var newInputs = [];\n\n  for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n    var input = inputs_1[_i];\n    var inputFound = false;\n\n    for (var i = 0; i < unfoundSources.length; i++) {\n      if (deepEqual(unfoundSources[i]._raw, input)) {\n        unfoundSources.splice(i, 1); // delete\n\n        inputFound = true;\n        break;\n      }\n    }\n\n    if (!inputFound) {\n      newInputs.push(input);\n    }\n  }\n\n  for (var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++) {\n    var unfoundSource = unfoundSources_1[_a];\n    calendar.dispatch({\n      type: 'REMOVE_EVENT_SOURCE',\n      sourceId: unfoundSource.sourceId\n    });\n  }\n\n  for (var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++) {\n    var newInput = newInputs_1[_b];\n    calendar.addEventSource(newInput);\n  }\n} // shortcoming: won't remove plugins\n\n\nfunction handlePlugins(inputs, calendar) {\n  calendar.addPluginInputs(inputs); // will gracefully handle duplicates\n}\n\nvar config = {}; // TODO: make these options\n\nvar globalDefaults = {\n  defaultRangeSeparator: ' - ',\n  titleRangeSeparator: \" \\u2013 \",\n  defaultTimedEventDuration: '01:00:00',\n  defaultAllDayEventDuration: {\n    day: 1\n  },\n  forceEventDuration: false,\n  nextDayThreshold: '00:00:00',\n  // display\n  columnHeader: true,\n  defaultView: '',\n  aspectRatio: 1.35,\n  header: {\n    left: 'title',\n    center: '',\n    right: 'today prev,next'\n  },\n  weekends: true,\n  weekNumbers: false,\n  weekNumberCalculation: 'local',\n  editable: false,\n  // nowIndicator: false,\n  scrollTime: '06:00:00',\n  minTime: '00:00:00',\n  maxTime: '24:00:00',\n  showNonCurrentDates: true,\n  // event ajax\n  lazyFetching: true,\n  startParam: 'start',\n  endParam: 'end',\n  timeZoneParam: 'timeZone',\n  timeZone: 'local',\n  // allDayDefault: undefined,\n  // locale\n  locales: [],\n  locale: '',\n  // dir: will get this from the default locale\n  // buttonIcons: null,\n  // allows setting a min-height to the event segment to prevent short events overlapping each other\n  timeGridEventMinHeight: 0,\n  themeSystem: 'standard',\n  // eventResizableFromStart: false,\n  dragRevertDuration: 500,\n  dragScroll: true,\n  allDayMaintainDuration: false,\n  // selectable: false,\n  unselectAuto: true,\n  // selectMinDistance: 0,\n  dropAccept: '*',\n  eventOrder: 'start,-duration,allDay,title',\n  // ^ if start tie, longer events go before shorter. final tie-breaker is title text\n  // rerenderDelay: null,\n  eventLimit: false,\n  eventLimitClick: 'popover',\n  dayPopoverFormat: {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  },\n  handleWindowResize: true,\n  windowResizeDelay: 100,\n  longPressDelay: 1000,\n  eventDragMinDistance: 5 // only applies to mouse\n\n};\nvar rtlDefaults = {\n  header: {\n    left: 'next,prev today',\n    center: '',\n    right: 'title'\n  },\n  buttonIcons: {\n    // TODO: make RTL support the responibility of the theme\n    prev: 'fc-icon-chevron-right',\n    next: 'fc-icon-chevron-left',\n    prevYear: 'fc-icon-chevrons-right',\n    nextYear: 'fc-icon-chevrons-left'\n  }\n};\nvar complexOptions = ['header', 'footer', 'buttonText', 'buttonIcons']; // Merges an array of option objects into a single object\n\nfunction mergeOptions(optionObjs) {\n  return mergeProps(optionObjs, complexOptions);\n} // TODO: move this stuff to a \"plugin\"-related file...\n\n\nvar INTERNAL_PLUGINS = [ArrayEventSourcePlugin, FuncEventSourcePlugin, JsonFeedEventSourcePlugin, SimpleRecurrencePlugin, DefaultOptionChangeHandlers];\n\nfunction refinePluginDefs(pluginInputs) {\n  var plugins = [];\n\n  for (var _i = 0, pluginInputs_1 = pluginInputs; _i < pluginInputs_1.length; _i++) {\n    var pluginInput = pluginInputs_1[_i];\n\n    if (typeof pluginInput === 'string') {\n      var globalName = 'FullCalendar' + capitaliseFirstLetter(pluginInput);\n\n      if (!window[globalName]) {\n        console.warn('Plugin file not loaded for ' + pluginInput);\n      } else {\n        plugins.push(window[globalName].default); // is an ES6 module\n      }\n    } else {\n      plugins.push(pluginInput);\n    }\n  }\n\n  return INTERNAL_PLUGINS.concat(plugins);\n}\n\nvar RAW_EN_LOCALE = {\n  code: 'en',\n  week: {\n    dow: 0,\n    doy: 4 // 4 days need to be within the year to be considered the first week\n\n  },\n  dir: 'ltr',\n  buttonText: {\n    prev: 'prev',\n    next: 'next',\n    prevYear: 'prev year',\n    nextYear: 'next year',\n    year: 'year',\n    today: 'today',\n    month: 'month',\n    week: 'week',\n    day: 'day',\n    list: 'list'\n  },\n  weekLabel: 'W',\n  allDayText: 'all-day',\n  eventLimitText: 'more',\n  noEventsMessage: 'No events to display'\n};\n\nfunction parseRawLocales(explicitRawLocales) {\n  var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';\n  var globalArray = window['FullCalendarLocalesAll'] || []; // from locales-all.js\n\n  var globalObject = window['FullCalendarLocales'] || {}; // from locales/*.js. keys are meaningless\n\n  var allRawLocales = globalArray.concat( // globalArray is low prio\n  hashValuesToArray(globalObject), // medium prio\n  explicitRawLocales // highest prio\n  );\n  var rawLocaleMap = {\n    en: RAW_EN_LOCALE // necessary?\n\n  };\n\n  for (var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++) {\n    var rawLocale = allRawLocales_1[_i];\n    rawLocaleMap[rawLocale.code] = rawLocale;\n  }\n\n  return {\n    map: rawLocaleMap,\n    defaultCode: defaultCode\n  };\n}\n\nfunction buildLocale(inputSingular, available) {\n  if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) {\n    return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);\n  } else {\n    return queryLocale(inputSingular, available);\n  }\n}\n\nfunction queryLocale(codeArg, available) {\n  var codes = [].concat(codeArg || []); // will convert to array\n\n  var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;\n  return parseLocale(codeArg, codes, raw);\n}\n\nfunction queryRawLocale(codes, available) {\n  for (var i = 0; i < codes.length; i++) {\n    var parts = codes[i].toLocaleLowerCase().split('-');\n\n    for (var j = parts.length; j > 0; j--) {\n      var simpleId = parts.slice(0, j).join('-');\n\n      if (available[simpleId]) {\n        return available[simpleId];\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction parseLocale(codeArg, codes, raw) {\n  var merged = mergeProps([RAW_EN_LOCALE, raw], ['buttonText']);\n  delete merged.code; // don't want this part of the options\n\n  var week = merged.week;\n  delete merged.week;\n  return {\n    codeArg: codeArg,\n    codes: codes,\n    week: week,\n    simpleNumberFormat: new Intl.NumberFormat(codeArg),\n    options: merged\n  };\n}\n\nvar OptionsManager =\n/** @class */\nfunction () {\n  function OptionsManager(overrides) {\n    this.overrides = _assign({}, overrides); // make a copy\n\n    this.dynamicOverrides = {};\n    this.compute();\n  }\n\n  OptionsManager.prototype.mutate = function (updates, removals, isDynamic) {\n    var overrideHash = isDynamic ? this.dynamicOverrides : this.overrides;\n\n    _assign(overrideHash, updates);\n\n    for (var _i = 0, removals_1 = removals; _i < removals_1.length; _i++) {\n      var propName = removals_1[_i];\n      delete overrideHash[propName];\n    }\n\n    this.compute();\n  }; // Computes the flattened options hash for the calendar and assigns to `this.options`.\n  // Assumes this.overrides and this.dynamicOverrides have already been initialized.\n\n\n  OptionsManager.prototype.compute = function () {\n    // TODO: not a very efficient system\n    var locales = firstDefined( // explicit locale option given?\n    this.dynamicOverrides.locales, this.overrides.locales, globalDefaults.locales);\n    var locale = firstDefined( // explicit locales option given?\n    this.dynamicOverrides.locale, this.overrides.locale, globalDefaults.locale);\n    var available = parseRawLocales(locales);\n    var localeDefaults = buildLocale(locale || available.defaultCode, available.map).options;\n    var dir = firstDefined( // based on options computed so far, is direction RTL?\n    this.dynamicOverrides.dir, this.overrides.dir, localeDefaults.dir);\n    var dirDefaults = dir === 'rtl' ? rtlDefaults : {};\n    this.dirDefaults = dirDefaults;\n    this.localeDefaults = localeDefaults;\n    this.computed = mergeOptions([globalDefaults, dirDefaults, localeDefaults, this.overrides, this.dynamicOverrides]);\n  };\n\n  return OptionsManager;\n}();\n\nvar calendarSystemClassMap = {};\n\nfunction registerCalendarSystem(name, theClass) {\n  calendarSystemClassMap[name] = theClass;\n}\n\nfunction createCalendarSystem(name) {\n  return new calendarSystemClassMap[name]();\n}\n\nvar GregorianCalendarSystem =\n/** @class */\nfunction () {\n  function GregorianCalendarSystem() {}\n\n  GregorianCalendarSystem.prototype.getMarkerYear = function (d) {\n    return d.getUTCFullYear();\n  };\n\n  GregorianCalendarSystem.prototype.getMarkerMonth = function (d) {\n    return d.getUTCMonth();\n  };\n\n  GregorianCalendarSystem.prototype.getMarkerDay = function (d) {\n    return d.getUTCDate();\n  };\n\n  GregorianCalendarSystem.prototype.arrayToMarker = function (arr) {\n    return arrayToUtcDate(arr);\n  };\n\n  GregorianCalendarSystem.prototype.markerToArray = function (marker) {\n    return dateToUtcArray(marker);\n  };\n\n  return GregorianCalendarSystem;\n}();\n\nregisterCalendarSystem('gregory', GregorianCalendarSystem);\nvar ISO_RE = /^\\s*(\\d{4})(-(\\d{2})(-(\\d{2})([T ](\\d{2}):(\\d{2})(:(\\d{2})(\\.(\\d+))?)?(Z|(([-+])(\\d{2})(:?(\\d{2}))?))?)?)?)?$/;\n\nfunction parse(str) {\n  var m = ISO_RE.exec(str);\n\n  if (m) {\n    var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number('0.' + m[12]) * 1000 : 0));\n\n    if (isValidDate(marker)) {\n      var timeZoneOffset = null;\n\n      if (m[13]) {\n        timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));\n      }\n\n      return {\n        marker: marker,\n        isTimeUnspecified: !m[6],\n        timeZoneOffset: timeZoneOffset\n      };\n    }\n  }\n\n  return null;\n}\n\nvar DateEnv =\n/** @class */\nfunction () {\n  function DateEnv(settings) {\n    var timeZone = this.timeZone = settings.timeZone;\n    var isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';\n\n    if (settings.namedTimeZoneImpl && isNamedTimeZone) {\n      this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);\n    }\n\n    this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);\n    this.calendarSystem = createCalendarSystem(settings.calendarSystem);\n    this.locale = settings.locale;\n    this.weekDow = settings.locale.week.dow;\n    this.weekDoy = settings.locale.week.doy;\n\n    if (settings.weekNumberCalculation === 'ISO') {\n      this.weekDow = 1;\n      this.weekDoy = 4;\n    }\n\n    if (typeof settings.firstDay === 'number') {\n      this.weekDow = settings.firstDay;\n    }\n\n    if (typeof settings.weekNumberCalculation === 'function') {\n      this.weekNumberFunc = settings.weekNumberCalculation;\n    }\n\n    this.weekLabel = settings.weekLabel != null ? settings.weekLabel : settings.locale.options.weekLabel;\n    this.cmdFormatter = settings.cmdFormatter;\n  } // Creating / Parsing\n\n\n  DateEnv.prototype.createMarker = function (input) {\n    var meta = this.createMarkerMeta(input);\n\n    if (meta === null) {\n      return null;\n    }\n\n    return meta.marker;\n  };\n\n  DateEnv.prototype.createNowMarker = function () {\n    if (this.canComputeOffset) {\n      return this.timestampToMarker(new Date().valueOf());\n    } else {\n      // if we can't compute the current date val for a timezone,\n      // better to give the current local date vals than UTC\n      return arrayToUtcDate(dateToLocalArray(new Date()));\n    }\n  };\n\n  DateEnv.prototype.createMarkerMeta = function (input) {\n    if (typeof input === 'string') {\n      return this.parse(input);\n    }\n\n    var marker = null;\n\n    if (typeof input === 'number') {\n      marker = this.timestampToMarker(input);\n    } else if (input instanceof Date) {\n      input = input.valueOf();\n\n      if (!isNaN(input)) {\n        marker = this.timestampToMarker(input);\n      }\n    } else if (Array.isArray(input)) {\n      marker = arrayToUtcDate(input);\n    }\n\n    if (marker === null || !isValidDate(marker)) {\n      return null;\n    }\n\n    return {\n      marker: marker,\n      isTimeUnspecified: false,\n      forcedTzo: null\n    };\n  };\n\n  DateEnv.prototype.parse = function (s) {\n    var parts = parse(s);\n\n    if (parts === null) {\n      return null;\n    }\n\n    var marker = parts.marker;\n    var forcedTzo = null;\n\n    if (parts.timeZoneOffset !== null) {\n      if (this.canComputeOffset) {\n        marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);\n      } else {\n        forcedTzo = parts.timeZoneOffset;\n      }\n    }\n\n    return {\n      marker: marker,\n      isTimeUnspecified: parts.isTimeUnspecified,\n      forcedTzo: forcedTzo\n    };\n  }; // Accessors\n\n\n  DateEnv.prototype.getYear = function (marker) {\n    return this.calendarSystem.getMarkerYear(marker);\n  };\n\n  DateEnv.prototype.getMonth = function (marker) {\n    return this.calendarSystem.getMarkerMonth(marker);\n  }; // Adding / Subtracting\n\n\n  DateEnv.prototype.add = function (marker, dur) {\n    var a = this.calendarSystem.markerToArray(marker);\n    a[0] += dur.years;\n    a[1] += dur.months;\n    a[2] += dur.days;\n    a[6] += dur.milliseconds;\n    return this.calendarSystem.arrayToMarker(a);\n  };\n\n  DateEnv.prototype.subtract = function (marker, dur) {\n    var a = this.calendarSystem.markerToArray(marker);\n    a[0] -= dur.years;\n    a[1] -= dur.months;\n    a[2] -= dur.days;\n    a[6] -= dur.milliseconds;\n    return this.calendarSystem.arrayToMarker(a);\n  };\n\n  DateEnv.prototype.addYears = function (marker, n) {\n    var a = this.calendarSystem.markerToArray(marker);\n    a[0] += n;\n    return this.calendarSystem.arrayToMarker(a);\n  };\n\n  DateEnv.prototype.addMonths = function (marker, n) {\n    var a = this.calendarSystem.markerToArray(marker);\n    a[1] += n;\n    return this.calendarSystem.arrayToMarker(a);\n  }; // Diffing Whole Units\n\n\n  DateEnv.prototype.diffWholeYears = function (m0, m1) {\n    var calendarSystem = this.calendarSystem;\n\n    if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {\n      return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);\n    }\n\n    return null;\n  };\n\n  DateEnv.prototype.diffWholeMonths = function (m0, m1) {\n    var calendarSystem = this.calendarSystem;\n\n    if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {\n      return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;\n    }\n\n    return null;\n  }; // Range / Duration\n\n\n  DateEnv.prototype.greatestWholeUnit = function (m0, m1) {\n    var n = this.diffWholeYears(m0, m1);\n\n    if (n !== null) {\n      return {\n        unit: 'year',\n        value: n\n      };\n    }\n\n    n = this.diffWholeMonths(m0, m1);\n\n    if (n !== null) {\n      return {\n        unit: 'month',\n        value: n\n      };\n    }\n\n    n = diffWholeWeeks(m0, m1);\n\n    if (n !== null) {\n      return {\n        unit: 'week',\n        value: n\n      };\n    }\n\n    n = diffWholeDays(m0, m1);\n\n    if (n !== null) {\n      return {\n        unit: 'day',\n        value: n\n      };\n    }\n\n    n = diffHours(m0, m1);\n\n    if (isInt(n)) {\n      return {\n        unit: 'hour',\n        value: n\n      };\n    }\n\n    n = diffMinutes(m0, m1);\n\n    if (isInt(n)) {\n      return {\n        unit: 'minute',\n        value: n\n      };\n    }\n\n    n = diffSeconds(m0, m1);\n\n    if (isInt(n)) {\n      return {\n        unit: 'second',\n        value: n\n      };\n    }\n\n    return {\n      unit: 'millisecond',\n      value: m1.valueOf() - m0.valueOf()\n    };\n  };\n\n  DateEnv.prototype.countDurationsBetween = function (m0, m1, d) {\n    // TODO: can use greatestWholeUnit\n    var diff;\n\n    if (d.years) {\n      diff = this.diffWholeYears(m0, m1);\n\n      if (diff !== null) {\n        return diff / asRoughYears(d);\n      }\n    }\n\n    if (d.months) {\n      diff = this.diffWholeMonths(m0, m1);\n\n      if (diff !== null) {\n        return diff / asRoughMonths(d);\n      }\n    }\n\n    if (d.days) {\n      diff = diffWholeDays(m0, m1);\n\n      if (diff !== null) {\n        return diff / asRoughDays(d);\n      }\n    }\n\n    return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);\n  }; // Start-Of\n\n\n  DateEnv.prototype.startOf = function (m, unit) {\n    if (unit === 'year') {\n      return this.startOfYear(m);\n    } else if (unit === 'month') {\n      return this.startOfMonth(m);\n    } else if (unit === 'week') {\n      return this.startOfWeek(m);\n    } else if (unit === 'day') {\n      return startOfDay(m);\n    } else if (unit === 'hour') {\n      return startOfHour(m);\n    } else if (unit === 'minute') {\n      return startOfMinute(m);\n    } else if (unit === 'second') {\n      return startOfSecond(m);\n    }\n  };\n\n  DateEnv.prototype.startOfYear = function (m) {\n    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m)]);\n  };\n\n  DateEnv.prototype.startOfMonth = function (m) {\n    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m)]);\n  };\n\n  DateEnv.prototype.startOfWeek = function (m) {\n    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m), m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7]);\n  }; // Week Number\n\n\n  DateEnv.prototype.computeWeekNumber = function (marker) {\n    if (this.weekNumberFunc) {\n      return this.weekNumberFunc(this.toDate(marker));\n    } else {\n      return weekOfYear(marker, this.weekDow, this.weekDoy);\n    }\n  }; // TODO: choke on timeZoneName: long\n\n\n  DateEnv.prototype.format = function (marker, formatter, dateOptions) {\n    if (dateOptions === void 0) {\n      dateOptions = {};\n    }\n\n    return formatter.format({\n      marker: marker,\n      timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)\n    }, this);\n  };\n\n  DateEnv.prototype.formatRange = function (start, end, formatter, dateOptions) {\n    if (dateOptions === void 0) {\n      dateOptions = {};\n    }\n\n    if (dateOptions.isEndExclusive) {\n      end = addMs(end, -1);\n    }\n\n    return formatter.formatRange({\n      marker: start,\n      timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)\n    }, {\n      marker: end,\n      timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)\n    }, this);\n  };\n\n  DateEnv.prototype.formatIso = function (marker, extraOptions) {\n    if (extraOptions === void 0) {\n      extraOptions = {};\n    }\n\n    var timeZoneOffset = null;\n\n    if (!extraOptions.omitTimeZoneOffset) {\n      if (extraOptions.forcedTzo != null) {\n        timeZoneOffset = extraOptions.forcedTzo;\n      } else {\n        timeZoneOffset = this.offsetForMarker(marker);\n      }\n    }\n\n    return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);\n  }; // TimeZone\n\n\n  DateEnv.prototype.timestampToMarker = function (ms) {\n    if (this.timeZone === 'local') {\n      return arrayToUtcDate(dateToLocalArray(new Date(ms)));\n    } else if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) {\n      return new Date(ms);\n    } else {\n      return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));\n    }\n  };\n\n  DateEnv.prototype.offsetForMarker = function (m) {\n    if (this.timeZone === 'local') {\n      return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert \"inverse\" offset to \"normal\" offset\n    } else if (this.timeZone === 'UTC') {\n      return 0;\n    } else if (this.namedTimeZoneImpl) {\n      return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));\n    }\n\n    return null;\n  }; // Conversion\n\n\n  DateEnv.prototype.toDate = function (m, forcedTzo) {\n    if (this.timeZone === 'local') {\n      return arrayToLocalDate(dateToUtcArray(m));\n    } else if (this.timeZone === 'UTC') {\n      return new Date(m.valueOf()); // make sure it's a copy\n    } else if (!this.namedTimeZoneImpl) {\n      return new Date(m.valueOf() - (forcedTzo || 0));\n    } else {\n      return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60 // convert minutes -> ms\n      );\n    }\n  };\n\n  return DateEnv;\n}();\n\nvar SIMPLE_SOURCE_PROPS = {\n  id: String,\n  allDayDefault: Boolean,\n  eventDataTransform: Function,\n  success: Function,\n  failure: Function\n};\nvar uid$2 = 0;\n\nfunction doesSourceNeedRange(eventSource, calendar) {\n  var defs = calendar.pluginSystem.hooks.eventSourceDefs;\n  return !defs[eventSource.sourceDefId].ignoreRange;\n}\n\nfunction parseEventSource(raw, calendar) {\n  var defs = calendar.pluginSystem.hooks.eventSourceDefs;\n\n  for (var i = defs.length - 1; i >= 0; i--) {\n    // later-added plugins take precedence\n    var def = defs[i];\n    var meta = def.parseMeta(raw);\n\n    if (meta) {\n      var res = parseEventSourceProps(typeof raw === 'object' ? raw : {}, meta, i, calendar);\n      res._raw = raw;\n      return res;\n    }\n  }\n\n  return null;\n}\n\nfunction parseEventSourceProps(raw, meta, sourceDefId, calendar) {\n  var leftovers0 = {};\n  var props = refineProps(raw, SIMPLE_SOURCE_PROPS, {}, leftovers0);\n  var leftovers1 = {};\n  var ui = processUnscopedUiProps(leftovers0, calendar, leftovers1);\n  props.isFetching = false;\n  props.latestFetchId = '';\n  props.fetchRange = null;\n  props.publicId = String(raw.id || '');\n  props.sourceId = String(uid$2++);\n  props.sourceDefId = sourceDefId;\n  props.meta = meta;\n  props.ui = ui;\n  props.extendedProps = leftovers1;\n  return props;\n}\n\nfunction reduceEventSources(eventSources, action, dateProfile, calendar) {\n  switch (action.type) {\n    case 'ADD_EVENT_SOURCES':\n      // already parsed\n      return addSources(eventSources, action.sources, dateProfile ? dateProfile.activeRange : null, calendar);\n\n    case 'REMOVE_EVENT_SOURCE':\n      return removeSource(eventSources, action.sourceId);\n\n    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n\n    case 'NEXT':\n    case 'SET_DATE':\n    case 'SET_VIEW_TYPE':\n      if (dateProfile) {\n        return fetchDirtySources(eventSources, dateProfile.activeRange, calendar);\n      } else {\n        return eventSources;\n      }\n\n    case 'FETCH_EVENT_SOURCES':\n    case 'CHANGE_TIMEZONE':\n      return fetchSourcesByIds(eventSources, action.sourceIds ? arrayToHash(action.sourceIds) : excludeStaticSources(eventSources, calendar), dateProfile ? dateProfile.activeRange : null, calendar);\n\n    case 'RECEIVE_EVENTS':\n    case 'RECEIVE_EVENT_ERROR':\n      return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);\n\n    case 'REMOVE_ALL_EVENT_SOURCES':\n      return {};\n\n    default:\n      return eventSources;\n  }\n}\n\nvar uid$3 = 0;\n\nfunction addSources(eventSourceHash, sources, fetchRange, calendar) {\n  var hash = {};\n\n  for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {\n    var source = sources_1[_i];\n    hash[source.sourceId] = source;\n  }\n\n  if (fetchRange) {\n    hash = fetchDirtySources(hash, fetchRange, calendar);\n  }\n\n  return _assign({}, eventSourceHash, hash);\n}\n\nfunction removeSource(eventSourceHash, sourceId) {\n  return filterHash(eventSourceHash, function (eventSource) {\n    return eventSource.sourceId !== sourceId;\n  });\n}\n\nfunction fetchDirtySources(sourceHash, fetchRange, calendar) {\n  return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function (eventSource) {\n    return isSourceDirty(eventSource, fetchRange, calendar);\n  }), fetchRange, calendar);\n}\n\nfunction isSourceDirty(eventSource, fetchRange, calendar) {\n  if (!doesSourceNeedRange(eventSource, calendar)) {\n    return !eventSource.latestFetchId;\n  } else {\n    return !calendar.opt('lazyFetching') || !eventSource.fetchRange || fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;\n  }\n}\n\nfunction fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, calendar) {\n  var nextSources = {};\n\n  for (var sourceId in prevSources) {\n    var source = prevSources[sourceId];\n\n    if (sourceIdHash[sourceId]) {\n      nextSources[sourceId] = fetchSource(source, fetchRange, calendar);\n    } else {\n      nextSources[sourceId] = source;\n    }\n  }\n\n  return nextSources;\n}\n\nfunction fetchSource(eventSource, fetchRange, calendar) {\n  var sourceDef = calendar.pluginSystem.hooks.eventSourceDefs[eventSource.sourceDefId];\n  var fetchId = String(uid$3++);\n  sourceDef.fetch({\n    eventSource: eventSource,\n    calendar: calendar,\n    range: fetchRange\n  }, function (res) {\n    var rawEvents = res.rawEvents;\n    var calSuccess = calendar.opt('eventSourceSuccess');\n    var calSuccessRes;\n    var sourceSuccessRes;\n\n    if (eventSource.success) {\n      sourceSuccessRes = eventSource.success(rawEvents, res.xhr);\n    }\n\n    if (calSuccess) {\n      calSuccessRes = calSuccess(rawEvents, res.xhr);\n    }\n\n    rawEvents = sourceSuccessRes || calSuccessRes || rawEvents;\n    calendar.dispatch({\n      type: 'RECEIVE_EVENTS',\n      sourceId: eventSource.sourceId,\n      fetchId: fetchId,\n      fetchRange: fetchRange,\n      rawEvents: rawEvents\n    });\n  }, function (error) {\n    var callFailure = calendar.opt('eventSourceFailure');\n    console.warn(error.message, error);\n\n    if (eventSource.failure) {\n      eventSource.failure(error);\n    }\n\n    if (callFailure) {\n      callFailure(error);\n    }\n\n    calendar.dispatch({\n      type: 'RECEIVE_EVENT_ERROR',\n      sourceId: eventSource.sourceId,\n      fetchId: fetchId,\n      fetchRange: fetchRange,\n      error: error\n    });\n  });\n  return _assign({}, eventSource, {\n    isFetching: true,\n    latestFetchId: fetchId\n  });\n}\n\nfunction receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {\n  var _a;\n\n  var eventSource = sourceHash[sourceId];\n\n  if (eventSource && // not already removed\n  fetchId === eventSource.latestFetchId) {\n    return _assign({}, sourceHash, (_a = {}, _a[sourceId] = _assign({}, eventSource, {\n      isFetching: false,\n      fetchRange: fetchRange\n    }), _a));\n  }\n\n  return sourceHash;\n}\n\nfunction excludeStaticSources(eventSources, calendar) {\n  return filterHash(eventSources, function (eventSource) {\n    return doesSourceNeedRange(eventSource, calendar);\n  });\n}\n\nvar DateProfileGenerator =\n/** @class */\nfunction () {\n  function DateProfileGenerator(viewSpec, calendar) {\n    this.viewSpec = viewSpec;\n    this.options = viewSpec.options;\n    this.dateEnv = calendar.dateEnv;\n    this.calendar = calendar;\n    this.initHiddenDays();\n  }\n  /* Date Range Computation\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Builds a structure with info about what the dates/ranges will be for the \"prev\" view.\n\n\n  DateProfileGenerator.prototype.buildPrev = function (currentDateProfile, currentDate) {\n    var dateEnv = this.dateEnv;\n    var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month\n    currentDateProfile.dateIncrement);\n    return this.build(prevDate, -1);\n  }; // Builds a structure with info about what the dates/ranges will be for the \"next\" view.\n\n\n  DateProfileGenerator.prototype.buildNext = function (currentDateProfile, currentDate) {\n    var dateEnv = this.dateEnv;\n    var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month\n    currentDateProfile.dateIncrement);\n    return this.build(nextDate, 1);\n  }; // Builds a structure holding dates/ranges for rendering around the given date.\n  // Optional direction param indicates whether the date is being incremented/decremented\n  // from its previous value. decremented = -1, incremented = 1 (default).\n\n\n  DateProfileGenerator.prototype.build = function (currentDate, direction, forceToValid) {\n    if (forceToValid === void 0) {\n      forceToValid = false;\n    }\n\n    var validRange;\n    var minTime = null;\n    var maxTime = null;\n    var currentInfo;\n    var isRangeAllDay;\n    var renderRange;\n    var activeRange;\n    var isValid;\n    validRange = this.buildValidRange();\n    validRange = this.trimHiddenDays(validRange);\n\n    if (forceToValid) {\n      currentDate = constrainMarkerToRange(currentDate, validRange);\n    }\n\n    currentInfo = this.buildCurrentRangeInfo(currentDate, direction);\n    isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);\n    renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);\n    renderRange = this.trimHiddenDays(renderRange);\n    activeRange = renderRange;\n\n    if (!this.options.showNonCurrentDates) {\n      activeRange = intersectRanges(activeRange, currentInfo.range);\n    }\n\n    minTime = createDuration(this.options.minTime);\n    maxTime = createDuration(this.options.maxTime);\n    activeRange = this.adjustActiveRange(activeRange, minTime, maxTime);\n    activeRange = intersectRanges(activeRange, validRange); // might return null\n    // it's invalid if the originally requested date is not contained,\n    // or if the range is completely outside of the valid range.\n\n    isValid = rangesIntersect(currentInfo.range, validRange);\n    return {\n      // constraint for where prev/next operations can go and where events can be dragged/resized to.\n      // an object with optional start and end properties.\n      validRange: validRange,\n      // range the view is formally responsible for.\n      // for example, a month view might have 1st-31st, excluding padded dates\n      currentRange: currentInfo.range,\n      // name of largest unit being displayed, like \"month\" or \"week\"\n      currentRangeUnit: currentInfo.unit,\n      isRangeAllDay: isRangeAllDay,\n      // dates that display events and accept drag-n-drop\n      // will be `null` if no dates accept events\n      activeRange: activeRange,\n      // date range with a rendered skeleton\n      // includes not-active days that need some sort of DOM\n      renderRange: renderRange,\n      // Duration object that denotes the first visible time of any given day\n      minTime: minTime,\n      // Duration object that denotes the exclusive visible end time of any given day\n      maxTime: maxTime,\n      isValid: isValid,\n      // how far the current date will move for a prev/next operation\n      dateIncrement: this.buildDateIncrement(currentInfo.duration) // pass a fallback (might be null) ^\n\n    };\n  }; // Builds an object with optional start/end properties.\n  // Indicates the minimum/maximum dates to display.\n  // not responsible for trimming hidden days.\n\n\n  DateProfileGenerator.prototype.buildValidRange = function () {\n    return this.getRangeOption('validRange', this.calendar.getNow()) || {\n      start: null,\n      end: null\n    }; // completely open-ended\n  }; // Builds a structure with info about the \"current\" range, the range that is\n  // highlighted as being the current month for example.\n  // See build() for a description of `direction`.\n  // Guaranteed to have `range` and `unit` properties. `duration` is optional.\n\n\n  DateProfileGenerator.prototype.buildCurrentRangeInfo = function (date, direction) {\n    var _a = this,\n        viewSpec = _a.viewSpec,\n        dateEnv = _a.dateEnv;\n\n    var duration = null;\n    var unit = null;\n    var range = null;\n    var dayCount;\n\n    if (viewSpec.duration) {\n      duration = viewSpec.duration;\n      unit = viewSpec.durationUnit;\n      range = this.buildRangeFromDuration(date, direction, duration, unit);\n    } else if (dayCount = this.options.dayCount) {\n      unit = 'day';\n      range = this.buildRangeFromDayCount(date, direction, dayCount);\n    } else if (range = this.buildCustomVisibleRange(date)) {\n      unit = dateEnv.greatestWholeUnit(range.start, range.end).unit;\n    } else {\n      duration = this.getFallbackDuration();\n      unit = greatestDurationDenominator(duration).unit;\n      range = this.buildRangeFromDuration(date, direction, duration, unit);\n    }\n\n    return {\n      duration: duration,\n      unit: unit,\n      range: range\n    };\n  };\n\n  DateProfileGenerator.prototype.getFallbackDuration = function () {\n    return createDuration({\n      day: 1\n    });\n  }; // Returns a new activeRange to have time values (un-ambiguate)\n  // minTime or maxTime causes the range to expand.\n\n\n  DateProfileGenerator.prototype.adjustActiveRange = function (range, minTime, maxTime) {\n    var dateEnv = this.dateEnv;\n    var start = range.start;\n    var end = range.end;\n\n    if (this.viewSpec.class.prototype.usesMinMaxTime) {\n      // expand active range if minTime is negative (why not when positive?)\n      if (asRoughDays(minTime) < 0) {\n        start = startOfDay(start); // necessary?\n\n        start = dateEnv.add(start, minTime);\n      } // expand active range if maxTime is beyond one day (why not when positive?)\n\n\n      if (asRoughDays(maxTime) > 1) {\n        end = startOfDay(end); // necessary?\n\n        end = addDays(end, -1);\n        end = dateEnv.add(end, maxTime);\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  }; // Builds the \"current\" range when it is specified as an explicit duration.\n  // `unit` is the already-computed greatestDurationDenominator unit of duration.\n\n\n  DateProfileGenerator.prototype.buildRangeFromDuration = function (date, direction, duration, unit) {\n    var dateEnv = this.dateEnv;\n    var alignment = this.options.dateAlignment;\n    var dateIncrementInput;\n    var dateIncrementDuration;\n    var start;\n    var end;\n    var res; // compute what the alignment should be\n\n    if (!alignment) {\n      dateIncrementInput = this.options.dateIncrement;\n\n      if (dateIncrementInput) {\n        dateIncrementDuration = createDuration(dateIncrementInput); // use the smaller of the two units\n\n        if (asRoughMs(dateIncrementDuration) < asRoughMs(duration)) {\n          alignment = greatestDurationDenominator(dateIncrementDuration, !getWeeksFromInput(dateIncrementInput)).unit;\n        } else {\n          alignment = unit;\n        }\n      } else {\n        alignment = unit;\n      }\n    } // if the view displays a single day or smaller\n\n\n    if (asRoughDays(duration) <= 1) {\n      if (this.isHiddenDay(start)) {\n        start = this.skipHiddenDays(start, direction);\n        start = startOfDay(start);\n      }\n    }\n\n    function computeRes() {\n      start = dateEnv.startOf(date, alignment);\n      end = dateEnv.add(start, duration);\n      res = {\n        start: start,\n        end: end\n      };\n    }\n\n    computeRes(); // if range is completely enveloped by hidden days, go past the hidden days\n\n    if (!this.trimHiddenDays(res)) {\n      date = this.skipHiddenDays(date, direction);\n      computeRes();\n    }\n\n    return res;\n  }; // Builds the \"current\" range when a dayCount is specified.\n\n\n  DateProfileGenerator.prototype.buildRangeFromDayCount = function (date, direction, dayCount) {\n    var dateEnv = this.dateEnv;\n    var customAlignment = this.options.dateAlignment;\n    var runningCount = 0;\n    var start = date;\n    var end;\n\n    if (customAlignment) {\n      start = dateEnv.startOf(start, customAlignment);\n    }\n\n    start = startOfDay(start);\n    start = this.skipHiddenDays(start, direction);\n    end = start;\n\n    do {\n      end = addDays(end, 1);\n\n      if (!this.isHiddenDay(end)) {\n        runningCount++;\n      }\n    } while (runningCount < dayCount);\n\n    return {\n      start: start,\n      end: end\n    };\n  }; // Builds a normalized range object for the \"visible\" range,\n  // which is a way to define the currentRange and activeRange at the same time.\n\n\n  DateProfileGenerator.prototype.buildCustomVisibleRange = function (date) {\n    var dateEnv = this.dateEnv;\n    var visibleRange = this.getRangeOption('visibleRange', dateEnv.toDate(date));\n\n    if (visibleRange && (visibleRange.start == null || visibleRange.end == null)) {\n      return null;\n    }\n\n    return visibleRange;\n  }; // Computes the range that will represent the element/cells for *rendering*,\n  // but which may have voided days/times.\n  // not responsible for trimming hidden days.\n\n\n  DateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n    return currentRange;\n  }; // Compute the duration value that should be added/substracted to the current date\n  // when a prev/next operation happens.\n\n\n  DateProfileGenerator.prototype.buildDateIncrement = function (fallback) {\n    var dateIncrementInput = this.options.dateIncrement;\n    var customAlignment;\n\n    if (dateIncrementInput) {\n      return createDuration(dateIncrementInput);\n    } else if (customAlignment = this.options.dateAlignment) {\n      return createDuration(1, customAlignment);\n    } else if (fallback) {\n      return fallback;\n    } else {\n      return createDuration({\n        days: 1\n      });\n    }\n  }; // Arguments after name will be forwarded to a hypothetical function value\n  // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.\n  // Always clone your objects if you fear mutation.\n\n\n  DateProfileGenerator.prototype.getRangeOption = function (name) {\n    var otherArgs = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      otherArgs[_i - 1] = arguments[_i];\n    }\n\n    var val = this.options[name];\n\n    if (typeof val === 'function') {\n      val = val.apply(null, otherArgs);\n    }\n\n    if (val) {\n      val = parseRange(val, this.dateEnv);\n    }\n\n    if (val) {\n      val = computeVisibleDayRange(val);\n    }\n\n    return val;\n  };\n  /* Hidden Days\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Initializes internal variables related to calculating hidden days-of-week\n\n\n  DateProfileGenerator.prototype.initHiddenDays = function () {\n    var hiddenDays = this.options.hiddenDays || []; // array of day-of-week indices that are hidden\n\n    var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)\n\n    var dayCnt = 0;\n    var i;\n\n    if (this.options.weekends === false) {\n      hiddenDays.push(0, 6); // 0=sunday, 6=saturday\n    }\n\n    for (i = 0; i < 7; i++) {\n      if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {\n        dayCnt++;\n      }\n    }\n\n    if (!dayCnt) {\n      throw new Error('invalid hiddenDays'); // all days were hidden? bad.\n    }\n\n    this.isHiddenDayHash = isHiddenDayHash;\n  }; // Remove days from the beginning and end of the range that are computed as hidden.\n  // If the whole range is trimmed off, returns null\n\n\n  DateProfileGenerator.prototype.trimHiddenDays = function (range) {\n    var start = range.start;\n    var end = range.end;\n\n    if (start) {\n      start = this.skipHiddenDays(start);\n    }\n\n    if (end) {\n      end = this.skipHiddenDays(end, -1, true);\n    }\n\n    if (start == null || end == null || start < end) {\n      return {\n        start: start,\n        end: end\n      };\n    }\n\n    return null;\n  }; // Is the current day hidden?\n  // `day` is a day-of-week index (0-6), or a Date (used for UTC)\n\n\n  DateProfileGenerator.prototype.isHiddenDay = function (day) {\n    if (day instanceof Date) {\n      day = day.getUTCDay();\n    }\n\n    return this.isHiddenDayHash[day];\n  }; // Incrementing the current day until it is no longer a hidden day, returning a copy.\n  // DOES NOT CONSIDER validRange!\n  // If the initial value of `date` is not a hidden day, don't do anything.\n  // Pass `isExclusive` as `true` if you are dealing with an end date.\n  // `inc` defaults to `1` (increment one day forward each time)\n\n\n  DateProfileGenerator.prototype.skipHiddenDays = function (date, inc, isExclusive) {\n    if (inc === void 0) {\n      inc = 1;\n    }\n\n    if (isExclusive === void 0) {\n      isExclusive = false;\n    }\n\n    while (this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]) {\n      date = addDays(date, inc);\n    }\n\n    return date;\n  };\n\n  return DateProfileGenerator;\n}(); // TODO: find a way to avoid comparing DateProfiles. it's tedious\n\n\nfunction isDateProfilesEqual(p0, p1) {\n  return rangesEqual(p0.validRange, p1.validRange) && rangesEqual(p0.activeRange, p1.activeRange) && rangesEqual(p0.renderRange, p1.renderRange) && durationsEqual(p0.minTime, p1.minTime) && durationsEqual(p0.maxTime, p1.maxTime);\n  /*\n  TODO: compare more?\n    currentRange: DateRange\n    currentRangeUnit: string\n    isRangeAllDay: boolean\n    isValid: boolean\n    dateIncrement: Duration\n  */\n}\n\nfunction reduce(state, action, calendar) {\n  var viewType = reduceViewType(state.viewType, action);\n  var dateProfile = reduceDateProfile(state.dateProfile, action, state.currentDate, viewType, calendar);\n  var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendar);\n\n  var nextState = _assign({}, state, {\n    viewType: viewType,\n    dateProfile: dateProfile,\n    currentDate: reduceCurrentDate(state.currentDate, action, dateProfile),\n    eventSources: eventSources,\n    eventStore: reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendar),\n    dateSelection: reduceDateSelection(state.dateSelection, action, calendar),\n    eventSelection: reduceSelectedEvent(state.eventSelection, action),\n    eventDrag: reduceEventDrag(state.eventDrag, action, eventSources, calendar),\n    eventResize: reduceEventResize(state.eventResize, action, eventSources, calendar),\n    eventSourceLoadingLevel: computeLoadingLevel(eventSources),\n    loadingLevel: computeLoadingLevel(eventSources)\n  });\n\n  for (var _i = 0, _a = calendar.pluginSystem.hooks.reducers; _i < _a.length; _i++) {\n    var reducerFunc = _a[_i];\n    nextState = reducerFunc(nextState, action, calendar);\n  } // console.log(action.type, nextState)\n\n\n  return nextState;\n}\n\nfunction reduceViewType(currentViewType, action) {\n  switch (action.type) {\n    case 'SET_VIEW_TYPE':\n      return action.viewType;\n\n    default:\n      return currentViewType;\n  }\n}\n\nfunction reduceDateProfile(currentDateProfile, action, currentDate, viewType, calendar) {\n  var newDateProfile;\n\n  switch (action.type) {\n    case 'PREV':\n      newDateProfile = calendar.dateProfileGenerators[viewType].buildPrev(currentDateProfile, currentDate);\n      break;\n\n    case 'NEXT':\n      newDateProfile = calendar.dateProfileGenerators[viewType].buildNext(currentDateProfile, currentDate);\n      break;\n\n    case 'SET_DATE':\n      if (!currentDateProfile.activeRange || !rangeContainsMarker(currentDateProfile.currentRange, action.dateMarker)) {\n        newDateProfile = calendar.dateProfileGenerators[viewType].build(action.dateMarker, undefined, true // forceToValid\n        );\n      }\n\n      break;\n\n    case 'SET_VIEW_TYPE':\n      var generator = calendar.dateProfileGenerators[viewType];\n\n      if (!generator) {\n        throw new Error(viewType ? 'The FullCalendar view \"' + viewType + '\" does not exist. Make sure your plugins are loaded correctly.' : 'No available FullCalendar view plugins.');\n      }\n\n      newDateProfile = generator.build(action.dateMarker || currentDate, undefined, true // forceToValid\n      );\n      break;\n  }\n\n  if (newDateProfile && newDateProfile.isValid && !(currentDateProfile && isDateProfilesEqual(currentDateProfile, newDateProfile))) {\n    return newDateProfile;\n  } else {\n    return currentDateProfile;\n  }\n}\n\nfunction reduceCurrentDate(currentDate, action, dateProfile) {\n  switch (action.type) {\n    case 'PREV':\n    case 'NEXT':\n      if (!rangeContainsMarker(dateProfile.currentRange, currentDate)) {\n        return dateProfile.currentRange.start;\n      } else {\n        return currentDate;\n      }\n\n    case 'SET_DATE':\n    case 'SET_VIEW_TYPE':\n      var newDate = action.dateMarker || currentDate;\n\n      if (dateProfile.activeRange && !rangeContainsMarker(dateProfile.activeRange, newDate)) {\n        return dateProfile.currentRange.start;\n      } else {\n        return newDate;\n      }\n\n    default:\n      return currentDate;\n  }\n}\n\nfunction reduceDateSelection(currentSelection, action, calendar) {\n  switch (action.type) {\n    case 'SELECT_DATES':\n      return action.selection;\n\n    case 'UNSELECT_DATES':\n      return null;\n\n    default:\n      return currentSelection;\n  }\n}\n\nfunction reduceSelectedEvent(currentInstanceId, action) {\n  switch (action.type) {\n    case 'SELECT_EVENT':\n      return action.eventInstanceId;\n\n    case 'UNSELECT_EVENT':\n      return '';\n\n    default:\n      return currentInstanceId;\n  }\n}\n\nfunction reduceEventDrag(currentDrag, action, sources, calendar) {\n  switch (action.type) {\n    case 'SET_EVENT_DRAG':\n      var newDrag = action.state;\n      return {\n        affectedEvents: newDrag.affectedEvents,\n        mutatedEvents: newDrag.mutatedEvents,\n        isEvent: newDrag.isEvent,\n        origSeg: newDrag.origSeg\n      };\n\n    case 'UNSET_EVENT_DRAG':\n      return null;\n\n    default:\n      return currentDrag;\n  }\n}\n\nfunction reduceEventResize(currentResize, action, sources, calendar) {\n  switch (action.type) {\n    case 'SET_EVENT_RESIZE':\n      var newResize = action.state;\n      return {\n        affectedEvents: newResize.affectedEvents,\n        mutatedEvents: newResize.mutatedEvents,\n        isEvent: newResize.isEvent,\n        origSeg: newResize.origSeg\n      };\n\n    case 'UNSET_EVENT_RESIZE':\n      return null;\n\n    default:\n      return currentResize;\n  }\n}\n\nfunction computeLoadingLevel(eventSources) {\n  var cnt = 0;\n\n  for (var sourceId in eventSources) {\n    if (eventSources[sourceId].isFetching) {\n      cnt++;\n    }\n  }\n\n  return cnt;\n}\n\nvar STANDARD_PROPS = {\n  start: null,\n  end: null,\n  allDay: Boolean\n};\n\nfunction parseDateSpan(raw, dateEnv, defaultDuration) {\n  var span = parseOpenDateSpan(raw, dateEnv);\n  var range = span.range;\n\n  if (!range.start) {\n    return null;\n  }\n\n  if (!range.end) {\n    if (defaultDuration == null) {\n      return null;\n    } else {\n      range.end = dateEnv.add(range.start, defaultDuration);\n    }\n  }\n\n  return span;\n}\n/*\nTODO: somehow combine with parseRange?\nWill return null if the start/end props were present but parsed invalidly.\n*/\n\n\nfunction parseOpenDateSpan(raw, dateEnv) {\n  var leftovers = {};\n  var standardProps = refineProps(raw, STANDARD_PROPS, {}, leftovers);\n  var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;\n  var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;\n  var allDay = standardProps.allDay;\n\n  if (allDay == null) {\n    allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);\n  } // use this leftover object as the selection object\n\n\n  leftovers.range = {\n    start: startMeta ? startMeta.marker : null,\n    end: endMeta ? endMeta.marker : null\n  };\n  leftovers.allDay = allDay;\n  return leftovers;\n}\n\nfunction isDateSpansEqual(span0, span1) {\n  return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);\n} // the NON-DATE-RELATED props\n\n\nfunction isSpanPropsEqual(span0, span1) {\n  for (var propName in span1) {\n    if (propName !== 'range' && propName !== 'allDay') {\n      if (span0[propName] !== span1[propName]) {\n        return false;\n      }\n    }\n  } // are there any props that span0 has that span1 DOESN'T have?\n  // both have range/allDay, so no need to special-case.\n\n\n  for (var propName in span0) {\n    if (!(propName in span1)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction buildDateSpanApi(span, dateEnv) {\n  return {\n    start: dateEnv.toDate(span.range.start),\n    end: dateEnv.toDate(span.range.end),\n    startStr: dateEnv.formatIso(span.range.start, {\n      omitTime: span.allDay\n    }),\n    endStr: dateEnv.formatIso(span.range.end, {\n      omitTime: span.allDay\n    }),\n    allDay: span.allDay\n  };\n}\n\nfunction buildDatePointApi(span, dateEnv) {\n  return {\n    date: dateEnv.toDate(span.range.start),\n    dateStr: dateEnv.formatIso(span.range.start, {\n      omitTime: span.allDay\n    }),\n    allDay: span.allDay\n  };\n}\n\nfunction fabricateEventRange(dateSpan, eventUiBases, calendar) {\n  var def = parseEventDef({\n    editable: false\n  }, '', // sourceId\n  dateSpan.allDay, true, // hasEnd\n  calendar);\n  return {\n    def: def,\n    ui: compileEventUi(def, eventUiBases),\n    instance: createEventInstance(def.defId, dateSpan.range),\n    range: dateSpan.range,\n    isStart: true,\n    isEnd: true\n  };\n}\n\nfunction compileViewDefs(defaultConfigs, overrideConfigs) {\n  var hash = {};\n  var viewType;\n\n  for (viewType in defaultConfigs) {\n    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n  }\n\n  for (viewType in overrideConfigs) {\n    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n  }\n\n  return hash;\n}\n\nfunction ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n  if (hash[viewType]) {\n    return hash[viewType];\n  }\n\n  var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n\n  if (viewDef) {\n    hash[viewType] = viewDef;\n  }\n\n  return viewDef;\n}\n\nfunction buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n  var defaultConfig = defaultConfigs[viewType];\n  var overrideConfig = overrideConfigs[viewType];\n\n  var queryProp = function queryProp(name) {\n    return defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;\n  };\n\n  var theClass = queryProp('class');\n  var superType = queryProp('superType');\n\n  if (!superType && theClass) {\n    superType = findViewNameBySubclass(theClass, overrideConfigs) || findViewNameBySubclass(theClass, defaultConfigs);\n  }\n\n  var superDef = null;\n\n  if (superType) {\n    if (superType === viewType) {\n      throw new Error('Can\\'t have a custom view type that references itself');\n    }\n\n    superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);\n  }\n\n  if (!theClass && superDef) {\n    theClass = superDef.class;\n  }\n\n  if (!theClass) {\n    return null; // don't throw a warning, might be settings for a single-unit view\n  }\n\n  return {\n    type: viewType,\n    class: theClass,\n    defaults: _assign({}, superDef ? superDef.defaults : {}, defaultConfig ? defaultConfig.options : {}),\n    overrides: _assign({}, superDef ? superDef.overrides : {}, overrideConfig ? overrideConfig.options : {})\n  };\n}\n\nfunction findViewNameBySubclass(viewSubclass, configs) {\n  var superProto = Object.getPrototypeOf(viewSubclass.prototype);\n\n  for (var viewType in configs) {\n    var parsed = configs[viewType]; // need DIRECT subclass, so instanceof won't do it\n\n    if (parsed.class && parsed.class.prototype === superProto) {\n      return viewType;\n    }\n  }\n\n  return '';\n}\n\nfunction parseViewConfigs(inputs) {\n  return mapHash(inputs, parseViewConfig);\n}\n\nvar VIEW_DEF_PROPS = {\n  type: String,\n  class: null\n};\n\nfunction parseViewConfig(input) {\n  if (typeof input === 'function') {\n    input = {\n      class: input\n    };\n  }\n\n  var options = {};\n  var props = refineProps(input, VIEW_DEF_PROPS, {}, options);\n  return {\n    superType: props.type,\n    class: props.class,\n    options: options\n  };\n}\n\nfunction buildViewSpecs(defaultInputs, optionsManager) {\n  var defaultConfigs = parseViewConfigs(defaultInputs);\n  var overrideConfigs = parseViewConfigs(optionsManager.overrides.views);\n  var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);\n  return mapHash(viewDefs, function (viewDef) {\n    return buildViewSpec(viewDef, overrideConfigs, optionsManager);\n  });\n}\n\nfunction buildViewSpec(viewDef, overrideConfigs, optionsManager) {\n  var durationInput = viewDef.overrides.duration || viewDef.defaults.duration || optionsManager.dynamicOverrides.duration || optionsManager.overrides.duration;\n  var duration = null;\n  var durationUnit = '';\n  var singleUnit = '';\n  var singleUnitOverrides = {};\n\n  if (durationInput) {\n    duration = createDuration(durationInput);\n\n    if (duration) {\n      // valid?\n      var denom = greatestDurationDenominator(duration, !getWeeksFromInput(durationInput));\n      durationUnit = denom.unit;\n\n      if (denom.value === 1) {\n        singleUnit = durationUnit;\n        singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].options : {};\n      }\n    }\n  }\n\n  var queryButtonText = function queryButtonText(options) {\n    var buttonTextMap = options.buttonText || {};\n    var buttonTextKey = viewDef.defaults.buttonTextKey;\n\n    if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {\n      return buttonTextMap[buttonTextKey];\n    }\n\n    if (buttonTextMap[viewDef.type] != null) {\n      return buttonTextMap[viewDef.type];\n    }\n\n    if (buttonTextMap[singleUnit] != null) {\n      return buttonTextMap[singleUnit];\n    }\n  };\n\n  return {\n    type: viewDef.type,\n    class: viewDef.class,\n    duration: duration,\n    durationUnit: durationUnit,\n    singleUnit: singleUnit,\n    options: _assign({}, globalDefaults, viewDef.defaults, optionsManager.dirDefaults, optionsManager.localeDefaults, optionsManager.overrides, singleUnitOverrides, viewDef.overrides, optionsManager.dynamicOverrides),\n    buttonTextOverride: queryButtonText(optionsManager.dynamicOverrides) || queryButtonText(optionsManager.overrides) || // constructor-specified buttonText lookup hash takes precedence\n    viewDef.overrides.buttonText,\n    buttonTextDefault: queryButtonText(optionsManager.localeDefaults) || queryButtonText(optionsManager.dirDefaults) || viewDef.defaults.buttonText || queryButtonText(globalDefaults) || viewDef.type // fall back to given view name\n\n  };\n}\n\nvar Toolbar =\n/** @class */\nfunction (_super) {\n  __extends(Toolbar, _super);\n\n  function Toolbar(context, extraClassName) {\n    var _this = _super.call(this, context) || this;\n\n    _this._renderLayout = memoizeRendering(_this.renderLayout, _this.unrenderLayout);\n    _this._updateTitle = memoizeRendering(_this.updateTitle, null, [_this._renderLayout]);\n    _this._updateActiveButton = memoizeRendering(_this.updateActiveButton, null, [_this._renderLayout]);\n    _this._updateToday = memoizeRendering(_this.updateToday, null, [_this._renderLayout]);\n    _this._updatePrev = memoizeRendering(_this.updatePrev, null, [_this._renderLayout]);\n    _this._updateNext = memoizeRendering(_this.updateNext, null, [_this._renderLayout]);\n    _this.el = createElement('div', {\n      className: 'fc-toolbar ' + extraClassName\n    });\n    return _this;\n  }\n\n  Toolbar.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this._renderLayout.unrender(); // should unrender everything else\n\n\n    removeElement(this.el);\n  };\n\n  Toolbar.prototype.render = function (props) {\n    this._renderLayout(props.layout);\n\n    this._updateTitle(props.title);\n\n    this._updateActiveButton(props.activeButton);\n\n    this._updateToday(props.isTodayEnabled);\n\n    this._updatePrev(props.isPrevEnabled);\n\n    this._updateNext(props.isNextEnabled);\n  };\n\n  Toolbar.prototype.renderLayout = function (layout) {\n    var el = this.el;\n    this.viewsWithButtons = [];\n    appendToElement(el, this.renderSection('left', layout.left));\n    appendToElement(el, this.renderSection('center', layout.center));\n    appendToElement(el, this.renderSection('right', layout.right));\n  };\n\n  Toolbar.prototype.unrenderLayout = function () {\n    this.el.innerHTML = '';\n  };\n\n  Toolbar.prototype.renderSection = function (position, buttonStr) {\n    var _this = this;\n\n    var _a = this,\n        theme = _a.theme,\n        calendar = _a.calendar;\n\n    var optionsManager = calendar.optionsManager;\n    var viewSpecs = calendar.viewSpecs;\n    var sectionEl = createElement('div', {\n      className: 'fc-' + position\n    });\n    var calendarCustomButtons = optionsManager.computed.customButtons || {};\n    var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};\n    var calendarButtonText = optionsManager.computed.buttonText || {};\n\n    if (buttonStr) {\n      buttonStr.split(' ').forEach(function (buttonGroupStr, i) {\n        var groupChildren = [];\n        var isOnlyButtons = true;\n        var groupEl;\n        buttonGroupStr.split(',').forEach(function (buttonName, j) {\n          var customButtonProps;\n          var viewSpec;\n          var buttonClick;\n          var buttonIcon; // only one of these will be set\n\n          var buttonText; // \"\n\n          var buttonInnerHtml;\n          var buttonClasses;\n          var buttonEl;\n          var buttonAriaAttr;\n\n          if (buttonName === 'title') {\n            groupChildren.push(htmlToElement('<h2>&nbsp;</h2>')); // we always want it to take up height\n\n            isOnlyButtons = false;\n          } else {\n            if (customButtonProps = calendarCustomButtons[buttonName]) {\n              buttonClick = function buttonClick(ev) {\n                if (customButtonProps.click) {\n                  customButtonProps.click.call(buttonEl, ev);\n                }\n              };\n\n              (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = customButtonProps.text);\n            } else if (viewSpec = viewSpecs[buttonName]) {\n              _this.viewsWithButtons.push(buttonName);\n\n              buttonClick = function buttonClick() {\n                calendar.changeView(buttonName);\n              };\n\n              (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = viewSpec.buttonTextDefault);\n            } else if (calendar[buttonName]) {\n              // a calendar method\n              buttonClick = function buttonClick() {\n                calendar[buttonName]();\n              };\n\n              (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = calendarButtonText[buttonName]); //            ^ everything else is considered default\n            }\n\n            if (buttonClick) {\n              buttonClasses = ['fc-' + buttonName + '-button', theme.getClass('button')];\n\n              if (buttonText) {\n                buttonInnerHtml = htmlEscape(buttonText);\n                buttonAriaAttr = '';\n              } else if (buttonIcon) {\n                buttonInnerHtml = \"<span class='\" + buttonIcon + \"'></span>\";\n                buttonAriaAttr = ' aria-label=\"' + buttonName + '\"';\n              }\n\n              buttonEl = htmlToElement( // type=\"button\" so that it doesn't submit a form\n              '<button type=\"button\" class=\"' + buttonClasses.join(' ') + '\"' + buttonAriaAttr + '>' + buttonInnerHtml + '</button>');\n              buttonEl.addEventListener('click', buttonClick);\n              groupChildren.push(buttonEl);\n            }\n          }\n        });\n\n        if (groupChildren.length > 1) {\n          groupEl = document.createElement('div');\n          var buttonGroupClassName = theme.getClass('buttonGroup');\n\n          if (isOnlyButtons && buttonGroupClassName) {\n            groupEl.classList.add(buttonGroupClassName);\n          }\n\n          appendToElement(groupEl, groupChildren);\n          sectionEl.appendChild(groupEl);\n        } else {\n          appendToElement(sectionEl, groupChildren); // 1 or 0 children\n        }\n      });\n    }\n\n    return sectionEl;\n  };\n\n  Toolbar.prototype.updateToday = function (isTodayEnabled) {\n    this.toggleButtonEnabled('today', isTodayEnabled);\n  };\n\n  Toolbar.prototype.updatePrev = function (isPrevEnabled) {\n    this.toggleButtonEnabled('prev', isPrevEnabled);\n  };\n\n  Toolbar.prototype.updateNext = function (isNextEnabled) {\n    this.toggleButtonEnabled('next', isNextEnabled);\n  };\n\n  Toolbar.prototype.updateTitle = function (text) {\n    findElements(this.el, 'h2').forEach(function (titleEl) {\n      titleEl.innerText = text;\n    });\n  };\n\n  Toolbar.prototype.updateActiveButton = function (buttonName) {\n    var className = this.theme.getClass('buttonActive');\n    findElements(this.el, 'button').forEach(function (buttonEl) {\n      if (buttonName && buttonEl.classList.contains('fc-' + buttonName + '-button')) {\n        buttonEl.classList.add(className);\n      } else {\n        buttonEl.classList.remove(className);\n      }\n    });\n  };\n\n  Toolbar.prototype.toggleButtonEnabled = function (buttonName, bool) {\n    findElements(this.el, '.fc-' + buttonName + '-button').forEach(function (buttonEl) {\n      buttonEl.disabled = !bool;\n    });\n  };\n\n  return Toolbar;\n}(Component);\n\nvar CalendarComponent =\n/** @class */\nfunction (_super) {\n  __extends(CalendarComponent, _super);\n\n  function CalendarComponent(context, el) {\n    var _this = _super.call(this, context) || this;\n\n    _this._renderToolbars = memoizeRendering(_this.renderToolbars);\n    _this.buildViewPropTransformers = memoize(buildViewPropTransformers);\n    _this.el = el;\n    prependToElement(el, _this.contentEl = createElement('div', {\n      className: 'fc-view-container'\n    }));\n    var calendar = _this.calendar;\n\n    for (var _i = 0, _a = calendar.pluginSystem.hooks.viewContainerModifiers; _i < _a.length; _i++) {\n      var modifyViewContainer = _a[_i];\n      modifyViewContainer(_this.contentEl, calendar);\n    }\n\n    _this.toggleElClassNames(true);\n\n    _this.computeTitle = memoize(computeTitle);\n    _this.parseBusinessHours = memoize(function (input) {\n      return parseBusinessHours(input, _this.calendar);\n    });\n    return _this;\n  }\n\n  CalendarComponent.prototype.destroy = function () {\n    if (this.header) {\n      this.header.destroy();\n    }\n\n    if (this.footer) {\n      this.footer.destroy();\n    }\n\n    if (this.view) {\n      this.view.destroy();\n    }\n\n    removeElement(this.contentEl);\n    this.toggleElClassNames(false);\n\n    _super.prototype.destroy.call(this);\n  };\n\n  CalendarComponent.prototype.toggleElClassNames = function (bool) {\n    var classList = this.el.classList;\n    var dirClassName = 'fc-' + this.opt('dir');\n    var themeClassName = this.theme.getClass('widget');\n\n    if (bool) {\n      classList.add('fc');\n      classList.add(dirClassName);\n      classList.add(themeClassName);\n    } else {\n      classList.remove('fc');\n      classList.remove(dirClassName);\n      classList.remove(themeClassName);\n    }\n  };\n\n  CalendarComponent.prototype.render = function (props) {\n    this.freezeHeight();\n    var title = this.computeTitle(props.dateProfile, props.viewSpec.options);\n\n    this._renderToolbars(props.viewSpec, props.dateProfile, props.currentDate, props.dateProfileGenerator, title);\n\n    this.renderView(props, title);\n    this.updateSize();\n    this.thawHeight();\n  };\n\n  CalendarComponent.prototype.renderToolbars = function (viewSpec, dateProfile, currentDate, dateProfileGenerator, title) {\n    var headerLayout = this.opt('header');\n    var footerLayout = this.opt('footer');\n    var now = this.calendar.getNow();\n    var todayInfo = dateProfileGenerator.build(now);\n    var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate);\n    var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate);\n    var toolbarProps = {\n      title: title,\n      activeButton: viewSpec.type,\n      isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),\n      isPrevEnabled: prevInfo.isValid,\n      isNextEnabled: nextInfo.isValid\n    };\n\n    if (headerLayout) {\n      if (!this.header) {\n        this.header = new Toolbar(this.context, 'fc-header-toolbar');\n        prependToElement(this.el, this.header.el);\n      }\n\n      this.header.receiveProps(_assign({\n        layout: headerLayout\n      }, toolbarProps));\n    } else if (this.header) {\n      this.header.destroy();\n      this.header = null;\n    }\n\n    if (footerLayout) {\n      if (!this.footer) {\n        this.footer = new Toolbar(this.context, 'fc-footer-toolbar');\n        appendToElement(this.el, this.footer.el);\n      }\n\n      this.footer.receiveProps(_assign({\n        layout: footerLayout\n      }, toolbarProps));\n    } else if (this.footer) {\n      this.footer.destroy();\n      this.footer = null;\n    }\n  };\n\n  CalendarComponent.prototype.renderView = function (props, title) {\n    var view = this.view;\n    var viewSpec = props.viewSpec,\n        dateProfileGenerator = props.dateProfileGenerator;\n\n    if (!view || view.viewSpec !== viewSpec) {\n      if (view) {\n        view.destroy();\n      }\n\n      view = this.view = new viewSpec['class']({\n        calendar: this.calendar,\n        view: null,\n        dateEnv: this.dateEnv,\n        theme: this.theme,\n        options: viewSpec.options\n      }, viewSpec, dateProfileGenerator, this.contentEl);\n    } else {\n      view.addScroll(view.queryScroll());\n    }\n\n    view.title = title; // for the API\n\n    var viewProps = {\n      dateProfile: props.dateProfile,\n      businessHours: this.parseBusinessHours(viewSpec.options.businessHours),\n      eventStore: props.eventStore,\n      eventUiBases: props.eventUiBases,\n      dateSelection: props.dateSelection,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize\n    };\n    var transformers = this.buildViewPropTransformers(this.calendar.pluginSystem.hooks.viewPropsTransformers);\n\n    for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {\n      var transformer = transformers_1[_i];\n\n      _assign(viewProps, transformer.transform(viewProps, viewSpec, props, view));\n    }\n\n    view.receiveProps(viewProps);\n  }; // Sizing\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  CalendarComponent.prototype.updateSize = function (isResize) {\n    if (isResize === void 0) {\n      isResize = false;\n    }\n\n    var view = this.view;\n\n    if (isResize) {\n      view.addScroll(view.queryScroll());\n    }\n\n    if (isResize || this.isHeightAuto == null) {\n      this.computeHeightVars();\n    }\n\n    view.updateSize(isResize, this.viewHeight, this.isHeightAuto);\n    view.updateNowIndicator(); // we need to guarantee this will run after updateSize\n\n    view.popScroll(isResize);\n  };\n\n  CalendarComponent.prototype.computeHeightVars = function () {\n    var calendar = this.calendar; // yuck. need to handle dynamic options\n\n    var heightInput = calendar.opt('height');\n    var contentHeightInput = calendar.opt('contentHeight');\n    this.isHeightAuto = heightInput === 'auto' || contentHeightInput === 'auto';\n\n    if (typeof contentHeightInput === 'number') {\n      // exists and not 'auto'\n      this.viewHeight = contentHeightInput;\n    } else if (typeof contentHeightInput === 'function') {\n      // exists and is a function\n      this.viewHeight = contentHeightInput();\n    } else if (typeof heightInput === 'number') {\n      // exists and not 'auto'\n      this.viewHeight = heightInput - this.queryToolbarsHeight();\n    } else if (typeof heightInput === 'function') {\n      // exists and is a function\n      this.viewHeight = heightInput() - this.queryToolbarsHeight();\n    } else if (heightInput === 'parent') {\n      // set to height of parent element\n      var parentEl = this.el.parentNode;\n      this.viewHeight = parentEl.getBoundingClientRect().height - this.queryToolbarsHeight();\n    } else {\n      this.viewHeight = Math.round(this.contentEl.getBoundingClientRect().width / Math.max(calendar.opt('aspectRatio'), .5));\n    }\n  };\n\n  CalendarComponent.prototype.queryToolbarsHeight = function () {\n    var height = 0;\n\n    if (this.header) {\n      height += computeHeightAndMargins(this.header.el);\n    }\n\n    if (this.footer) {\n      height += computeHeightAndMargins(this.footer.el);\n    }\n\n    return height;\n  }; // Height \"Freezing\"\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  CalendarComponent.prototype.freezeHeight = function () {\n    applyStyle(this.el, {\n      height: this.el.getBoundingClientRect().height,\n      overflow: 'hidden'\n    });\n  };\n\n  CalendarComponent.prototype.thawHeight = function () {\n    applyStyle(this.el, {\n      height: '',\n      overflow: ''\n    });\n  };\n\n  return CalendarComponent;\n}(Component); // Title and Date Formatting\n// -----------------------------------------------------------------------------------------------------------------\n// Computes what the title at the top of the calendar should be for this view\n\n\nfunction computeTitle(dateProfile, viewOptions) {\n  var range; // for views that span a large unit of time, show the proper interval, ignoring stray days before and after\n\n  if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {\n    range = dateProfile.currentRange;\n  } else {\n    // for day units or smaller, use the actual day range\n    range = dateProfile.activeRange;\n  }\n\n  return this.dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || computeTitleFormat(dateProfile), viewOptions.titleRangeSeparator), {\n    isEndExclusive: dateProfile.isRangeAllDay\n  });\n} // Generates the format string that should be used to generate the title for the current date range.\n// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\n\n\nfunction computeTitleFormat(dateProfile) {\n  var currentRangeUnit = dateProfile.currentRangeUnit;\n\n  if (currentRangeUnit === 'year') {\n    return {\n      year: 'numeric'\n    };\n  } else if (currentRangeUnit === 'month') {\n    return {\n      year: 'numeric',\n      month: 'long'\n    }; // like \"September 2014\"\n  } else {\n    var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);\n\n    if (days !== null && days > 1) {\n      // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n      return {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      };\n    } else {\n      // one day. longer, like \"September 9 2014\"\n      return {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      };\n    }\n  }\n} // Plugin\n// -----------------------------------------------------------------------------------------------------------------\n\n\nfunction buildViewPropTransformers(theClasses) {\n  return theClasses.map(function (theClass) {\n    return new theClass();\n  });\n}\n\nvar Interaction =\n/** @class */\nfunction () {\n  function Interaction(settings) {\n    this.component = settings.component;\n  }\n\n  Interaction.prototype.destroy = function () {};\n\n  return Interaction;\n}();\n\nfunction parseInteractionSettings(component, input) {\n  return {\n    component: component,\n    el: input.el,\n    useEventCenter: input.useEventCenter != null ? input.useEventCenter : true\n  };\n}\n\nfunction interactionSettingsToStore(settings) {\n  var _a;\n\n  return _a = {}, _a[settings.component.uid] = settings, _a;\n} // global state\n\n\nvar interactionSettingsStore = {};\n/*\nDetects when the user clicks on an event within a DateComponent\n*/\n\nvar EventClicking =\n/** @class */\nfunction (_super) {\n  __extends(EventClicking, _super);\n\n  function EventClicking(settings) {\n    var _this = _super.call(this, settings) || this;\n\n    _this.handleSegClick = function (ev, segEl) {\n      var component = _this.component;\n      var seg = getElSeg(segEl);\n\n      if (seg && // might be the <div> surrounding the more link\n      component.isValidSegDownEl(ev.target)) {\n        // our way to simulate a link click for elements that can't be <a> tags\n        // grab before trigger fired in case trigger trashes DOM thru rerendering\n        var hasUrlContainer = elementClosest(ev.target, '.fc-has-url');\n        var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';\n        component.publiclyTrigger('eventClick', [{\n          el: segEl,\n          event: new EventApi(component.calendar, seg.eventRange.def, seg.eventRange.instance),\n          jsEvent: ev,\n          view: component.view\n        }]);\n\n        if (url && !ev.defaultPrevented) {\n          window.location.href = url;\n        }\n      }\n    };\n\n    var component = settings.component;\n    _this.destroy = listenBySelector(component.el, 'click', component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegClick);\n    return _this;\n  }\n\n  return EventClicking;\n}(Interaction);\n/*\nTriggers events and adds/removes core classNames when the user's pointer\nenters/leaves event-elements of a component.\n*/\n\n\nvar EventHovering =\n/** @class */\nfunction (_super) {\n  __extends(EventHovering, _super);\n\n  function EventHovering(settings) {\n    var _this = _super.call(this, settings) || this; // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it\n\n\n    _this.handleEventElRemove = function (el) {\n      if (el === _this.currentSegEl) {\n        _this.handleSegLeave(null, _this.currentSegEl);\n      }\n    };\n\n    _this.handleSegEnter = function (ev, segEl) {\n      if (getElSeg(segEl)) {\n        // TODO: better way to make sure not hovering over more+ link or its wrapper\n        segEl.classList.add('fc-allow-mouse-resize');\n        _this.currentSegEl = segEl;\n\n        _this.triggerEvent('eventMouseEnter', ev, segEl);\n      }\n    };\n\n    _this.handleSegLeave = function (ev, segEl) {\n      if (_this.currentSegEl) {\n        segEl.classList.remove('fc-allow-mouse-resize');\n        _this.currentSegEl = null;\n\n        _this.triggerEvent('eventMouseLeave', ev, segEl);\n      }\n    };\n\n    var component = settings.component;\n    _this.removeHoverListeners = listenToHoverBySelector(component.el, component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegEnter, _this.handleSegLeave);\n    component.calendar.on('eventElRemove', _this.handleEventElRemove);\n    return _this;\n  }\n\n  EventHovering.prototype.destroy = function () {\n    this.removeHoverListeners();\n    this.component.calendar.off('eventElRemove', this.handleEventElRemove);\n  };\n\n  EventHovering.prototype.triggerEvent = function (publicEvName, ev, segEl) {\n    var component = this.component;\n    var seg = getElSeg(segEl);\n\n    if (!ev || component.isValidSegDownEl(ev.target)) {\n      component.publiclyTrigger(publicEvName, [{\n        el: segEl,\n        event: new EventApi(this.component.calendar, seg.eventRange.def, seg.eventRange.instance),\n        jsEvent: ev,\n        view: component.view\n      }]);\n    }\n  };\n\n  return EventHovering;\n}(Interaction);\n\nvar StandardTheme =\n/** @class */\nfunction (_super) {\n  __extends(StandardTheme, _super);\n\n  function StandardTheme() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return StandardTheme;\n}(Theme);\n\nStandardTheme.prototype.classes = {\n  widget: 'fc-unthemed',\n  widgetHeader: 'fc-widget-header',\n  widgetContent: 'fc-widget-content',\n  buttonGroup: 'fc-button-group',\n  button: 'fc-button fc-button-primary',\n  buttonActive: 'fc-button-active',\n  popoverHeader: 'fc-widget-header',\n  popoverContent: 'fc-widget-content',\n  // day grid\n  headerRow: 'fc-widget-header',\n  dayRow: 'fc-widget-content',\n  // list view\n  listView: 'fc-widget-content'\n};\nStandardTheme.prototype.baseIconClass = 'fc-icon';\nStandardTheme.prototype.iconClasses = {\n  close: 'fc-icon-x',\n  prev: 'fc-icon-chevron-left',\n  next: 'fc-icon-chevron-right',\n  prevYear: 'fc-icon-chevrons-left',\n  nextYear: 'fc-icon-chevrons-right'\n};\nStandardTheme.prototype.iconOverrideOption = 'buttonIcons';\nStandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';\nStandardTheme.prototype.iconOverridePrefix = 'fc-icon-';\n\nvar Calendar =\n/** @class */\nfunction () {\n  function Calendar(el, overrides) {\n    var _this = this;\n\n    this.parseRawLocales = memoize(parseRawLocales);\n    this.buildLocale = memoize(buildLocale);\n    this.buildDateEnv = memoize(buildDateEnv);\n    this.buildTheme = memoize(buildTheme);\n    this.buildEventUiSingleBase = memoize(this._buildEventUiSingleBase);\n    this.buildSelectionConfig = memoize(this._buildSelectionConfig);\n    this.buildEventUiBySource = memoizeOutput(buildEventUiBySource, isPropsEqual);\n    this.buildEventUiBases = memoize(buildEventUiBases);\n    this.interactionsStore = {};\n    this.actionQueue = [];\n    this.isReducing = false; // isDisplaying: boolean = false // installed in DOM? accepting renders?\n\n    this.needsRerender = false; // needs a render?\n\n    this.needsFullRerender = false;\n    this.isRendering = false; // currently in the executeRender function?\n\n    this.renderingPauseDepth = 0;\n    this.buildDelayedRerender = memoize(buildDelayedRerender);\n    this.afterSizingTriggers = {};\n    this.isViewUpdated = false;\n    this.isDatesUpdated = false;\n    this.isEventsUpdated = false;\n    this.el = el;\n    this.optionsManager = new OptionsManager(overrides || {});\n    this.pluginSystem = new PluginSystem(); // only do once. don't do in handleOptions. because can't remove plugins\n\n    this.addPluginInputs(this.optionsManager.computed.plugins || []);\n    this.handleOptions(this.optionsManager.computed);\n    this.publiclyTrigger('_init'); // for tests\n\n    this.hydrate();\n    this.calendarInteractions = this.pluginSystem.hooks.calendarInteractions.map(function (calendarInteractionClass) {\n      return new calendarInteractionClass(_this);\n    });\n  }\n\n  Calendar.prototype.addPluginInputs = function (pluginInputs) {\n    var pluginDefs = refinePluginDefs(pluginInputs);\n\n    for (var _i = 0, pluginDefs_1 = pluginDefs; _i < pluginDefs_1.length; _i++) {\n      var pluginDef = pluginDefs_1[_i];\n      this.pluginSystem.add(pluginDef);\n    }\n  };\n\n  Object.defineProperty(Calendar.prototype, \"view\", {\n    // public API\n    get: function get() {\n      return this.component ? this.component.view : null;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Public API for rendering\n  // -----------------------------------------------------------------------------------------------------------------\n\n  Calendar.prototype.render = function () {\n    if (!this.component) {\n      this.renderableEventStore = createEmptyEventStore();\n      this.bindHandlers();\n      this.executeRender();\n    } else {\n      this.requestRerender(true);\n    }\n  };\n\n  Calendar.prototype.destroy = function () {\n    if (this.component) {\n      this.unbindHandlers();\n      this.component.destroy(); // don't null-out. in case API needs access\n\n      this.component = null; // umm ???\n\n      for (var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++) {\n        var interaction = _a[_i];\n        interaction.destroy();\n      }\n\n      this.publiclyTrigger('_destroyed');\n    }\n  }; // Handlers\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.bindHandlers = function () {\n    var _this = this; // event delegation for nav links\n\n\n    this.removeNavLinkListener = listenBySelector(this.el, 'click', 'a[data-goto]', function (ev, anchorEl) {\n      var gotoOptions = anchorEl.getAttribute('data-goto');\n      gotoOptions = gotoOptions ? JSON.parse(gotoOptions) : {};\n      var dateEnv = _this.dateEnv;\n      var dateMarker = dateEnv.createMarker(gotoOptions.date);\n      var viewType = gotoOptions.type; // property like \"navLinkDayClick\". might be a string or a function\n\n      var customAction = _this.viewOpt('navLink' + capitaliseFirstLetter(viewType) + 'Click');\n\n      if (typeof customAction === 'function') {\n        customAction(dateEnv.toDate(dateMarker), ev);\n      } else {\n        if (typeof customAction === 'string') {\n          viewType = customAction;\n        }\n\n        _this.zoomTo(dateMarker, viewType);\n      }\n    });\n\n    if (this.opt('handleWindowResize')) {\n      window.addEventListener('resize', this.windowResizeProxy = debounce( // prevents rapid calls\n      this.windowResize.bind(this), this.opt('windowResizeDelay')));\n    }\n  };\n\n  Calendar.prototype.unbindHandlers = function () {\n    this.removeNavLinkListener();\n\n    if (this.windowResizeProxy) {\n      window.removeEventListener('resize', this.windowResizeProxy);\n      this.windowResizeProxy = null;\n    }\n  }; // Dispatcher\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.hydrate = function () {\n    var _this = this;\n\n    this.state = this.buildInitialState();\n    var rawSources = this.opt('eventSources') || [];\n    var singleRawSource = this.opt('events');\n    var sources = []; // parsed\n\n    if (singleRawSource) {\n      rawSources.unshift(singleRawSource);\n    }\n\n    for (var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++) {\n      var rawSource = rawSources_1[_i];\n      var source = parseEventSource(rawSource, this);\n\n      if (source) {\n        sources.push(source);\n      }\n    }\n\n    this.batchRendering(function () {\n      _this.dispatch({\n        type: 'INIT'\n      }); // pass in sources here?\n\n\n      _this.dispatch({\n        type: 'ADD_EVENT_SOURCES',\n        sources: sources\n      });\n\n      _this.dispatch({\n        type: 'SET_VIEW_TYPE',\n        viewType: _this.opt('defaultView') || _this.pluginSystem.hooks.defaultView\n      });\n    });\n  };\n\n  Calendar.prototype.buildInitialState = function () {\n    return {\n      viewType: null,\n      loadingLevel: 0,\n      eventSourceLoadingLevel: 0,\n      currentDate: this.getInitialDate(),\n      dateProfile: null,\n      eventSources: {},\n      eventStore: createEmptyEventStore(),\n      dateSelection: null,\n      eventSelection: '',\n      eventDrag: null,\n      eventResize: null\n    };\n  };\n\n  Calendar.prototype.dispatch = function (action) {\n    this.actionQueue.push(action);\n\n    if (!this.isReducing) {\n      this.isReducing = true;\n      var oldState = this.state;\n\n      while (this.actionQueue.length) {\n        this.state = this.reduce(this.state, this.actionQueue.shift(), this);\n      }\n\n      var newState = this.state;\n      this.isReducing = false;\n\n      if (!oldState.loadingLevel && newState.loadingLevel) {\n        this.publiclyTrigger('loading', [true]);\n      } else if (oldState.loadingLevel && !newState.loadingLevel) {\n        this.publiclyTrigger('loading', [false]);\n      }\n\n      var view = this.component && this.component.view;\n\n      if (oldState.eventStore !== newState.eventStore || this.needsFullRerender) {\n        if (oldState.eventStore) {\n          this.isEventsUpdated = true;\n        }\n      }\n\n      if (oldState.dateProfile !== newState.dateProfile || this.needsFullRerender) {\n        if (oldState.dateProfile && view) {\n          // why would view be null!?\n          this.publiclyTrigger('datesDestroy', [{\n            view: view,\n            el: view.el\n          }]);\n        }\n\n        this.isDatesUpdated = true;\n      }\n\n      if (oldState.viewType !== newState.viewType || this.needsFullRerender) {\n        if (oldState.viewType && view) {\n          // why would view be null!?\n          this.publiclyTrigger('viewSkeletonDestroy', [{\n            view: view,\n            el: view.el\n          }]);\n        }\n\n        this.isViewUpdated = true;\n      }\n\n      this.requestRerender();\n    }\n  };\n\n  Calendar.prototype.reduce = function (state, action, calendar) {\n    return reduce(state, action, calendar);\n  }; // Render Queue\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.requestRerender = function (needsFull) {\n    if (needsFull === void 0) {\n      needsFull = false;\n    }\n\n    this.needsRerender = true;\n    this.needsFullRerender = this.needsFullRerender || needsFull;\n    this.delayedRerender(); // will call a debounced-version of tryRerender\n  };\n\n  Calendar.prototype.tryRerender = function () {\n    if (this.component && // must be accepting renders\n    this.needsRerender && // indicates that a rerender was requested\n    !this.renderingPauseDepth && // not paused\n    !this.isRendering // not currently in the render loop\n    ) {\n        this.executeRender();\n      }\n  };\n\n  Calendar.prototype.batchRendering = function (func) {\n    this.renderingPauseDepth++;\n    func();\n    this.renderingPauseDepth--;\n\n    if (this.needsRerender) {\n      this.requestRerender();\n    }\n  }; // Rendering\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.executeRender = function () {\n    var needsFullRerender = this.needsFullRerender; // save before clearing\n    // clear these BEFORE the render so that new values will accumulate during render\n\n    this.needsRerender = false;\n    this.needsFullRerender = false;\n    this.isRendering = true;\n    this.renderComponent(needsFullRerender);\n    this.isRendering = false; // received a rerender request while rendering\n\n    if (this.needsRerender) {\n      this.delayedRerender();\n    }\n  };\n  /*\n  don't call this directly. use executeRender instead\n  */\n\n\n  Calendar.prototype.renderComponent = function (needsFull) {\n    var _a = this,\n        state = _a.state,\n        component = _a.component;\n\n    var viewType = state.viewType;\n    var viewSpec = this.viewSpecs[viewType];\n    var savedScroll = needsFull && component ? component.view.queryScroll() : null;\n\n    if (!viewSpec) {\n      throw new Error(\"View type \\\"\" + viewType + \"\\\" is not valid\");\n    } // if event sources are still loading and progressive rendering hasn't been enabled,\n    // keep rendering the last fully loaded set of events\n\n\n    var renderableEventStore = this.renderableEventStore = state.eventSourceLoadingLevel && !this.opt('progressiveEventRendering') ? this.renderableEventStore : state.eventStore;\n    var eventUiSingleBase = this.buildEventUiSingleBase(viewSpec.options);\n    var eventUiBySource = this.buildEventUiBySource(state.eventSources);\n    var eventUiBases = this.eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);\n\n    if (needsFull || !component) {\n      if (component) {\n        component.freezeHeight(); // next component will unfreeze it\n\n        component.destroy();\n      }\n\n      component = this.component = new CalendarComponent({\n        calendar: this,\n        view: null,\n        dateEnv: this.dateEnv,\n        theme: this.theme,\n        options: this.optionsManager.computed\n      }, this.el);\n      this.isViewUpdated = true;\n      this.isDatesUpdated = true;\n      this.isEventsUpdated = true;\n    }\n\n    component.receiveProps(_assign({}, state, {\n      viewSpec: viewSpec,\n      dateProfile: state.dateProfile,\n      dateProfileGenerator: this.dateProfileGenerators[viewType],\n      eventStore: renderableEventStore,\n      eventUiBases: eventUiBases,\n      dateSelection: state.dateSelection,\n      eventSelection: state.eventSelection,\n      eventDrag: state.eventDrag,\n      eventResize: state.eventResize\n    }));\n\n    if (savedScroll) {\n      component.view.applyScroll(savedScroll, false);\n    }\n\n    if (this.isViewUpdated) {\n      this.isViewUpdated = false;\n      this.publiclyTrigger('viewSkeletonRender', [{\n        view: component.view,\n        el: component.view.el\n      }]);\n    }\n\n    if (this.isDatesUpdated) {\n      this.isDatesUpdated = false;\n      this.publiclyTrigger('datesRender', [{\n        view: component.view,\n        el: component.view.el\n      }]);\n    }\n\n    if (this.isEventsUpdated) {\n      this.isEventsUpdated = false;\n    }\n\n    this.releaseAfterSizingTriggers();\n  }; // Options\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.setOption = function (name, val) {\n    var _a;\n\n    this.mutateOptions((_a = {}, _a[name] = val, _a), [], true);\n  };\n\n  Calendar.prototype.getOption = function (name) {\n    return this.optionsManager.computed[name];\n  };\n\n  Calendar.prototype.opt = function (name) {\n    return this.optionsManager.computed[name];\n  };\n\n  Calendar.prototype.viewOpt = function (name) {\n    return this.viewOpts()[name];\n  };\n\n  Calendar.prototype.viewOpts = function () {\n    return this.viewSpecs[this.state.viewType].options;\n  };\n  /*\n  handles option changes (like a diff)\n  */\n\n\n  Calendar.prototype.mutateOptions = function (updates, removals, isDynamic, deepEqual) {\n    var _this = this;\n\n    var changeHandlers = this.pluginSystem.hooks.optionChangeHandlers;\n    var normalUpdates = {};\n    var specialUpdates = {};\n    var oldDateEnv = this.dateEnv; // do this before handleOptions\n\n    var isTimeZoneDirty = false;\n    var isSizeDirty = false;\n    var anyDifficultOptions = Boolean(removals.length);\n\n    for (var name_1 in updates) {\n      if (changeHandlers[name_1]) {\n        specialUpdates[name_1] = updates[name_1];\n      } else {\n        normalUpdates[name_1] = updates[name_1];\n      }\n    }\n\n    for (var name_2 in normalUpdates) {\n      if (/^(height|contentHeight|aspectRatio)$/.test(name_2)) {\n        isSizeDirty = true;\n      } else if (/^(defaultDate|defaultView)$/.test(name_2)) ;else {\n        anyDifficultOptions = true;\n\n        if (name_2 === 'timeZone') {\n          isTimeZoneDirty = true;\n        }\n      }\n    }\n\n    this.optionsManager.mutate(normalUpdates, removals, isDynamic);\n\n    if (anyDifficultOptions) {\n      this.handleOptions(this.optionsManager.computed);\n      this.needsFullRerender = true;\n    }\n\n    this.batchRendering(function () {\n      if (anyDifficultOptions) {\n        if (isTimeZoneDirty) {\n          _this.dispatch({\n            type: 'CHANGE_TIMEZONE',\n            oldDateEnv: oldDateEnv\n          });\n        }\n        /* HACK\n        has the same effect as calling this.requestRerender(true)\n        but recomputes the state's dateProfile\n        */\n\n\n        _this.dispatch({\n          type: 'SET_VIEW_TYPE',\n          viewType: _this.state.viewType\n        });\n      } else if (isSizeDirty) {\n        _this.updateSize();\n      } // special updates\n\n\n      if (deepEqual) {\n        for (var name_3 in specialUpdates) {\n          changeHandlers[name_3](specialUpdates[name_3], _this, deepEqual);\n        }\n      }\n    });\n  };\n  /*\n  rebuilds things based off of a complete set of refined options\n  */\n\n\n  Calendar.prototype.handleOptions = function (options) {\n    var _this = this;\n\n    var pluginHooks = this.pluginSystem.hooks;\n    this.defaultAllDayEventDuration = createDuration(options.defaultAllDayEventDuration);\n    this.defaultTimedEventDuration = createDuration(options.defaultTimedEventDuration);\n    this.delayedRerender = this.buildDelayedRerender(options.rerenderDelay);\n    this.theme = this.buildTheme(options);\n    var available = this.parseRawLocales(options.locales);\n    this.availableRawLocales = available.map;\n    var locale = this.buildLocale(options.locale || available.defaultCode, available.map);\n    this.dateEnv = this.buildDateEnv(locale, options.timeZone, pluginHooks.namedTimeZonedImpl, options.firstDay, options.weekNumberCalculation, options.weekLabel, pluginHooks.cmdFormatter);\n    this.selectionConfig = this.buildSelectionConfig(options); // needs dateEnv. do after :(\n    // ineffecient to do every time?\n\n    this.viewSpecs = buildViewSpecs(pluginHooks.views, this.optionsManager); // ineffecient to do every time?\n\n    this.dateProfileGenerators = mapHash(this.viewSpecs, function (viewSpec) {\n      return new viewSpec.class.prototype.dateProfileGeneratorClass(viewSpec, _this);\n    });\n  };\n\n  Calendar.prototype.getAvailableLocaleCodes = function () {\n    return Object.keys(this.availableRawLocales);\n  };\n\n  Calendar.prototype._buildSelectionConfig = function (rawOpts) {\n    return processScopedUiProps('select', rawOpts, this);\n  };\n\n  Calendar.prototype._buildEventUiSingleBase = function (rawOpts) {\n    if (rawOpts.editable) {\n      // so 'editable' affected events\n      rawOpts = _assign({}, rawOpts, {\n        eventEditable: true\n      });\n    }\n\n    return processScopedUiProps('event', rawOpts, this);\n  }; // Trigger\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.hasPublicHandlers = function (name) {\n    return this.hasHandlers(name) || this.opt(name); // handler specified in options\n  };\n\n  Calendar.prototype.publiclyTrigger = function (name, args) {\n    var optHandler = this.opt(name);\n    this.triggerWith(name, this, args);\n\n    if (optHandler) {\n      return optHandler.apply(this, args);\n    }\n  };\n\n  Calendar.prototype.publiclyTriggerAfterSizing = function (name, args) {\n    var afterSizingTriggers = this.afterSizingTriggers;\n    (afterSizingTriggers[name] || (afterSizingTriggers[name] = [])).push(args);\n  };\n\n  Calendar.prototype.releaseAfterSizingTriggers = function () {\n    var afterSizingTriggers = this.afterSizingTriggers;\n\n    for (var name_4 in afterSizingTriggers) {\n      for (var _i = 0, _a = afterSizingTriggers[name_4]; _i < _a.length; _i++) {\n        var args = _a[_i];\n        this.publiclyTrigger(name_4, args);\n      }\n    }\n\n    this.afterSizingTriggers = {};\n  }; // View\n  // -----------------------------------------------------------------------------------------------------------------\n  // Returns a boolean about whether the view is okay to instantiate at some point\n\n\n  Calendar.prototype.isValidViewType = function (viewType) {\n    return Boolean(this.viewSpecs[viewType]);\n  };\n\n  Calendar.prototype.changeView = function (viewType, dateOrRange) {\n    var dateMarker = null;\n\n    if (dateOrRange) {\n      if (dateOrRange.start && dateOrRange.end) {\n        // a range\n        this.optionsManager.mutate({\n          visibleRange: dateOrRange\n        }, []); // will not rerender\n\n        this.handleOptions(this.optionsManager.computed); // ...but yuck\n      } else {\n        // a date\n        dateMarker = this.dateEnv.createMarker(dateOrRange); // just like gotoDate\n      }\n    }\n\n    this.unselect();\n    this.dispatch({\n      type: 'SET_VIEW_TYPE',\n      viewType: viewType,\n      dateMarker: dateMarker\n    });\n  }; // Forces navigation to a view for the given date.\n  // `viewType` can be a specific view name or a generic one like \"week\" or \"day\".\n  // needs to change\n\n\n  Calendar.prototype.zoomTo = function (dateMarker, viewType) {\n    var spec;\n    viewType = viewType || 'day'; // day is default zoom\n\n    spec = this.viewSpecs[viewType] || this.getUnitViewSpec(viewType);\n    this.unselect();\n\n    if (spec) {\n      this.dispatch({\n        type: 'SET_VIEW_TYPE',\n        viewType: spec.type,\n        dateMarker: dateMarker\n      });\n    } else {\n      this.dispatch({\n        type: 'SET_DATE',\n        dateMarker: dateMarker\n      });\n    }\n  }; // Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.\n  // Preference is given to views that have corresponding buttons.\n\n\n  Calendar.prototype.getUnitViewSpec = function (unit) {\n    var component = this.component;\n    var viewTypes = [];\n    var i;\n    var spec; // put views that have buttons first. there will be duplicates, but oh\n\n    if (component.header) {\n      viewTypes.push.apply(viewTypes, component.header.viewsWithButtons);\n    }\n\n    if (component.footer) {\n      viewTypes.push.apply(viewTypes, component.footer.viewsWithButtons);\n    }\n\n    for (var viewType in this.viewSpecs) {\n      viewTypes.push(viewType);\n    }\n\n    for (i = 0; i < viewTypes.length; i++) {\n      spec = this.viewSpecs[viewTypes[i]];\n\n      if (spec) {\n        if (spec.singleUnit === unit) {\n          return spec;\n        }\n      }\n    }\n  }; // Current Date\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.getInitialDate = function () {\n    var defaultDateInput = this.opt('defaultDate'); // compute the initial ambig-timezone date\n\n    if (defaultDateInput != null) {\n      return this.dateEnv.createMarker(defaultDateInput);\n    } else {\n      return this.getNow(); // getNow already returns unzoned\n    }\n  };\n\n  Calendar.prototype.prev = function () {\n    this.unselect();\n    this.dispatch({\n      type: 'PREV'\n    });\n  };\n\n  Calendar.prototype.next = function () {\n    this.unselect();\n    this.dispatch({\n      type: 'NEXT'\n    });\n  };\n\n  Calendar.prototype.prevYear = function () {\n    this.unselect();\n    this.dispatch({\n      type: 'SET_DATE',\n      dateMarker: this.dateEnv.addYears(this.state.currentDate, -1)\n    });\n  };\n\n  Calendar.prototype.nextYear = function () {\n    this.unselect();\n    this.dispatch({\n      type: 'SET_DATE',\n      dateMarker: this.dateEnv.addYears(this.state.currentDate, 1)\n    });\n  };\n\n  Calendar.prototype.today = function () {\n    this.unselect();\n    this.dispatch({\n      type: 'SET_DATE',\n      dateMarker: this.getNow()\n    });\n  };\n\n  Calendar.prototype.gotoDate = function (zonedDateInput) {\n    this.unselect();\n    this.dispatch({\n      type: 'SET_DATE',\n      dateMarker: this.dateEnv.createMarker(zonedDateInput)\n    });\n  };\n\n  Calendar.prototype.incrementDate = function (deltaInput) {\n    var delta = createDuration(deltaInput);\n\n    if (delta) {\n      // else, warn about invalid input?\n      this.unselect();\n      this.dispatch({\n        type: 'SET_DATE',\n        dateMarker: this.dateEnv.add(this.state.currentDate, delta)\n      });\n    }\n  }; // for external API\n\n\n  Calendar.prototype.getDate = function () {\n    return this.dateEnv.toDate(this.state.currentDate);\n  }; // Date Formatting Utils\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.formatDate = function (d, formatter) {\n    var dateEnv = this.dateEnv;\n    return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));\n  }; // `settings` is for formatter AND isEndExclusive\n\n\n  Calendar.prototype.formatRange = function (d0, d1, settings) {\n    var dateEnv = this.dateEnv;\n    return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings, this.opt('defaultRangeSeparator')), settings);\n  };\n\n  Calendar.prototype.formatIso = function (d, omitTime) {\n    var dateEnv = this.dateEnv;\n    return dateEnv.formatIso(dateEnv.createMarker(d), {\n      omitTime: omitTime\n    });\n  }; // Sizing\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.windowResize = function (ev) {\n    if (!this.isHandlingWindowResize && this.component && // why?\n    ev.target === window // not a jqui resize event\n    ) {\n        this.isHandlingWindowResize = true;\n        this.updateSize();\n        this.publiclyTrigger('windowResize', [this.view]);\n        this.isHandlingWindowResize = false;\n      }\n  };\n\n  Calendar.prototype.updateSize = function () {\n    if (this.component) {\n      // when?\n      this.component.updateSize(true);\n    }\n  }; // Component Registration\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.registerInteractiveComponent = function (component, settingsInput) {\n    var settings = parseInteractionSettings(component, settingsInput);\n    var DEFAULT_INTERACTIONS = [EventClicking, EventHovering];\n    var interactionClasses = DEFAULT_INTERACTIONS.concat(this.pluginSystem.hooks.componentInteractions);\n    var interactions = interactionClasses.map(function (interactionClass) {\n      return new interactionClass(settings);\n    });\n    this.interactionsStore[component.uid] = interactions;\n    interactionSettingsStore[component.uid] = settings;\n  };\n\n  Calendar.prototype.unregisterInteractiveComponent = function (component) {\n    for (var _i = 0, _a = this.interactionsStore[component.uid]; _i < _a.length; _i++) {\n      var listener = _a[_i];\n      listener.destroy();\n    }\n\n    delete this.interactionsStore[component.uid];\n    delete interactionSettingsStore[component.uid];\n  }; // Date Selection / Event Selection / DayClick\n  // -----------------------------------------------------------------------------------------------------------------\n  // this public method receives start/end dates in any format, with any timezone\n  // NOTE: args were changed from v3\n\n\n  Calendar.prototype.select = function (dateOrObj, endDate) {\n    var selectionInput;\n\n    if (endDate == null) {\n      if (dateOrObj.start != null) {\n        selectionInput = dateOrObj;\n      } else {\n        selectionInput = {\n          start: dateOrObj,\n          end: null\n        };\n      }\n    } else {\n      selectionInput = {\n        start: dateOrObj,\n        end: endDate\n      };\n    }\n\n    var selection = parseDateSpan(selectionInput, this.dateEnv, createDuration({\n      days: 1\n    }) // TODO: cache this?\n    );\n\n    if (selection) {\n      // throw parse error otherwise?\n      this.dispatch({\n        type: 'SELECT_DATES',\n        selection: selection\n      });\n      this.triggerDateSelect(selection);\n    }\n  }; // public method\n\n\n  Calendar.prototype.unselect = function (pev) {\n    if (this.state.dateSelection) {\n      this.dispatch({\n        type: 'UNSELECT_DATES'\n      });\n      this.triggerDateUnselect(pev);\n    }\n  };\n\n  Calendar.prototype.triggerDateSelect = function (selection, pev) {\n    var arg = _assign({}, this.buildDateSpanApi(selection), {\n      jsEvent: pev ? pev.origEvent : null,\n      view: this.view\n    });\n\n    this.publiclyTrigger('select', [arg]);\n  };\n\n  Calendar.prototype.triggerDateUnselect = function (pev) {\n    this.publiclyTrigger('unselect', [{\n      jsEvent: pev ? pev.origEvent : null,\n      view: this.view\n    }]);\n  }; // TODO: receive pev?\n\n\n  Calendar.prototype.triggerDateClick = function (dateSpan, dayEl, view, ev) {\n    var arg = _assign({}, this.buildDatePointApi(dateSpan), {\n      dayEl: dayEl,\n      jsEvent: ev,\n      // Is this always a mouse event? See #4655\n      view: view\n    });\n\n    this.publiclyTrigger('dateClick', [arg]);\n  };\n\n  Calendar.prototype.buildDatePointApi = function (dateSpan) {\n    var props = {};\n\n    for (var _i = 0, _a = this.pluginSystem.hooks.datePointTransforms; _i < _a.length; _i++) {\n      var transform = _a[_i];\n\n      _assign(props, transform(dateSpan, this));\n    }\n\n    _assign(props, buildDatePointApi(dateSpan, this.dateEnv));\n\n    return props;\n  };\n\n  Calendar.prototype.buildDateSpanApi = function (dateSpan) {\n    var props = {};\n\n    for (var _i = 0, _a = this.pluginSystem.hooks.dateSpanTransforms; _i < _a.length; _i++) {\n      var transform = _a[_i];\n\n      _assign(props, transform(dateSpan, this));\n    }\n\n    _assign(props, buildDateSpanApi(dateSpan, this.dateEnv));\n\n    return props;\n  }; // Date Utils\n  // -----------------------------------------------------------------------------------------------------------------\n  // Returns a DateMarker for the current date, as defined by the client's computer or from the `now` option\n\n\n  Calendar.prototype.getNow = function () {\n    var now = this.opt('now');\n\n    if (typeof now === 'function') {\n      now = now();\n    }\n\n    if (now == null) {\n      return this.dateEnv.createNowMarker();\n    }\n\n    return this.dateEnv.createMarker(now);\n  }; // Event-Date Utilities\n  // -----------------------------------------------------------------------------------------------------------------\n  // Given an event's allDay status and start date, return what its fallback end date should be.\n  // TODO: rename to computeDefaultEventEnd\n\n\n  Calendar.prototype.getDefaultEventEnd = function (allDay, marker) {\n    var end = marker;\n\n    if (allDay) {\n      end = startOfDay(end);\n      end = this.dateEnv.add(end, this.defaultAllDayEventDuration);\n    } else {\n      end = this.dateEnv.add(end, this.defaultTimedEventDuration);\n    }\n\n    return end;\n  }; // Public Events API\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.addEvent = function (eventInput, sourceInput) {\n    if (eventInput instanceof EventApi) {\n      var def = eventInput._def;\n      var instance = eventInput._instance; // not already present? don't want to add an old snapshot\n\n      if (!this.state.eventStore.defs[def.defId]) {\n        this.dispatch({\n          type: 'ADD_EVENTS',\n          eventStore: eventTupleToStore({\n            def: def,\n            instance: instance\n          }) // TODO: better util for two args?\n\n        });\n      }\n\n      return eventInput;\n    }\n\n    var sourceId;\n\n    if (sourceInput instanceof EventSourceApi) {\n      sourceId = sourceInput.internalEventSource.sourceId;\n    } else if (sourceInput != null) {\n      var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function\n\n      if (!sourceApi) {\n        console.warn('Could not find an event source with ID \"' + sourceInput + '\"'); // TODO: test\n\n        return null;\n      } else {\n        sourceId = sourceApi.internalEventSource.sourceId;\n      }\n    }\n\n    var tuple = parseEvent(eventInput, sourceId, this);\n\n    if (tuple) {\n      this.dispatch({\n        type: 'ADD_EVENTS',\n        eventStore: eventTupleToStore(tuple)\n      });\n      return new EventApi(this, tuple.def, tuple.def.recurringDef ? null : tuple.instance);\n    }\n\n    return null;\n  }; // TODO: optimize\n\n\n  Calendar.prototype.getEventById = function (id) {\n    var _a = this.state.eventStore,\n        defs = _a.defs,\n        instances = _a.instances;\n    id = String(id);\n\n    for (var defId in defs) {\n      var def = defs[defId];\n\n      if (def.publicId === id) {\n        if (def.recurringDef) {\n          return new EventApi(this, def, null);\n        } else {\n          for (var instanceId in instances) {\n            var instance = instances[instanceId];\n\n            if (instance.defId === def.defId) {\n              return new EventApi(this, def, instance);\n            }\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  Calendar.prototype.getEvents = function () {\n    var _a = this.state.eventStore,\n        defs = _a.defs,\n        instances = _a.instances;\n    var eventApis = [];\n\n    for (var id in instances) {\n      var instance = instances[id];\n      var def = defs[instance.defId];\n      eventApis.push(new EventApi(this, def, instance));\n    }\n\n    return eventApis;\n  };\n\n  Calendar.prototype.removeAllEvents = function () {\n    this.dispatch({\n      type: 'REMOVE_ALL_EVENTS'\n    });\n  };\n\n  Calendar.prototype.rerenderEvents = function () {\n    this.dispatch({\n      type: 'RESET_EVENTS'\n    });\n  }; // Public Event Sources API\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.getEventSources = function () {\n    var sourceHash = this.state.eventSources;\n    var sourceApis = [];\n\n    for (var internalId in sourceHash) {\n      sourceApis.push(new EventSourceApi(this, sourceHash[internalId]));\n    }\n\n    return sourceApis;\n  };\n\n  Calendar.prototype.getEventSourceById = function (id) {\n    var sourceHash = this.state.eventSources;\n    id = String(id);\n\n    for (var sourceId in sourceHash) {\n      if (sourceHash[sourceId].publicId === id) {\n        return new EventSourceApi(this, sourceHash[sourceId]);\n      }\n    }\n\n    return null;\n  };\n\n  Calendar.prototype.addEventSource = function (sourceInput) {\n    if (sourceInput instanceof EventSourceApi) {\n      // not already present? don't want to add an old snapshot\n      if (!this.state.eventSources[sourceInput.internalEventSource.sourceId]) {\n        this.dispatch({\n          type: 'ADD_EVENT_SOURCES',\n          sources: [sourceInput.internalEventSource]\n        });\n      }\n\n      return sourceInput;\n    }\n\n    var eventSource = parseEventSource(sourceInput, this);\n\n    if (eventSource) {\n      // TODO: error otherwise?\n      this.dispatch({\n        type: 'ADD_EVENT_SOURCES',\n        sources: [eventSource]\n      });\n      return new EventSourceApi(this, eventSource);\n    }\n\n    return null;\n  };\n\n  Calendar.prototype.removeAllEventSources = function () {\n    this.dispatch({\n      type: 'REMOVE_ALL_EVENT_SOURCES'\n    });\n  };\n\n  Calendar.prototype.refetchEvents = function () {\n    this.dispatch({\n      type: 'FETCH_EVENT_SOURCES'\n    });\n  }; // Scroll\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  Calendar.prototype.scrollToTime = function (timeInput) {\n    var duration = createDuration(timeInput);\n\n    if (duration) {\n      this.component.view.scrollToDuration(duration);\n    }\n  };\n\n  return Calendar;\n}();\n\nEmitterMixin.mixInto(Calendar); // for memoizers\n// -----------------------------------------------------------------------------------------------------------------\n\nfunction buildDateEnv(locale, timeZone, namedTimeZoneImpl, firstDay, weekNumberCalculation, weekLabel, cmdFormatter) {\n  return new DateEnv({\n    calendarSystem: 'gregory',\n    timeZone: timeZone,\n    namedTimeZoneImpl: namedTimeZoneImpl,\n    locale: locale,\n    weekNumberCalculation: weekNumberCalculation,\n    firstDay: firstDay,\n    weekLabel: weekLabel,\n    cmdFormatter: cmdFormatter\n  });\n}\n\nfunction buildTheme(calendarOptions) {\n  var themeClass = this.pluginSystem.hooks.themeClasses[calendarOptions.themeSystem] || StandardTheme;\n  return new themeClass(calendarOptions);\n}\n\nfunction buildDelayedRerender(wait) {\n  var func = this.tryRerender.bind(this);\n\n  if (wait != null) {\n    func = debounce(func, wait);\n  }\n\n  return func;\n}\n\nfunction buildEventUiBySource(eventSources) {\n  return mapHash(eventSources, function (eventSource) {\n    return eventSource.ui;\n  });\n}\n\nfunction buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {\n  var eventUiBases = {\n    '': eventUiSingleBase\n  };\n\n  for (var defId in eventDefs) {\n    var def = eventDefs[defId];\n\n    if (def.sourceId && eventUiBySource[def.sourceId]) {\n      eventUiBases[defId] = eventUiBySource[def.sourceId];\n    }\n  }\n\n  return eventUiBases;\n}\n\nvar View =\n/** @class */\nfunction (_super) {\n  __extends(View, _super);\n\n  function View(context, viewSpec, dateProfileGenerator, parentEl) {\n    var _this = _super.call(this, context, createElement('div', {\n      className: 'fc-view fc-' + viewSpec.type + '-view'\n    }), true // isView (HACK)\n    ) || this;\n\n    _this.renderDatesMem = memoizeRendering(_this.renderDatesWrap, _this.unrenderDatesWrap);\n    _this.renderBusinessHoursMem = memoizeRendering(_this.renderBusinessHours, _this.unrenderBusinessHours, [_this.renderDatesMem]);\n    _this.renderDateSelectionMem = memoizeRendering(_this.renderDateSelectionWrap, _this.unrenderDateSelectionWrap, [_this.renderDatesMem]);\n    _this.renderEventsMem = memoizeRendering(_this.renderEvents, _this.unrenderEvents, [_this.renderDatesMem]);\n    _this.renderEventSelectionMem = memoizeRendering(_this.renderEventSelectionWrap, _this.unrenderEventSelectionWrap, [_this.renderEventsMem]);\n    _this.renderEventDragMem = memoizeRendering(_this.renderEventDragWrap, _this.unrenderEventDragWrap, [_this.renderDatesMem]);\n    _this.renderEventResizeMem = memoizeRendering(_this.renderEventResizeWrap, _this.unrenderEventResizeWrap, [_this.renderDatesMem]);\n    _this.viewSpec = viewSpec;\n    _this.dateProfileGenerator = dateProfileGenerator;\n    _this.type = viewSpec.type;\n    _this.eventOrderSpecs = parseFieldSpecs(_this.opt('eventOrder'));\n    _this.nextDayThreshold = createDuration(_this.opt('nextDayThreshold'));\n    parentEl.appendChild(_this.el);\n\n    _this.initialize();\n\n    return _this;\n  }\n\n  View.prototype.initialize = function () {};\n\n  Object.defineProperty(View.prototype, \"activeStart\", {\n    // Date Setting/Unsetting\n    // -----------------------------------------------------------------------------------------------------------------\n    get: function get() {\n      return this.dateEnv.toDate(this.props.dateProfile.activeRange.start);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(View.prototype, \"activeEnd\", {\n    get: function get() {\n      return this.dateEnv.toDate(this.props.dateProfile.activeRange.end);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(View.prototype, \"currentStart\", {\n    get: function get() {\n      return this.dateEnv.toDate(this.props.dateProfile.currentRange.start);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(View.prototype, \"currentEnd\", {\n    get: function get() {\n      return this.dateEnv.toDate(this.props.dateProfile.currentRange.end);\n    },\n    enumerable: true,\n    configurable: true\n  }); // General Rendering\n  // -----------------------------------------------------------------------------------------------------------------\n\n  View.prototype.render = function (props) {\n    this.renderDatesMem(props.dateProfile);\n    this.renderBusinessHoursMem(props.businessHours);\n    this.renderDateSelectionMem(props.dateSelection);\n    this.renderEventsMem(props.eventStore);\n    this.renderEventSelectionMem(props.eventSelection);\n    this.renderEventDragMem(props.eventDrag);\n    this.renderEventResizeMem(props.eventResize);\n  };\n\n  View.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.renderDatesMem.unrender(); // should unrender everything else\n  }; // Sizing\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  View.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n    var calendar = this.calendar;\n\n    if (isResize || // HACKS...\n    calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated) {\n      // sort of the catch-all sizing\n      // anything that might cause dimension changes\n      this.updateBaseSize(isResize, viewHeight, isAuto);\n    }\n  };\n\n  View.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {}; // Date Rendering\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  View.prototype.renderDatesWrap = function (dateProfile) {\n    this.renderDates(dateProfile);\n    this.addScroll({\n      duration: createDuration(this.opt('scrollTime'))\n    });\n    this.startNowIndicator(dateProfile); // shouldn't render yet because updateSize will be called soon\n  };\n\n  View.prototype.unrenderDatesWrap = function () {\n    this.stopNowIndicator();\n    this.unrenderDates();\n  };\n\n  View.prototype.renderDates = function (dateProfile) {};\n\n  View.prototype.unrenderDates = function () {}; // Business Hours\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  View.prototype.renderBusinessHours = function (businessHours) {};\n\n  View.prototype.unrenderBusinessHours = function () {}; // Date Selection\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  View.prototype.renderDateSelectionWrap = function (selection) {\n    if (selection) {\n      this.renderDateSelection(selection);\n    }\n  };\n\n  View.prototype.unrenderDateSelectionWrap = function (selection) {\n    if (selection) {\n      this.unrenderDateSelection(selection);\n    }\n  };\n\n  View.prototype.renderDateSelection = function (selection) {};\n\n  View.prototype.unrenderDateSelection = function (selection) {}; // Event Rendering\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  View.prototype.renderEvents = function (eventStore) {};\n\n  View.prototype.unrenderEvents = function () {}; // util for subclasses\n\n\n  View.prototype.sliceEvents = function (eventStore, allDay) {\n    var props = this.props;\n    return sliceEventStore(eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? this.nextDayThreshold : null).fg;\n  };\n\n  View.prototype.computeEventDraggable = function (eventDef, eventUi) {\n    var transformers = this.calendar.pluginSystem.hooks.isDraggableTransformers;\n    var val = eventUi.startEditable;\n\n    for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {\n      var transformer = transformers_1[_i];\n      val = transformer(val, eventDef, eventUi, this);\n    }\n\n    return val;\n  };\n\n  View.prototype.computeEventStartResizable = function (eventDef, eventUi) {\n    return eventUi.durationEditable && this.opt('eventResizableFromStart');\n  };\n\n  View.prototype.computeEventEndResizable = function (eventDef, eventUi) {\n    return eventUi.durationEditable;\n  }; // Event Selection\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  View.prototype.renderEventSelectionWrap = function (instanceId) {\n    if (instanceId) {\n      this.renderEventSelection(instanceId);\n    }\n  };\n\n  View.prototype.unrenderEventSelectionWrap = function (instanceId) {\n    if (instanceId) {\n      this.unrenderEventSelection(instanceId);\n    }\n  };\n\n  View.prototype.renderEventSelection = function (instanceId) {};\n\n  View.prototype.unrenderEventSelection = function (instanceId) {}; // Event Drag\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  View.prototype.renderEventDragWrap = function (state) {\n    if (state) {\n      this.renderEventDrag(state);\n    }\n  };\n\n  View.prototype.unrenderEventDragWrap = function (state) {\n    if (state) {\n      this.unrenderEventDrag(state);\n    }\n  };\n\n  View.prototype.renderEventDrag = function (state) {};\n\n  View.prototype.unrenderEventDrag = function (state) {}; // Event Resize\n  // -----------------------------------------------------------------------------------------------------------------\n\n\n  View.prototype.renderEventResizeWrap = function (state) {\n    if (state) {\n      this.renderEventResize(state);\n    }\n  };\n\n  View.prototype.unrenderEventResizeWrap = function (state) {\n    if (state) {\n      this.unrenderEventResize(state);\n    }\n  };\n\n  View.prototype.renderEventResize = function (state) {};\n\n  View.prototype.unrenderEventResize = function (state) {};\n  /* Now Indicator\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Immediately render the current time indicator and begins re-rendering it at an interval,\n  // which is defined by this.getNowIndicatorUnit().\n  // TODO: somehow do this for the current whole day's background too\n\n\n  View.prototype.startNowIndicator = function (dateProfile) {\n    var _this = this;\n\n    var dateEnv = this.dateEnv;\n    var unit;\n    var update;\n    var delay; // ms wait value\n\n    if (this.opt('nowIndicator')) {\n      unit = this.getNowIndicatorUnit(dateProfile);\n\n      if (unit) {\n        update = this.updateNowIndicator.bind(this);\n        this.initialNowDate = this.calendar.getNow();\n        this.initialNowQueriedMs = new Date().valueOf(); // wait until the beginning of the next interval\n\n        delay = dateEnv.add(dateEnv.startOf(this.initialNowDate, unit), createDuration(1, unit)).valueOf() - this.initialNowDate.valueOf(); // TODO: maybe always use setTimeout, waiting until start of next unit\n\n        this.nowIndicatorTimeoutID = setTimeout(function () {\n          _this.nowIndicatorTimeoutID = null;\n          update();\n\n          if (unit === 'second') {\n            delay = 1000; // every second\n          } else {\n            delay = 1000 * 60; // otherwise, every minute\n          }\n\n          _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval\n        }, delay);\n      } // rendering will be initiated in updateSize\n\n    }\n  }; // rerenders the now indicator, computing the new current time from the amount of time that has passed\n  // since the initial getNow call.\n\n\n  View.prototype.updateNowIndicator = function () {\n    if (this.props.dateProfile && // a way to determine if dates were rendered yet\n    this.initialNowDate // activated before?\n    ) {\n        this.unrenderNowIndicator(); // won't unrender if unnecessary\n\n        this.renderNowIndicator(addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs));\n        this.isNowIndicatorRendered = true;\n      }\n  }; // Immediately unrenders the view's current time indicator and stops any re-rendering timers.\n  // Won't cause side effects if indicator isn't rendered.\n\n\n  View.prototype.stopNowIndicator = function () {\n    if (this.isNowIndicatorRendered) {\n      if (this.nowIndicatorTimeoutID) {\n        clearTimeout(this.nowIndicatorTimeoutID);\n        this.nowIndicatorTimeoutID = null;\n      }\n\n      if (this.nowIndicatorIntervalID) {\n        clearInterval(this.nowIndicatorIntervalID);\n        this.nowIndicatorIntervalID = null;\n      }\n\n      this.unrenderNowIndicator();\n      this.isNowIndicatorRendered = false;\n    }\n  };\n\n  View.prototype.getNowIndicatorUnit = function (dateProfile) {// subclasses should implement\n  }; // Renders a current time indicator at the given datetime\n\n\n  View.prototype.renderNowIndicator = function (date) {// SUBCLASSES MUST PASS TO CHILDREN!\n  }; // Undoes the rendering actions from renderNowIndicator\n\n\n  View.prototype.unrenderNowIndicator = function () {// SUBCLASSES MUST PASS TO CHILDREN!\n  };\n  /* Scroller\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  View.prototype.addScroll = function (scroll) {\n    var queuedScroll = this.queuedScroll || (this.queuedScroll = {});\n\n    _assign(queuedScroll, scroll);\n  };\n\n  View.prototype.popScroll = function (isResize) {\n    this.applyQueuedScroll(isResize);\n    this.queuedScroll = null;\n  };\n\n  View.prototype.applyQueuedScroll = function (isResize) {\n    this.applyScroll(this.queuedScroll || {}, isResize);\n  };\n\n  View.prototype.queryScroll = function () {\n    var scroll = {};\n\n    if (this.props.dateProfile) {\n      // dates rendered yet?\n      _assign(scroll, this.queryDateScroll());\n    }\n\n    return scroll;\n  };\n\n  View.prototype.applyScroll = function (scroll, isResize) {\n    var duration = scroll.duration;\n\n    if (duration != null) {\n      delete scroll.duration;\n\n      if (this.props.dateProfile) {\n        // dates rendered yet?\n        _assign(scroll, this.computeDateScroll(duration));\n      }\n    }\n\n    if (this.props.dateProfile) {\n      // dates rendered yet?\n      this.applyDateScroll(scroll);\n    }\n  };\n\n  View.prototype.computeDateScroll = function (duration) {\n    return {}; // subclasses must implement\n  };\n\n  View.prototype.queryDateScroll = function () {\n    return {}; // subclasses must implement\n  };\n\n  View.prototype.applyDateScroll = function (scroll) {// subclasses must implement\n  }; // for API\n\n\n  View.prototype.scrollToDuration = function (duration) {\n    this.applyScroll({\n      duration: duration\n    }, false);\n  };\n\n  return View;\n}(DateComponent);\n\nEmitterMixin.mixInto(View);\nView.prototype.usesMinMaxTime = false;\nView.prototype.dateProfileGeneratorClass = DateProfileGenerator;\n\nvar FgEventRenderer =\n/** @class */\nfunction () {\n  function FgEventRenderer(context) {\n    this.segs = [];\n    this.isSizeDirty = false;\n    this.context = context;\n  }\n\n  FgEventRenderer.prototype.renderSegs = function (segs, mirrorInfo) {\n    this.rangeUpdated(); // called too frequently :(\n    // render an `.el` on each seg\n    // returns a subset of the segs. segs that were actually rendered\n\n    segs = this.renderSegEls(segs, mirrorInfo);\n    this.segs = segs;\n    this.attachSegs(segs, mirrorInfo);\n    this.isSizeDirty = true;\n    this.context.view.triggerRenderedSegs(this.segs, Boolean(mirrorInfo));\n  };\n\n  FgEventRenderer.prototype.unrender = function (_segs, mirrorInfo) {\n    this.context.view.triggerWillRemoveSegs(this.segs, Boolean(mirrorInfo));\n    this.detachSegs(this.segs);\n    this.segs = [];\n  }; // Updates values that rely on options and also relate to range\n\n\n  FgEventRenderer.prototype.rangeUpdated = function () {\n    var options = this.context.options;\n    var displayEventTime;\n    var displayEventEnd;\n    this.eventTimeFormat = createFormatter(options.eventTimeFormat || this.computeEventTimeFormat(), options.defaultRangeSeparator);\n    displayEventTime = options.displayEventTime;\n\n    if (displayEventTime == null) {\n      displayEventTime = this.computeDisplayEventTime(); // might be based off of range\n    }\n\n    displayEventEnd = options.displayEventEnd;\n\n    if (displayEventEnd == null) {\n      displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range\n    }\n\n    this.displayEventTime = displayEventTime;\n    this.displayEventEnd = displayEventEnd;\n  }; // Renders and assigns an `el` property for each foreground event segment.\n  // Only returns segments that successfully rendered.\n\n\n  FgEventRenderer.prototype.renderSegEls = function (segs, mirrorInfo) {\n    var html = '';\n    var i;\n\n    if (segs.length) {\n      // don't build an empty html string\n      // build a large concatenation of event segment HTML\n      for (i = 0; i < segs.length; i++) {\n        html += this.renderSegHtml(segs[i], mirrorInfo);\n      } // Grab individual elements from the combined HTML string. Use each as the default rendering.\n      // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.\n\n\n      htmlToElements(html).forEach(function (el, i) {\n        var seg = segs[i];\n\n        if (el) {\n          seg.el = el;\n        }\n      });\n      segs = filterSegsViaEls(this.context.view, segs, Boolean(mirrorInfo));\n    }\n\n    return segs;\n  }; // Generic utility for generating the HTML classNames for an event segment's element\n\n\n  FgEventRenderer.prototype.getSegClasses = function (seg, isDraggable, isResizable, mirrorInfo) {\n    var classes = ['fc-event', seg.isStart ? 'fc-start' : 'fc-not-start', seg.isEnd ? 'fc-end' : 'fc-not-end'].concat(seg.eventRange.ui.classNames);\n\n    if (isDraggable) {\n      classes.push('fc-draggable');\n    }\n\n    if (isResizable) {\n      classes.push('fc-resizable');\n    }\n\n    if (mirrorInfo) {\n      classes.push('fc-mirror');\n\n      if (mirrorInfo.isDragging) {\n        classes.push('fc-dragging');\n      }\n\n      if (mirrorInfo.isResizing) {\n        classes.push('fc-resizing');\n      }\n    }\n\n    return classes;\n  }; // Compute the text that should be displayed on an event's element.\n  // `range` can be the Event object itself, or something range-like, with at least a `start`.\n  // If event times are disabled, or the event has no time, will return a blank string.\n  // If not specified, formatter will default to the eventTimeFormat setting,\n  // and displayEnd will default to the displayEventEnd setting.\n\n\n  FgEventRenderer.prototype.getTimeText = function (eventRange, formatter, displayEnd) {\n    var def = eventRange.def,\n        instance = eventRange.instance;\n    return this._getTimeText(instance.range.start, def.hasEnd ? instance.range.end : null, def.allDay, formatter, displayEnd, instance.forcedStartTzo, instance.forcedEndTzo);\n  };\n\n  FgEventRenderer.prototype._getTimeText = function (start, end, allDay, formatter, displayEnd, forcedStartTzo, forcedEndTzo) {\n    var dateEnv = this.context.dateEnv;\n\n    if (formatter == null) {\n      formatter = this.eventTimeFormat;\n    }\n\n    if (displayEnd == null) {\n      displayEnd = this.displayEventEnd;\n    }\n\n    if (this.displayEventTime && !allDay) {\n      if (displayEnd && end) {\n        return dateEnv.formatRange(start, end, formatter, {\n          forcedStartTzo: forcedStartTzo,\n          forcedEndTzo: forcedEndTzo\n        });\n      } else {\n        return dateEnv.format(start, formatter, {\n          forcedTzo: forcedStartTzo\n        });\n      }\n    }\n\n    return '';\n  };\n\n  FgEventRenderer.prototype.computeEventTimeFormat = function () {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      omitZeroMinute: true\n    };\n  };\n\n  FgEventRenderer.prototype.computeDisplayEventTime = function () {\n    return true;\n  };\n\n  FgEventRenderer.prototype.computeDisplayEventEnd = function () {\n    return true;\n  }; // Utility for generating event skin-related CSS properties\n\n\n  FgEventRenderer.prototype.getSkinCss = function (ui) {\n    return {\n      'background-color': ui.backgroundColor,\n      'border-color': ui.borderColor,\n      color: ui.textColor\n    };\n  };\n\n  FgEventRenderer.prototype.sortEventSegs = function (segs) {\n    var specs = this.context.view.eventOrderSpecs;\n    var objs = segs.map(buildSegCompareObj);\n    objs.sort(function (obj0, obj1) {\n      return compareByFieldSpecs(obj0, obj1, specs);\n    });\n    return objs.map(function (c) {\n      return c._seg;\n    });\n  };\n\n  FgEventRenderer.prototype.computeSizes = function (force) {\n    if (force || this.isSizeDirty) {\n      this.computeSegSizes(this.segs);\n    }\n  };\n\n  FgEventRenderer.prototype.assignSizes = function (force) {\n    if (force || this.isSizeDirty) {\n      this.assignSegSizes(this.segs);\n      this.isSizeDirty = false;\n    }\n  };\n\n  FgEventRenderer.prototype.computeSegSizes = function (segs) {};\n\n  FgEventRenderer.prototype.assignSegSizes = function (segs) {}; // Manipulation on rendered segs\n\n\n  FgEventRenderer.prototype.hideByHash = function (hash) {\n    if (hash) {\n      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n        var seg = _a[_i];\n\n        if (hash[seg.eventRange.instance.instanceId]) {\n          seg.el.style.visibility = 'hidden';\n        }\n      }\n    }\n  };\n\n  FgEventRenderer.prototype.showByHash = function (hash) {\n    if (hash) {\n      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n        var seg = _a[_i];\n\n        if (hash[seg.eventRange.instance.instanceId]) {\n          seg.el.style.visibility = '';\n        }\n      }\n    }\n  };\n\n  FgEventRenderer.prototype.selectByInstanceId = function (instanceId) {\n    if (instanceId) {\n      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n        var seg = _a[_i];\n        var eventInstance = seg.eventRange.instance;\n\n        if (eventInstance && eventInstance.instanceId === instanceId && seg.el // necessary?\n        ) {\n            seg.el.classList.add('fc-selected');\n          }\n      }\n    }\n  };\n\n  FgEventRenderer.prototype.unselectByInstanceId = function (instanceId) {\n    if (instanceId) {\n      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n        var seg = _a[_i];\n\n        if (seg.el) {\n          // necessary?\n          seg.el.classList.remove('fc-selected');\n        }\n      }\n    }\n  };\n\n  return FgEventRenderer;\n}(); // returns a object with all primitive props that can be compared\n\n\nfunction buildSegCompareObj(seg) {\n  var eventDef = seg.eventRange.def;\n  var range = seg.eventRange.instance.range;\n  var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events\n\n  var end = range.end ? range.end.valueOf() : 0; // \"\n\n  return _assign({}, eventDef.extendedProps, eventDef, {\n    id: eventDef.publicId,\n    start: start,\n    end: end,\n    duration: end - start,\n    allDay: Number(eventDef.allDay),\n    _seg: seg // for later retrieval\n\n  });\n}\n\nvar FillRenderer =\n/** @class */\nfunction () {\n  function FillRenderer(context) {\n    this.fillSegTag = 'div';\n    this.dirtySizeFlags = {};\n    this.context = context;\n    this.containerElsByType = {};\n    this.segsByType = {};\n  }\n\n  FillRenderer.prototype.getSegsByType = function (type) {\n    return this.segsByType[type] || [];\n  };\n\n  FillRenderer.prototype.renderSegs = function (type, segs) {\n    var _a;\n\n    var renderedSegs = this.renderSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs\n\n    var containerEls = this.attachSegs(type, renderedSegs);\n\n    if (containerEls) {\n      (_a = this.containerElsByType[type] || (this.containerElsByType[type] = [])).push.apply(_a, containerEls);\n    }\n\n    this.segsByType[type] = renderedSegs;\n\n    if (type === 'bgEvent') {\n      this.context.view.triggerRenderedSegs(renderedSegs, false); // isMirror=false\n    }\n\n    this.dirtySizeFlags[type] = true;\n  }; // Unrenders a specific type of fill that is currently rendered on the grid\n\n\n  FillRenderer.prototype.unrender = function (type) {\n    var segs = this.segsByType[type];\n\n    if (segs) {\n      if (type === 'bgEvent') {\n        this.context.view.triggerWillRemoveSegs(segs, false); // isMirror=false\n      }\n\n      this.detachSegs(type, segs);\n    }\n  }; // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.\n  // Only returns segments that successfully rendered.\n\n\n  FillRenderer.prototype.renderSegEls = function (type, segs) {\n    var _this = this;\n\n    var html = '';\n    var i;\n\n    if (segs.length) {\n      // build a large concatenation of segment HTML\n      for (i = 0; i < segs.length; i++) {\n        html += this.renderSegHtml(type, segs[i]);\n      } // Grab individual elements from the combined HTML string. Use each as the default rendering.\n      // Then, compute the 'el' for each segment.\n\n\n      htmlToElements(html).forEach(function (el, i) {\n        var seg = segs[i];\n\n        if (el) {\n          seg.el = el;\n        }\n      });\n\n      if (type === 'bgEvent') {\n        segs = filterSegsViaEls(this.context.view, segs, false // isMirror. background events can never be mirror elements\n        );\n      } // correct element type? (would be bad if a non-TD were inserted into a table for example)\n\n\n      segs = segs.filter(function (seg) {\n        return elementMatches(seg.el, _this.fillSegTag);\n      });\n    }\n\n    return segs;\n  }; // Builds the HTML needed for one fill segment. Generic enough to work with different types.\n\n\n  FillRenderer.prototype.renderSegHtml = function (type, seg) {\n    var css = null;\n    var classNames = [];\n\n    if (type !== 'highlight' && type !== 'businessHours') {\n      css = {\n        'background-color': seg.eventRange.ui.backgroundColor\n      };\n    }\n\n    if (type !== 'highlight') {\n      classNames = classNames.concat(seg.eventRange.ui.classNames);\n    }\n\n    if (type === 'businessHours') {\n      classNames.push('fc-bgevent');\n    } else {\n      classNames.push('fc-' + type.toLowerCase());\n    }\n\n    return '<' + this.fillSegTag + (classNames.length ? ' class=\"' + classNames.join(' ') + '\"' : '') + (css ? ' style=\"' + cssToStr(css) + '\"' : '') + '></' + this.fillSegTag + '>';\n  };\n\n  FillRenderer.prototype.detachSegs = function (type, segs) {\n    var containerEls = this.containerElsByType[type];\n\n    if (containerEls) {\n      containerEls.forEach(removeElement);\n      delete this.containerElsByType[type];\n    }\n  };\n\n  FillRenderer.prototype.computeSizes = function (force) {\n    for (var type in this.segsByType) {\n      if (force || this.dirtySizeFlags[type]) {\n        this.computeSegSizes(this.segsByType[type]);\n      }\n    }\n  };\n\n  FillRenderer.prototype.assignSizes = function (force) {\n    for (var type in this.segsByType) {\n      if (force || this.dirtySizeFlags[type]) {\n        this.assignSegSizes(this.segsByType[type]);\n      }\n    }\n\n    this.dirtySizeFlags = {};\n  };\n\n  FillRenderer.prototype.computeSegSizes = function (segs) {};\n\n  FillRenderer.prototype.assignSegSizes = function (segs) {};\n\n  return FillRenderer;\n}();\n\nvar NamedTimeZoneImpl =\n/** @class */\nfunction () {\n  function NamedTimeZoneImpl(timeZoneName) {\n    this.timeZoneName = timeZoneName;\n  }\n\n  return NamedTimeZoneImpl;\n}();\n/*\nAn abstraction for a dragging interaction originating on an event.\nDoes higher-level things than PointerDragger, such as possibly:\n- a \"mirror\" that moves with the pointer\n- a minimum number of pixels or other criteria for a true drag to begin\n\nsubclasses must emit:\n- pointerdown\n- dragstart\n- dragmove\n- pointerup\n- dragend\n*/\n\n\nvar ElementDragging =\n/** @class */\nfunction () {\n  function ElementDragging(el) {\n    this.emitter = new EmitterMixin();\n  }\n\n  ElementDragging.prototype.destroy = function () {};\n\n  ElementDragging.prototype.setMirrorIsVisible = function (bool) {// optional if subclass doesn't want to support a mirror\n  };\n\n  ElementDragging.prototype.setMirrorNeedsRevert = function (bool) {// optional if subclass doesn't want to support a mirror\n  };\n\n  ElementDragging.prototype.setAutoScrollEnabled = function (bool) {// optional\n  };\n\n  return ElementDragging;\n}();\n\nfunction formatDate(dateInput, settings) {\n  if (settings === void 0) {\n    settings = {};\n  }\n\n  var dateEnv = buildDateEnv$1(settings);\n  var formatter = createFormatter(settings);\n  var dateMeta = dateEnv.createMarkerMeta(dateInput);\n\n  if (!dateMeta) {\n    // TODO: warning?\n    return '';\n  }\n\n  return dateEnv.format(dateMeta.marker, formatter, {\n    forcedTzo: dateMeta.forcedTzo\n  });\n}\n\nfunction formatRange(startInput, endInput, settings // mixture of env and formatter settings\n) {\n  var dateEnv = buildDateEnv$1(typeof settings === 'object' && settings ? settings : {}); // pass in if non-null object\n\n  var formatter = createFormatter(settings, globalDefaults.defaultRangeSeparator);\n  var startMeta = dateEnv.createMarkerMeta(startInput);\n  var endMeta = dateEnv.createMarkerMeta(endInput);\n\n  if (!startMeta || !endMeta) {\n    // TODO: warning?\n    return '';\n  }\n\n  return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {\n    forcedStartTzo: startMeta.forcedTzo,\n    forcedEndTzo: endMeta.forcedTzo,\n    isEndExclusive: settings.isEndExclusive\n  });\n} // TODO: more DRY and optimized\n\n\nfunction buildDateEnv$1(settings) {\n  var locale = buildLocale(settings.locale || 'en', parseRawLocales([]).map); // TODO: don't hardcode 'en' everywhere\n  // ensure required settings\n\n  settings = _assign({\n    timeZone: globalDefaults.timeZone,\n    calendarSystem: 'gregory'\n  }, settings, {\n    locale: locale\n  });\n  return new DateEnv(settings);\n}\n\nvar DRAG_META_PROPS = {\n  startTime: createDuration,\n  duration: createDuration,\n  create: Boolean,\n  sourceId: String\n};\nvar DRAG_META_DEFAULTS = {\n  create: true\n};\n\nfunction parseDragMeta(raw) {\n  var leftoverProps = {};\n  var refined = refineProps(raw, DRAG_META_PROPS, DRAG_META_DEFAULTS, leftoverProps);\n  refined.leftoverProps = leftoverProps;\n  return refined;\n} // Computes a default column header formatting string if `colFormat` is not explicitly defined\n\n\nfunction computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {\n  // if more than one week row, or if there are a lot of columns with not much space,\n  // put just the day numbers will be in each cell\n  if (!datesRepDistinctDays || dayCnt > 10) {\n    return {\n      weekday: 'short'\n    }; // \"Sat\"\n  } else if (dayCnt > 1) {\n    return {\n      weekday: 'short',\n      month: 'numeric',\n      day: 'numeric',\n      omitCommas: true\n    }; // \"Sat 11/12\"\n  } else {\n    return {\n      weekday: 'long'\n    }; // \"Saturday\"\n  }\n}\n\nfunction renderDateCell(dateMarker, dateProfile, datesRepDistinctDays, colCnt, colHeadFormat, context, colspan, otherAttrs) {\n  var view = context.view,\n      dateEnv = context.dateEnv,\n      theme = context.theme,\n      options = context.options;\n  var isDateValid = rangeContainsMarker(dateProfile.activeRange, dateMarker); // TODO: called too frequently. cache somehow.\n\n  var classNames = ['fc-day-header', theme.getClass('widgetHeader')];\n  var innerHtml;\n\n  if (typeof options.columnHeaderHtml === 'function') {\n    innerHtml = options.columnHeaderHtml(dateEnv.toDate(dateMarker));\n  } else if (typeof options.columnHeaderText === 'function') {\n    innerHtml = htmlEscape(options.columnHeaderText(dateEnv.toDate(dateMarker)));\n  } else {\n    innerHtml = htmlEscape(dateEnv.format(dateMarker, colHeadFormat));\n  } // if only one row of days, the classNames on the header can represent the specific days beneath\n\n\n  if (datesRepDistinctDays) {\n    classNames = classNames.concat( // includes the day-of-week class\n    // noThemeHighlight=true (don't highlight the header)\n    getDayClasses(dateMarker, dateProfile, context, true));\n  } else {\n    classNames.push('fc-' + DAY_IDS[dateMarker.getUTCDay()]); // only add the day-of-week class\n  }\n\n  return '' + '<th class=\"' + classNames.join(' ') + '\"' + (isDateValid && datesRepDistinctDays ? ' data-date=\"' + dateEnv.formatIso(dateMarker, {\n    omitTime: true\n  }) + '\"' : '') + (colspan > 1 ? ' colspan=\"' + colspan + '\"' : '') + (otherAttrs ? ' ' + otherAttrs : '') + '>' + (isDateValid ? // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)\n  buildGotoAnchorHtml(view, {\n    date: dateMarker,\n    forceOff: !datesRepDistinctDays || colCnt === 1\n  }, innerHtml) : // if not valid, display text, but no link\n  innerHtml) + '</th>';\n}\n\nvar DayHeader =\n/** @class */\nfunction (_super) {\n  __extends(DayHeader, _super);\n\n  function DayHeader(context, parentEl) {\n    var _this = _super.call(this, context) || this;\n\n    parentEl.innerHTML = ''; // because might be nbsp\n\n    parentEl.appendChild(_this.el = htmlToElement('<div class=\"fc-row ' + _this.theme.getClass('headerRow') + '\">' + '<table class=\"' + _this.theme.getClass('tableGrid') + '\">' + '<thead></thead>' + '</table>' + '</div>'));\n    _this.thead = _this.el.querySelector('thead');\n    return _this;\n  }\n\n  DayHeader.prototype.destroy = function () {\n    removeElement(this.el);\n  };\n\n  DayHeader.prototype.render = function (props) {\n    var dates = props.dates,\n        datesRepDistinctDays = props.datesRepDistinctDays;\n    var parts = [];\n\n    if (props.renderIntroHtml) {\n      parts.push(props.renderIntroHtml());\n    }\n\n    var colHeadFormat = createFormatter(this.opt('columnHeaderFormat') || computeFallbackHeaderFormat(datesRepDistinctDays, dates.length));\n\n    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n      var date = dates_1[_i];\n      parts.push(renderDateCell(date, props.dateProfile, datesRepDistinctDays, dates.length, colHeadFormat, this.context));\n    }\n\n    if (this.isRtl) {\n      parts.reverse();\n    }\n\n    this.thead.innerHTML = '<tr>' + parts.join('') + '</tr>';\n  };\n\n  return DayHeader;\n}(Component);\n\nvar DaySeries =\n/** @class */\nfunction () {\n  function DaySeries(range, dateProfileGenerator) {\n    var date = range.start;\n    var end = range.end;\n    var indices = [];\n    var dates = [];\n    var dayIndex = -1;\n\n    while (date < end) {\n      // loop each day from start to end\n      if (dateProfileGenerator.isHiddenDay(date)) {\n        indices.push(dayIndex + 0.5); // mark that it's between indices\n      } else {\n        dayIndex++;\n        indices.push(dayIndex);\n        dates.push(date);\n      }\n\n      date = addDays(date, 1);\n    }\n\n    this.dates = dates;\n    this.indices = indices;\n    this.cnt = dates.length;\n  }\n\n  DaySeries.prototype.sliceRange = function (range) {\n    var firstIndex = this.getDateDayIndex(range.start); // inclusive first index\n\n    var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index\n\n    var clippedFirstIndex = Math.max(0, firstIndex);\n    var clippedLastIndex = Math.min(this.cnt - 1, lastIndex); // deal with in-between indices\n\n    clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell\n\n    clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell\n\n    if (clippedFirstIndex <= clippedLastIndex) {\n      return {\n        firstIndex: clippedFirstIndex,\n        lastIndex: clippedLastIndex,\n        isStart: firstIndex === clippedFirstIndex,\n        isEnd: lastIndex === clippedLastIndex\n      };\n    } else {\n      return null;\n    }\n  }; // Given a date, returns its chronolocial cell-index from the first cell of the grid.\n  // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.\n  // If before the first offset, returns a negative number.\n  // If after the last offset, returns an offset past the last cell offset.\n  // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.\n\n\n  DaySeries.prototype.getDateDayIndex = function (date) {\n    var indices = this.indices;\n    var dayOffset = Math.floor(diffDays(this.dates[0], date));\n\n    if (dayOffset < 0) {\n      return indices[0] - 1;\n    } else if (dayOffset >= indices.length) {\n      return indices[indices.length - 1] + 1;\n    } else {\n      return indices[dayOffset];\n    }\n  };\n\n  return DaySeries;\n}();\n\nvar DayTable =\n/** @class */\nfunction () {\n  function DayTable(daySeries, breakOnWeeks) {\n    var dates = daySeries.dates;\n    var daysPerRow;\n    var firstDay;\n    var rowCnt;\n\n    if (breakOnWeeks) {\n      // count columns until the day-of-week repeats\n      firstDay = dates[0].getUTCDay();\n\n      for (daysPerRow = 1; daysPerRow < dates.length; daysPerRow++) {\n        if (dates[daysPerRow].getUTCDay() === firstDay) {\n          break;\n        }\n      }\n\n      rowCnt = Math.ceil(dates.length / daysPerRow);\n    } else {\n      rowCnt = 1;\n      daysPerRow = dates.length;\n    }\n\n    this.rowCnt = rowCnt;\n    this.colCnt = daysPerRow;\n    this.daySeries = daySeries;\n    this.cells = this.buildCells();\n    this.headerDates = this.buildHeaderDates();\n  }\n\n  DayTable.prototype.buildCells = function () {\n    var rows = [];\n\n    for (var row = 0; row < this.rowCnt; row++) {\n      var cells = [];\n\n      for (var col = 0; col < this.colCnt; col++) {\n        cells.push(this.buildCell(row, col));\n      }\n\n      rows.push(cells);\n    }\n\n    return rows;\n  };\n\n  DayTable.prototype.buildCell = function (row, col) {\n    return {\n      date: this.daySeries.dates[row * this.colCnt + col]\n    };\n  };\n\n  DayTable.prototype.buildHeaderDates = function () {\n    var dates = [];\n\n    for (var col = 0; col < this.colCnt; col++) {\n      dates.push(this.cells[0][col].date);\n    }\n\n    return dates;\n  };\n\n  DayTable.prototype.sliceRange = function (range) {\n    var colCnt = this.colCnt;\n    var seriesSeg = this.daySeries.sliceRange(range);\n    var segs = [];\n\n    if (seriesSeg) {\n      var firstIndex = seriesSeg.firstIndex,\n          lastIndex = seriesSeg.lastIndex;\n      var index = firstIndex;\n\n      while (index <= lastIndex) {\n        var row = Math.floor(index / colCnt);\n        var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);\n        segs.push({\n          row: row,\n          firstCol: index % colCnt,\n          lastCol: (nextIndex - 1) % colCnt,\n          isStart: seriesSeg.isStart && index === firstIndex,\n          isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex\n        });\n        index = nextIndex;\n      }\n    }\n\n    return segs;\n  };\n\n  return DayTable;\n}();\n\nvar Slicer =\n/** @class */\nfunction () {\n  function Slicer() {\n    this.sliceBusinessHours = memoize(this._sliceBusinessHours);\n    this.sliceDateSelection = memoize(this._sliceDateSpan);\n    this.sliceEventStore = memoize(this._sliceEventStore);\n    this.sliceEventDrag = memoize(this._sliceInteraction);\n    this.sliceEventResize = memoize(this._sliceInteraction);\n  }\n\n  Slicer.prototype.sliceProps = function (props, dateProfile, nextDayThreshold, component) {\n    var extraArgs = [];\n\n    for (var _i = 4; _i < arguments.length; _i++) {\n      extraArgs[_i - 4] = arguments[_i];\n    }\n\n    var eventUiBases = props.eventUiBases;\n    var eventSegs = this.sliceEventStore.apply(this, [props.eventStore, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs));\n    return {\n      dateSelectionSegs: this.sliceDateSelection.apply(this, [props.dateSelection, eventUiBases, component].concat(extraArgs)),\n      businessHourSegs: this.sliceBusinessHours.apply(this, [props.businessHours, dateProfile, nextDayThreshold, component].concat(extraArgs)),\n      fgEventSegs: eventSegs.fg,\n      bgEventSegs: eventSegs.bg,\n      eventDrag: this.sliceEventDrag.apply(this, [props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),\n      eventResize: this.sliceEventResize.apply(this, [props.eventResize, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),\n      eventSelection: props.eventSelection\n    }; // TODO: give interactionSegs?\n  };\n\n  Slicer.prototype.sliceNowDate = function ( // does not memoize\n  date, component) {\n    var extraArgs = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      extraArgs[_i - 2] = arguments[_i];\n    }\n\n    return this._sliceDateSpan.apply(this, [{\n      range: {\n        start: date,\n        end: addMs(date, 1)\n      },\n      allDay: false\n    }, {}, component].concat(extraArgs));\n  };\n\n  Slicer.prototype._sliceBusinessHours = function (businessHours, dateProfile, nextDayThreshold, component) {\n    var extraArgs = [];\n\n    for (var _i = 4; _i < arguments.length; _i++) {\n      extraArgs[_i - 4] = arguments[_i];\n    }\n\n    if (!businessHours) {\n      return [];\n    }\n\n    return this._sliceEventStore.apply(this, [expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), component.calendar), {}, dateProfile, nextDayThreshold, component].concat(extraArgs)).bg;\n  };\n\n  Slicer.prototype._sliceEventStore = function (eventStore, eventUiBases, dateProfile, nextDayThreshold, component) {\n    var extraArgs = [];\n\n    for (var _i = 5; _i < arguments.length; _i++) {\n      extraArgs[_i - 5] = arguments[_i];\n    }\n\n    if (eventStore) {\n      var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n      return {\n        bg: this.sliceEventRanges(rangeRes.bg, component, extraArgs),\n        fg: this.sliceEventRanges(rangeRes.fg, component, extraArgs)\n      };\n    } else {\n      return {\n        bg: [],\n        fg: []\n      };\n    }\n  };\n\n  Slicer.prototype._sliceInteraction = function (interaction, eventUiBases, dateProfile, nextDayThreshold, component) {\n    var extraArgs = [];\n\n    for (var _i = 5; _i < arguments.length; _i++) {\n      extraArgs[_i - 5] = arguments[_i];\n    }\n\n    if (!interaction) {\n      return null;\n    }\n\n    var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n    return {\n      segs: this.sliceEventRanges(rangeRes.fg, component, extraArgs),\n      affectedInstances: interaction.affectedEvents.instances,\n      isEvent: interaction.isEvent,\n      sourceSeg: interaction.origSeg\n    };\n  };\n\n  Slicer.prototype._sliceDateSpan = function (dateSpan, eventUiBases, component) {\n    var extraArgs = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      extraArgs[_i - 3] = arguments[_i];\n    }\n\n    if (!dateSpan) {\n      return [];\n    }\n\n    var eventRange = fabricateEventRange(dateSpan, eventUiBases, component.calendar);\n    var segs = this.sliceRange.apply(this, [dateSpan.range].concat(extraArgs));\n\n    for (var _a = 0, segs_1 = segs; _a < segs_1.length; _a++) {\n      var seg = segs_1[_a];\n      seg.component = component;\n      seg.eventRange = eventRange;\n    }\n\n    return segs;\n  };\n  /*\n  \"complete\" seg means it has component and eventRange\n  */\n\n\n  Slicer.prototype.sliceEventRanges = function (eventRanges, component, // TODO: kill\n  extraArgs) {\n    var segs = [];\n\n    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n      var eventRange = eventRanges_1[_i];\n      segs.push.apply(segs, this.sliceEventRange(eventRange, component, extraArgs));\n    }\n\n    return segs;\n  };\n  /*\n  \"complete\" seg means it has component and eventRange\n  */\n\n\n  Slicer.prototype.sliceEventRange = function (eventRange, component, // TODO: kill\n  extraArgs) {\n    var segs = this.sliceRange.apply(this, [eventRange.range].concat(extraArgs));\n\n    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n      var seg = segs_2[_i];\n      seg.component = component;\n      seg.eventRange = eventRange;\n      seg.isStart = eventRange.isStart && seg.isStart;\n      seg.isEnd = eventRange.isEnd && seg.isEnd;\n    }\n\n    return segs;\n  };\n\n  return Slicer;\n}();\n/*\nfor incorporating minTime/maxTime if appropriate\nTODO: should be part of DateProfile!\nTimelineDateProfile already does this btw\n*/\n\n\nfunction computeActiveRange(dateProfile, isComponentAllDay) {\n  var range = dateProfile.activeRange;\n\n  if (isComponentAllDay) {\n    return range;\n  }\n\n  return {\n    start: addMs(range.start, dateProfile.minTime.milliseconds),\n    end: addMs(range.end, dateProfile.maxTime.milliseconds - 864e5) // 864e5 = ms in a day\n\n  };\n} // exports\n// --------------------------------------------------------------------------------------------------\n\n\nvar version = '4.3.1';\nexport { Calendar, Component, DateComponent, DateEnv, DateProfileGenerator, DayHeader, DaySeries, DayTable, ElementDragging, ElementScrollController, EmitterMixin, EventApi, FgEventRenderer, FillRenderer, Interaction, Mixin, NamedTimeZoneImpl, PositionCache, ScrollComponent, ScrollController, Slicer, Splitter, Theme, View, WindowScrollController, addDays, addDurations, addMs, addWeeks, allowContextMenu, allowSelection, appendToElement, applyAll, applyMutationToEventStore, applyStyle, applyStyleProp, asRoughMinutes, asRoughMs, asRoughSeconds, buildGotoAnchorHtml, buildSegCompareObj, capitaliseFirstLetter, combineEventUis, compareByFieldSpec, compareByFieldSpecs, compareNumbers, compensateScroll, computeClippingRect, computeEdges, computeFallbackHeaderFormat, computeHeightAndMargins, computeInnerRect, computeRect, computeVisibleDayRange, config, constrainPoint, createDuration, createElement, createEmptyEventStore, createEventInstance, createFormatter, createPlugin, cssToStr, debounce, diffDates, diffDayAndTime, diffDays, diffPoints, diffWeeks, diffWholeDays, diffWholeWeeks, disableCursor, distributeHeight, elementClosest, elementMatches, enableCursor, eventTupleToStore, filterEventStoreDefs, filterHash, findChildren, findElements, flexibleCompare, forceClassName, formatDate, formatIsoTimeString, formatRange, getAllDayHtml, getClippingParents, getDayClasses, getElSeg, getRectCenter, getRelevantEvents, globalDefaults, greatestDurationDenominator, hasBgRendering, htmlEscape, htmlToElement, insertAfterElement, interactionSettingsStore, interactionSettingsToStore, intersectRanges, intersectRects, isArraysEqual, isDateSpansEqual, isInt, isInteractionValid, isMultiDayRange, isPropsEqual, isPropsValid, isSingleDay, isValidDate, listenBySelector, mapHash, matchCellWidths, memoize, memoizeOutput, memoizeRendering, mergeEventStores, multiplyDuration, padStart, parseBusinessHours, parseDragMeta, parseEventDef, parseFieldSpecs, parse as parseMarker, pointInsideRect, prependToElement, preventContextMenu, preventDefault, preventSelection, processScopedUiProps, rangeContainsMarker, rangeContainsRange, rangesEqual, rangesIntersect, refineProps, removeElement, removeExact, renderDateCell, requestJson, sliceEventStore, startOfDay, subtractInnerElHeight, translateRect, uncompensateScroll, undistributeHeight, unpromisify, version, whenTransitionDone, wholeDivideDurations };","map":null,"metadata":{},"sourceType":"module"}