{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _isEqual = require('lodash/isEqual');\n\nvar _isEqual2 = _interopRequireDefault(_isEqual);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _reactstrap = require('reactstrap');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _AvFeedback = require('./AvFeedback');\n\nvar _AvFeedback2 = _interopRequireDefault(_AvFeedback);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar htmlValidationAttrs = ['required'];\n\nvar noop = function noop() {};\n\nvar AvRadioGroup = function (_Component) {\n  (0, _inherits3.default)(AvRadioGroup, _Component);\n\n  function AvRadioGroup() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3.default)(this, AvRadioGroup);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      invalidInputs: {},\n      dirtyInputs: {},\n      touchedInputs: {},\n      badInputs: {},\n      validate: {},\n      value: ''\n    }, _this._inputs = [], _this.value = '', _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n  }\n\n  AvRadioGroup.prototype.getChildContext = function getChildContext() {\n    var _this2 = this;\n\n    if (!this.FormCtrl) {\n      this.FormCtrl = (0, _extends3.default)({}, this.context.FormCtrl);\n      this.FormCtrl.register = this.registerInput.bind(this);\n      this.FormCtrl.unregister = this.unregisterInput.bind(this);\n      this.FormCtrl.validate = noop;\n    }\n\n    var updateGroup = function () {\n      var _ref = (0, _asyncToGenerator3.default)(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee(e, value) {\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this2.setState({\n                  value: value\n                });\n\n                _this2.value = value;\n                _context.next = 4;\n                return _this2.validate();\n\n              case 4:\n                !_this2.context.FormCtrl.isTouched(_this2.props.name) && _this2.context.FormCtrl.setTouched(_this2.props.name);\n                !_this2.context.FormCtrl.isDirty(_this2.props.name) && _this2.context.FormCtrl.setDirty(_this2.props.name);\n                _this2.props.onChange && _this2.props.onChange(e, value);\n\n              case 7:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this2);\n      }));\n\n      return function updateGroup(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      Group: {\n        getProps: function getProps() {\n          return {\n            name: _this2.props.name,\n            inline: _this2.props.inline,\n            required: _this2.props.required || !!(_this2.validations.required && _this2.validations.required.value),\n            value: _this2.value\n          };\n        },\n        update: updateGroup,\n        getValue: function getValue() {\n          return _this2.value;\n        },\n        getInputState: this.getInputState.bind(this)\n      },\n      FormCtrl: this.FormCtrl\n    };\n  };\n\n  AvRadioGroup.prototype.componentWillMount = function componentWillMount() {\n    this.value = this.props.value || this.getDefaultValue().value;\n    this.setState({\n      value: this.value\n    });\n    this.updateValidations();\n  };\n\n  AvRadioGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.name !== this.props.name) {\n      this.context.FormCtrl.unregister(this);\n    }\n\n    if (nextProps.value !== this.props.value) {\n      this.value = nextProps.value;\n      this.setState({\n        value: nextProps.value\n      });\n    }\n\n    if (!(0, _isEqual2.default)(nextProps, this.props)) {\n      this.updateValidations(nextProps);\n    }\n  };\n\n  AvRadioGroup.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.context.FormCtrl.unregister(this);\n  };\n\n  AvRadioGroup.prototype.getValue = function getValue() {\n    return this.value;\n  };\n\n  AvRadioGroup.prototype.getInputState = function getInputState() {\n    return this.context.FormCtrl.getInputState(this.props.name);\n  };\n\n  AvRadioGroup.prototype.getDefaultValue = function getDefaultValue() {\n    var key = 'defaultValue';\n    var value = '';\n\n    if (!(0, _isUndefined2.default)(this.props[key])) {\n      value = this.props[key];\n    } else if (!(0, _isUndefined2.default)(this.context.FormCtrl.getDefaultValue(this.props.name))) {\n      value = this.context.FormCtrl.getDefaultValue(this.props.name);\n    }\n\n    return {\n      key: key,\n      value: value\n    };\n  };\n\n  AvRadioGroup.prototype.validate = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(\n    /*#__PURE__*/\n    _regenerator2.default.mark(function _callee2() {\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.context.FormCtrl.validate(this.props.name);\n\n            case 2:\n              this.updateInputs();\n\n            case 3:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function validate() {\n      return _ref2.apply(this, arguments);\n    }\n\n    return validate;\n  }();\n\n  AvRadioGroup.prototype.update = function update() {\n    this.setState({});\n    this.updateInputs();\n  };\n\n  AvRadioGroup.prototype.updateValidations = function updateValidations() {\n    var _this3 = this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    this.validations = (0, _assign2.default)({}, props.validate);\n    (0, _keys2.default)(props).filter(function (val) {\n      return htmlValidationAttrs.indexOf(val) > -1;\n    }).forEach(function (attr) {\n      if (props[attr]) {\n        _this3.validations[attr] = _this3.validations[attr] || {\n          value: props[attr]\n        };\n      } else {\n        delete _this3.validations[attr];\n      }\n    });\n    this.context.FormCtrl.register(this, this.update.bind(this));\n    this.validate();\n  };\n\n  AvRadioGroup.prototype.updateInputs = function updateInputs() {\n    this._inputs.forEach(function (input) {\n      return input.setState.call(input, {});\n    });\n\n    this.setState({});\n  };\n\n  AvRadioGroup.prototype.reset = function reset() {\n    this.value = this.getDefaultValue().value;\n    this.context.FormCtrl.setDirty(this.props.name, false);\n    this.context.FormCtrl.setTouched(this.props.name, false);\n    this.context.FormCtrl.setBad(this.props.name, false);\n    this.setState({\n      value: this.value\n    });\n    this.validate();\n    this.props.onReset && this.props.onReset(this.value);\n  };\n\n  AvRadioGroup.prototype.registerInput = function registerInput(input) {\n    if (this._inputs.indexOf(input) < 0) {\n      this._inputs.push(input);\n    }\n  };\n\n  AvRadioGroup.prototype.unregisterInput = function unregisterInput(input) {\n    this._inputs = this._inputs.filter(function (ipt) {\n      return ipt !== input;\n    });\n  };\n\n  AvRadioGroup.prototype.render = function render() {\n    var legend = this.props.label ? _react2.default.createElement('legend', null, this.props.label) : '';\n    var validation = this.getInputState();\n    var _props = this.props,\n        omit1 = _props.errorMessage,\n        omit2 = _props.validate,\n        omit3 = _props.validationEvent,\n        omit4 = _props.state,\n        omit5 = _props.label,\n        omit6 = _props.required,\n        omit7 = _props.inline,\n        children = _props.children,\n        attributes = (0, _objectWithoutProperties3.default)(_props, ['errorMessage', 'validate', 'validationEvent', 'state', 'label', 'required', 'inline', 'children']);\n    var touched = this.context.FormCtrl.isTouched(this.props.name);\n    var hasError = this.context.FormCtrl.hasError(this.props.name);\n    var classes = (0, _classnames2.default)('form-control border-0 p-0 h-auto', touched ? 'is-touched' : 'is-untouched', this.context.FormCtrl.isDirty(this.props.name) ? 'is-dirty' : 'is-pristine', this.context.FormCtrl.isBad(this.props.name) ? 'is-bad-input' : null, hasError ? 'av-invalid' : 'av-valid', touched && hasError && 'is-invalid');\n    var groupClass = (0, _classnames2.default)(attributes.className, touched && hasError && 'was-validated');\n    return _react2.default.createElement(_reactstrap.FormGroup, (0, _extends3.default)({\n      tag: 'fieldset'\n    }, attributes, {\n      className: groupClass\n    }), legend, _react2.default.createElement('div', {\n      className: classes\n    }, children), _react2.default.createElement(_AvFeedback2.default, null, validation.errorMessage));\n  };\n\n  return AvRadioGroup;\n}(_react.Component);\n\nAvRadioGroup.propTypes = (0, _assign2.default)({}, _reactstrap.FormGroup.propTypes, {\n  name: _propTypes2.default.string.isRequired\n});\nAvRadioGroup.contextTypes = {\n  FormCtrl: _propTypes2.default.object.isRequired\n};\nAvRadioGroup.childContextTypes = {\n  Group: _propTypes2.default.object.isRequired,\n  FormCtrl: _propTypes2.default.object.isRequired\n};\nexports.default = AvRadioGroup;","map":null,"metadata":{},"sourceType":"script"}