{"ast":null,"code":"'use strict';\n\nvar assign = require('object-assign');\n\nvar Region = require('region-align');\n\nvar hasTouch = require('has-touch');\n\nvar once = require('./utils/once');\n\nvar mobileTest = global.navigator ? /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(global.navigator.userAgent) : false;\nvar isMobile = hasTouch && mobileTest;\n\nvar Helper = function Helper(config) {\n  this.config = config;\n};\n\nvar EVENTS = {\n  move: isMobile ? 'touchmove' : 'mousemove',\n  up: isMobile ? 'touchend' : 'mouseup'\n};\n\nfunction emptyFn() {}\n\nfunction getPageCoords(event) {\n  var firstTouch;\n  var pageX = event.pageX;\n  var pageY = event.pageY;\n\n  if (isMobile && event.touches && (firstTouch = event.touches[0])) {\n    pageX = firstTouch.pageX;\n    pageY = firstTouch.pageY;\n  }\n\n  return {\n    pageX: pageX,\n    pageY: pageY\n  };\n}\n\nassign(Helper.prototype, {\n  /**\n   * Should be called on a mousedown event\n   *\n   * @param  {Event} event\n   * @return {[type]}       [description]\n   */\n  initDrag: function initDrag(event) {\n    this.onDragInit(event);\n    var events = this.config.events || EVENTS;\n    var onDragStart = once(this.onDragStart, this);\n    var target = isMobile ? event.target : global;\n\n    var mouseMoveListener = function (event) {\n      onDragStart(event);\n      this.onDrag(event);\n    }.bind(this);\n\n    var mouseUpListener = function (event) {\n      this.onDrop(event);\n      target.removeEventListener(events.move, mouseMoveListener);\n      target.removeEventListener(events.up, mouseUpListener);\n    }.bind(this);\n\n    target.addEventListener(events.move, mouseMoveListener, false);\n    target.addEventListener(events.up, mouseUpListener);\n  },\n  onDragInit: function onDragInit(event) {\n    var config = {\n      diff: {\n        left: 0,\n        top: 0\n      }\n    };\n    this.state = {\n      config: config\n    };\n\n    if (this.config.region) {\n      this.state.initialRegion = Region.from(this.config.region);\n      this.state.dragRegion = config.dragRegion = this.state.initialRegion.clone();\n    }\n\n    if (this.config.constrainTo) {\n      this.state.constrainTo = Region.from(this.config.constrainTo);\n    }\n\n    this.callConfig('onDragInit', event);\n  },\n\n  /**\n   * Called when the first mousemove event occurs after drag is initialized\n   * @param  {Event} event\n   */\n  onDragStart: function onDragStart(event) {\n    this.state.initPageCoords = getPageCoords(event);\n    this.state.didDrag = this.state.config.didDrag = true;\n    this.callConfig('onDragStart', event);\n  },\n\n  /**\n   * Called on all mousemove events after drag is initialized.\n   *\n   * @param  {Event} event\n   */\n  onDrag: function onDrag(event) {\n    var config = this.state.config;\n    var initPageCoords = this.state.initPageCoords;\n    var eventCoords = getPageCoords(event);\n    var diff = config.diff = {\n      left: eventCoords.pageX - initPageCoords.pageX,\n      top: eventCoords.pageY - initPageCoords.pageY\n    };\n\n    if (this.state.initialRegion) {\n      var dragRegion = config.dragRegion; //set the dragRegion to initial coords\n\n      dragRegion.set(this.state.initialRegion); //shift it to the new position\n\n      dragRegion.shift(diff);\n\n      if (this.state.constrainTo) {\n        //and finally constrain it if it's the case\n        var boolConstrained = dragRegion.constrainTo(this.state.constrainTo);\n        diff.left = dragRegion.left - this.state.initialRegion.left;\n        diff.top = dragRegion.top - this.state.initialRegion.top; // console.log(diff);\n      }\n\n      config.dragRegion = dragRegion;\n    }\n\n    this.callConfig('onDrag', event);\n  },\n\n  /**\n   * Called on the mouseup event on window\n   *\n   * @param  {Event} event\n   */\n  onDrop: function onDrop(event) {\n    this.callConfig('onDrop', event);\n    this.state = null;\n  },\n  callConfig: function callConfig(fnName, event) {\n    var config = this.state.config;\n    var args = [event, config];\n    var fn = this.config[fnName];\n\n    if (fn) {\n      fn.apply(this, args);\n    }\n  }\n});\n\nmodule.exports = function (event, config) {\n  if (config.scope) {\n    var skippedKeys = {\n      scope: 1,\n      region: 1,\n      constrainTo: 1\n    };\n    Object.keys(config).forEach(function (key) {\n      var value = config[key];\n\n      if (key in skippedKeys) {\n        return;\n      }\n\n      if (typeof value == 'function') {\n        config[key] = value.bind(config.scope);\n      }\n    });\n  }\n\n  var helper = new Helper(config);\n  helper.initDrag(event);\n  return helper;\n};","map":null,"metadata":{},"sourceType":"script"}