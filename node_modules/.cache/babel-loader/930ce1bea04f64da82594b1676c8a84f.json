{"ast":null,"code":"import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nlet users = [{\n  id: 1,\n  username: 'test',\n  password: 'test',\n  email: 'test@gmail.com'\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  var mock = new MockAdapter(axios);\n  mock.onPost('/post-register').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    users.push(user);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost('/post-login').reply(function (config) {\n    const user = JSON.parse(config['data']);\n    const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        if (validUser['length'] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost('/forget-pwd').reply(function (config) {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["C:/Users/Anime/Documents/Githubrepositories/area-51-raid-squad/src/helpers/fakeBackend.js"],"names":["axios","MockAdapter","users","id","username","password","email","fakeBackend","mock","onPost","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,IAAIC,KAAK,GAAG,CACV;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,QAAQ,EAAE,MAAnB;AAA2BC,EAAAA,QAAQ,EAAE,MAArC;AAA6CC,EAAAA,KAAK,EAAE;AAApD,CADU,CAAZ;;AAIA,MAAMC,WAAW,GAAG,MAAM;AACxB;AACA,MAAIC,IAAI,GAAG,IAAIP,WAAJ,CAAgBD,KAAhB,CAAX;AAEAQ,EAAAA,IAAI,CAACC,MAAL,CAAY,gBAAZ,EAA8BC,KAA9B,CAAoC,UAAUC,MAAV,EAAkB;AAEpD,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AACAT,IAAAA,KAAK,CAACa,IAAN,CAAWH,IAAX;AAEA,WAAO,IAAII,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CC,MAAAA,UAAU,CAAC,YAAY;AACrBF,QAAAA,OAAO,CAAC,CAAC,GAAD,EAAML,IAAN,CAAD,CAAP;AACD,OAFS,CAAV;AAGD,KAJM,CAAP;AAKD,GAVD;AAYAJ,EAAAA,IAAI,CAACC,MAAL,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,UAAUC,MAAV,EAAkB;AACjD,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AACA,UAAMS,SAAS,GAAGlB,KAAK,CAACmB,MAAN,CAAaC,GAAG,IAAIA,GAAG,CAAChB,KAAJ,KAAcM,IAAI,CAACR,QAAnB,IAA+BkB,GAAG,CAACjB,QAAJ,KAAiBO,IAAI,CAACP,QAAzE,CAAlB;AAEA,WAAO,IAAIW,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CC,MAAAA,UAAU,CAAC,YAAY;AACrB,YAAIC,SAAS,CAAC,QAAD,CAAT,KAAwB,CAA5B,EAA+B;AAC7BH,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMG,SAAS,CAAC,CAAD,CAAf,CAAD,CAAP;AACD,SAFD,MAEO;AACLF,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,+EAAN,CAAD,CAAN;AACD;AACF,OANS,CAAV;AAOD,KARM,CAAP;AASD,GAbD;AAeAV,EAAAA,IAAI,CAACC,MAAL,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,UAAUC,MAAV,EAAkB;AAClD;AAEA,WAAO,IAAIK,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC7CC,MAAAA,UAAU,CAAC,YAAY;AACnBF,QAAAA,OAAO,CAAC,CAAC,GAAD,EAAM,yCAAN,CAAD,CAAP;AACH,OAFS,CAAV;AAGD,KAJO,CAAP;AAMA,GATD;AAWD,CA1CD;;AA4CA,eAAeV,WAAf","sourcesContent":["import axios from 'axios';\r\nimport MockAdapter from 'axios-mock-adapter';\r\n\r\nlet users = [\r\n  { id: 1, username: 'test', password: 'test', email: 'test@gmail.com' }\r\n];\r\n\r\nconst fakeBackend = () => {\r\n  // This sets the mock adapter on the default instance\r\n  var mock = new MockAdapter(axios);\r\n\r\n  mock.onPost('/post-register').reply(function (config) {\r\n\r\n    const user = JSON.parse(config['data']);\r\n    users.push(user);\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        resolve([200, user]);\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost('/post-login').reply(function (config) {\r\n    const user = JSON.parse(config['data']);\r\n    const validUser = users.filter(usr => usr.email === user.username && usr.password === user.password);\r\n    \r\n    return new Promise(function (resolve, reject) {\r\n      setTimeout(function () {\r\n        if (validUser['length'] === 1) {\r\n          resolve([200, validUser[0]]);\r\n        } else {\r\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  mock.onPost('/forget-pwd').reply(function (config) {\r\n   // User needs to check that user is eXist or not and send mail for Reset New password\r\n\r\n   return new Promise(function (resolve, reject) {\r\n    setTimeout(function () {\r\n        resolve([200, \"Check you mail and reset your password.\"]);\r\n    });\r\n  });\r\n \r\n  });\r\n\r\n}\r\n\r\nexport default fakeBackend;"]},"metadata":{},"sourceType":"module"}