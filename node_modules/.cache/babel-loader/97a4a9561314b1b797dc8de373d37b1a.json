{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _SweetAlertStyles = require('../styles/SweetAlertStyles');\n\nvar _SweetAlertStyles2 = _interopRequireDefault(_SweetAlertStyles);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Buttons = function (_React$Component) {\n  _inherits(Buttons, _React$Component);\n\n  function Buttons() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Buttons);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Buttons.__proto__ || Object.getPrototypeOf(Buttons)).call.apply(_ref, [this].concat(args))), _this), _this.buttonStyles = {}, _this.getButtonStyle = function (bsStyle) {\n      if (bsStyle === 'error') bsStyle = 'danger';\n\n      if (_this.buttonStyles[bsStyle] == null) {\n        var style = Buttons.styles[bsStyle] || Buttons.styles.default;\n        var borderColor = 'borderColor: ' + style.borderColor + ' !important';\n        var boxShadow = 'boxShadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px ' + style.shadowColor + ' !important;';\n        _this.buttonStyles[bsStyle] = ' ' + borderColor + ' ' + boxShadow;\n      }\n\n      return _this.buttonStyles[bsStyle];\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Buttons, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.focusButton();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this; // when displaying back to back alerts React will treat this\n      // as an update to the same alert. this causes componentDidMount\n      // to not be called for the subsequent alerts. i hope to find a better\n      // way to handle this in the future, but for now i'm checking if the\n      // title, type, or button text has changed\n\n\n      if (prevProps.type !== this.props.type || prevProps.confirmBtnText !== this.props.confirmBtnText || prevProps.title !== this.props.title) {\n        setTimeout(function () {\n          return _this2.focusButton();\n        }, 0);\n      }\n    }\n  }, {\n    key: 'focusButton',\n    value: function focusButton() {\n      if (this.props.focusConfirmBtn && this.refs.confirmBtn) {\n        try {\n          this.refs.confirmBtn.focus();\n        } catch (e) {// whoops\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (!this.props.showConfirm && !this.props.showCancel) {\n        return false;\n      }\n\n      var cancelBtnBsStyle = this.props.cancelBtnBsStyle === 'error' ? 'danger' : this.props.cancelBtnBsStyle;\n      var confirmBtnBsStyle = this.props.confirmBtnBsStyle === 'error' ? 'danger' : this.props.confirmBtnBsStyle;\n      return _react2.default.createElement('p', {\n        style: {\n          marginTop: 20\n        }\n      }, this.props.showCancel && _react2.default.createElement('span', null, _react2.default.createElement('style', {\n        type: 'text/css',\n        scoped: true\n      }, 'button { outline: 0 !important; ' + this.getButtonStyle(cancelBtnBsStyle) + '}'), _react2.default.createElement('button', {\n        style: (0, _objectAssign2.default)({}, _SweetAlertStyles2.default.button, this.props.cancelBtnStyle),\n        className: 'btn btn-' + this.props.btnSize + ' btn-' + cancelBtnBsStyle + ' ' + this.props.cancelBtnCssClass,\n        onClick: this.props.onCancel,\n        type: 'button'\n      }, this.props.cancelBtnText)), this.props.showConfirm && _react2.default.createElement('span', null, _react2.default.createElement('style', {\n        type: 'text/css',\n        scoped: true\n      }, 'button { outline: 0 !important; ' + this.getButtonStyle(confirmBtnBsStyle) + '}'), _react2.default.createElement('button', {\n        ref: 'confirmBtn',\n        disabled: this.props.disabled,\n        style: (0, _objectAssign2.default)({}, _SweetAlertStyles2.default.button, this.props.confirmBtnStyle),\n        className: 'btn btn-' + this.props.btnSize + ' btn-' + confirmBtnBsStyle + ' ' + this.props.confirmBtnCssClass,\n        onClick: this.props.onConfirm,\n        type: 'button'\n      }, this.props.confirmBtnText)));\n    }\n  }]);\n\n  return Buttons;\n}(_react2.default.Component);\n\nButtons.propTypes = {\n  confirmBtnText: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string]),\n  confirmBtnBsStyle: _propTypes2.default.oneOf(['default', 'primary', 'link', 'info', 'success', 'warning', 'danger']),\n  confirmBtnCssClass: _propTypes2.default.string,\n  confirmBtnStyle: _propTypes2.default.object,\n  cancelBtnText: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string]),\n  cancelBtnBsStyle: _propTypes2.default.oneOf(['default', 'primary', 'link', 'info', 'success', 'warning', 'danger']),\n  cancelBtnCssClass: _propTypes2.default.string,\n  cancelBtnStyle: _propTypes2.default.object,\n  btnSize: _propTypes2.default.string,\n  onCancel: _propTypes2.default.func,\n  onConfirm: _propTypes2.default.func,\n  showConfirm: _propTypes2.default.bool,\n  showCancel: _propTypes2.default.bool,\n  focusConfirmBtn: _propTypes2.default.bool\n};\nButtons.defaultProps = {\n  confirmBtnText: 'OK',\n  confirmBtnBsStyle: 'primary',\n  confirmBtnCssClass: '',\n  confirmBtnStyle: {},\n  cancelBtnText: 'Cancel',\n  cancelBtnBsStyle: 'link',\n  cancelBtnCssClass: '',\n  cancelBtnStyle: {},\n  focusConfirmBtn: true,\n  showConfirm: true,\n  showCancel: false,\n  btnSize: 'lg'\n};\nButtons.styles = {\n  primary: {\n    borderColor: '#286090',\n    shadowColor: 'rgb(165, 202, 234)'\n  },\n  success: {\n    borderColor: '#4cae4c',\n    shadowColor: 'rgba(76, 174, 76, 0.6)'\n  },\n  info: {\n    borderColor: '#46b8da',\n    shadowColor: 'rgba(70, 184, 218, 0.6)'\n  },\n  danger: {\n    borderColor: '#d43f3a',\n    shadowColor: 'rgba(212, 63, 58, 0.6)'\n  },\n  warning: {\n    borderColor: '#eea236',\n    shadowColor: 'rgba(238, 162, 54, 0.6)'\n  },\n  default: {\n    borderColor: '#cccccc',\n    shadowColor: 'rgba(204, 204, 204, 0.6)'\n  }\n};\nexports.default = Buttons;","map":null,"metadata":{},"sourceType":"script"}