{"ast":null,"code":"'use strict';\n\nvar Region = require('region');\n\nrequire('./Region.static');\n\nrequire('./Region.proto');\n\nvar COMPUTE_ALIGN_REGION = require('./computeAlignRegion');\n/**\n * region-align module exposes methods for aligning {@link Element} and {@link Region} instances\n *\n * The #alignTo method aligns this to the target element/region using the specified positions. See #alignTo for a graphical example.\n *\n *\n *      var div = Element.select('div.first')\n *\n *      div.alignTo(Element.select('body') , 'br-br')\n *\n *      //aligns the div to be in the bottom-right corner of the body\n *\n * Other useful methods\n *\n *  * {@link #alignRegions} - aligns a given source region to a target region\n *  * {@link #COMPUTE_ALIGN_REGION} - given a source region and a target region, and alignment positions, returns a clone of the source region, but aligned to satisfy the given alignments\n */\n\n/**\n * Aligns sourceRegion to targetRegion. It modifies the sourceRegion in order to perform the correct alignment.\n * See #COMPUTE_ALIGN_REGION for details and examples.\n *\n * This method calls #COMPUTE_ALIGN_REGION passing to it all its arguments. The #COMPUTE_ALIGN_REGION method returns a region that is properly aligned.\n * If this returned region position/size differs from sourceRegion, then the sourceRegion is modified to be an exact copy of the aligned region.\n *\n * @inheritdoc #COMPUTE_ALIGN_REGION\n * @return {String} the position used for alignment\n */\n\n\nRegion.alignRegions = function (sourceRegion, targetRegion, positions, config) {\n  var result = COMPUTE_ALIGN_REGION(sourceRegion, targetRegion, positions, config);\n  var alignedRegion = result.region;\n\n  if (!alignedRegion.equals(sourceRegion)) {\n    sourceRegion.setRegion(alignedRegion);\n  }\n\n  return result.position;\n};\n/**\n *\n * The #alignTo method aligns this to the given target region, using the specified alignment position(s).\n * You can also specify a constrain for the alignment.\n *\n * Example\n *\n *      BIG\n *      ________________________\n *      |  _______              |\n *      | |       |             |\n *      | |   A   |             |\n *      | |       |      _____  |\n *      | |_______|     |     | |\n *      |               |  B  | |\n *      |               |     | |\n *      |_______________|_____|_|\n *\n * Assume the *BIG* outside rectangle is our constrain region, and you want to align the *A* rectangle\n * to the *B* rectangle. Ideally, you'll want their tops to be aligned, and *A* to be placed at the right side of *B*\n *\n *\n *      //so we would align them using\n *\n *      A.alignTo(B, 'tl-tr', { constrain: BIG })\n *\n * But this would result in\n *\n *       BIG\n *      ________________________\n *      |                       |\n *      |                       |\n *      |                       |\n *      |                _____ _|_____\n *      |               |     | .     |\n *      |               |  B  | . A   |\n *      |               |     | .     |\n *      |_______________|_____|_._____|\n *\n *\n * Which is not what we want. So we specify an array of options to try\n *\n *      A.alignTo(B, ['tl-tr', 'tr-tl'], { constrain: BIG })\n *\n * So by this we mean: try to align A(top,left) with B(top,right) and stick to the BIG constrain. If this is not possible,\n * try the next option: align A(top,right) with B(top,left)\n *\n * So this is what we end up with\n *\n *      BIG\n *      ________________________\n *      |                       |\n *      |                       |\n *      |                       |\n *      |        _______ _____  |\n *      |       |       |     | |\n *      |       |   A   |  B  | |\n *      |       |       |     | |\n *      |_______|_______|_____|_|\n *\n *\n * Which is a lot better!\n *\n * @param {Element/Region} target The target to which to align this alignable.\n *\n * @param {String[]/String} positions The positions for the alignment.\n *\n * Example:\n *\n *      'br-tl'\n *      ['br-tl','br-tr','cx-tc']\n *\n * This method will try to align using the first position. But if there is a constrain region, that position might not satisfy the constrain.\n * If this is the case, the next positions will be tried. If one of them satifies the constrain, it will be used for aligning and it will be returned from this method.\n *\n * If no position matches the contrain, the one with the largest intersection of the source region with the constrain will be used, and this alignable will be resized to fit the constrain region.\n *\n * @param {Object} config A config object with other configuration for this method\n *\n * @param {Array[]/Object[]/Object} config.offset The offset to use for aligning. If more that one offset is specified, then offset at a given index is used with the position at the same index.\n *\n * An offset can have the following form:\n *\n *      [left_offset, top_offset]\n *      {left: left_offset, top: top_offset}\n *      {x: left_offset, y: top_offset}\n *\n * You can pass one offset or an array of offsets. In case you pass just one offset,\n * it cannot have the array form, so you cannot call\n *\n *      this.alignTo(target, positions, [10, 20])\n *\n * If you do, it will not be considered. Instead, please use\n *\n *      this.alignTo(target, positions, {x: 10, y: 20})\n *\n * Or\n *\n *      this.alignTo(target, positions, [[10, 20]] )\n *\n * @param {Boolean/Element/Region} config.constrain If boolean, target will be constrained to the document region, otherwise,\n * getRegion will be called on this argument to determine the region we need to constrain to.\n *\n * @param {Boolean/Object} config.sync Either boolean or an object with {width, height}. If it is boolean,\n * both width and height will be synced. If directions are specified, will only sync the direction which is specified as true\n *\n * @return {String}\n *\n */\n\n\nRegion.prototype.alignTo = function (target, positions, config) {\n  config = config || {};\n  var sourceRegion = this;\n  var targetRegion = Region.from(target);\n  var result = COMPUTE_ALIGN_REGION(sourceRegion, targetRegion, positions, config);\n  var resultRegion = result.region;\n\n  if (!resultRegion.equalsSize(sourceRegion)) {\n    this.setSize(resultRegion.getSize());\n  }\n\n  if (!resultRegion.equalsPosition(sourceRegion)) {\n    this.setPosition(resultRegion.getPosition(), {\n      absolute: !!config.absolute\n    });\n  }\n\n  return result.position;\n};\n\nmodule.exports = Region;","map":null,"metadata":{},"sourceType":"script"}