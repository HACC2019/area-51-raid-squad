{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nfunction makeResponse(result, config) {\n  return {\n    status: result[0],\n    data: utils.isSimpleObject(result[1]) ? JSON.parse(JSON.stringify(result[1])) : result[1],\n    headers: result[2],\n    config: config\n  };\n}\n\nfunction handleRequest(mockAdapter, resolve, reject, config) {\n  var url = config.url;\n\n  if (config.baseURL && config.url.substr(0, config.baseURL.length) === config.baseURL) {\n    url = config.url.slice(config.baseURL ? config.baseURL.length : 0);\n  }\n\n  delete config.adapter;\n  mockAdapter.history[config.method].push(config);\n  var handler = utils.findHandler(mockAdapter.handlers, config.method, url, config.data, config.params, config.headers, config.baseURL);\n\n  if (handler) {\n    if (handler.length === 7) {\n      utils.purgeIfReplyOnce(mockAdapter, handler);\n    }\n\n    if (handler.length === 2) {\n      // passThrough handler\n      mockAdapter.originalAdapter(config).then(resolve, reject);\n    } else if (typeof handler[3] !== 'function') {\n      utils.settle(resolve, reject, makeResponse(handler.slice(3), config), mockAdapter.delayResponse);\n    } else {\n      var result = handler[3](config); // TODO throw a sane exception when return value is incorrect\n\n      if (typeof result.then !== 'function') {\n        utils.settle(resolve, reject, makeResponse(result, config), mockAdapter.delayResponse);\n      } else {\n        result.then(function (result) {\n          if (result.config && result.status) {\n            utils.settle(resolve, reject, makeResponse([result.status, result.data, result.headers], result.config), 0);\n          } else {\n            utils.settle(resolve, reject, makeResponse(result, config), mockAdapter.delayResponse);\n          }\n        }, function (error) {\n          if (mockAdapter.delayResponse > 0) {\n            setTimeout(function () {\n              reject(error);\n            }, mockAdapter.delayResponse);\n          } else {\n            reject(error);\n          }\n        });\n      }\n    }\n  } else {\n    // handler not found\n    utils.settle(resolve, reject, {\n      status: 404,\n      config: config\n    }, mockAdapter.delayResponse);\n  }\n}\n\nmodule.exports = handleRequest;","map":null,"metadata":{},"sourceType":"script"}