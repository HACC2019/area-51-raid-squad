{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anime\\\\Documents\\\\Githubrepositories\\\\area-51-raid-squad\\\\src\\\\containers\\\\charts\\\\chartjs\\\\BarChart.js\";\nimport React, { Component } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nclass BarChart extends Component {\n  render() {\n    const data = {\n      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'],\n      datasets: [{\n        label: 'Sales Analytics',\n        data: [65, 59, 80, 81, 56, 89, 40, 32, 65, 59, 80, 81],\n        backgroundColor: ['#ec707e', '#ec707e', '#ec707e', '#ec707e', '#ec707e', '#ec707e', '#ec707e', '#ec707e'],\n        hoverBackgroundColor: ['#02a461', '#02a461', '#02a461', '#02a461', '#02a461', '#02a461', '#02a461', '#02a461']\n      }]\n    };\n    const option = {\n      tootlbar: {\n        show: false\n      },\n      tooltips: {\n        callbacks: {\n          label: function (tooltipItem, data) {\n            var dataset = data.datasets[tooltipItem.datasetIndex];\n\n            var meta = dataset._meta[Object.keys(dataset._meta)[0]];\n\n            var total = meta.total;\n            var currentValue = dataset.data[tooltipItem.index];\n            var percentage = parseFloat((currentValue / total * 100).toFixed(1));\n            return currentValue + ' (' + percentage + '%)';\n          },\n          title: function (tooltipItem, data) {\n            return data.labels[tooltipItem[0].index];\n          }\n        }\n      }\n    };\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: data,\n      options: option,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["C:/Users/Anime/Documents/Githubrepositories/area-51-raid-squad/src/containers/charts/chartjs/BarChart.js"],"names":["React","Component","Bar","BarChart","render","data","labels","datasets","label","backgroundColor","hoverBackgroundColor","option","tootlbar","show","tooltips","callbacks","tooltipItem","dataset","datasetIndex","meta","_meta","Object","keys","total","currentValue","index","percentage","parseFloat","toFixed","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,GAAR,QAAkB,iBAAlB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAgC;AAEhCG,EAAAA,MAAM,GAAE;AACJ,UAAMC,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAE,CACN,SADM,EAEN,UAFM,EAGN,OAHM,EAIN,OAJM,EAKN,KALM,EAMN,MANM,EAON,MAPM,EAQN,QARM,CADC;AAWTC,MAAAA,QAAQ,EAAE,CAAC;AACVC,QAAAA,KAAK,EAAE,iBADG;AAETH,QAAAA,IAAI,EAAE,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,EAAgB,EAAhB,EAAmB,EAAnB,EAAsB,EAAtB,EAAyB,EAAzB,EAA4B,EAA5B,EAA+B,EAA/B,EAAkC,EAAlC,CAFG;AAGTI,QAAAA,eAAe,EAAE,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,SAA/B,EAAyC,SAAzC,EAAmD,SAAnD,EAA6D,SAA7D,EAAuE,SAAvE,CAHR;AAITC,QAAAA,oBAAoB,EAAE,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,SAA/B,EAAyC,SAAzC,EAAmD,SAAnD,EAA6D,SAA7D,EAAuE,SAAvE;AAJb,OAAD;AAXD,KAAb;AAmBE,UAAMC,MAAM,GAAG;AACbC,MAAAA,QAAQ,EAAC;AACPC,QAAAA,IAAI,EAAE;AADC,OADI;AAIbC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAE;AACTP,UAAAA,KAAK,EAAE,UAASQ,WAAT,EAAsBX,IAAtB,EAA4B;AACjC,gBAAIY,OAAO,GAAGZ,IAAI,CAACE,QAAL,CAAcS,WAAW,CAACE,YAA1B,CAAd;;AACA,gBAAIC,IAAI,GAAGF,OAAO,CAACG,KAAR,CAAcC,MAAM,CAACC,IAAP,CAAYL,OAAO,CAACG,KAApB,EAA2B,CAA3B,CAAd,CAAX;;AACA,gBAAIG,KAAK,GAAGJ,IAAI,CAACI,KAAjB;AACA,gBAAIC,YAAY,GAAGP,OAAO,CAACZ,IAAR,CAAaW,WAAW,CAACS,KAAzB,CAAnB;AACA,gBAAIC,UAAU,GAAGC,UAAU,CAAC,CAACH,YAAY,GAACD,KAAb,GAAmB,GAApB,EAAyBK,OAAzB,CAAiC,CAAjC,CAAD,CAA3B;AACA,mBAAOJ,YAAY,GAAG,IAAf,GAAsBE,UAAtB,GAAmC,IAA1C;AACD,WARQ;AASTG,UAAAA,KAAK,EAAE,UAASb,WAAT,EAAsBX,IAAtB,EAA4B;AACjC,mBAAOA,IAAI,CAACC,MAAL,CAAYU,WAAW,CAAC,CAAD,CAAX,CAAeS,KAA3B,CAAP;AACD;AAXQ;AADH;AAJG,KAAf;AAqBF,WACQ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAEpB,IAAX;AAAiB,MAAA,OAAO,EAAEM,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADR;AAKC;;AAhD2B;;AAmDhC,eAAeR,QAAf","sourcesContent":["import React , {Component } from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nclass BarChart extends Component{\r\n\r\nrender(){\r\n    const data = {\r\n        labels: [\r\n          'January',\r\n          'February',\r\n          'March',\r\n          'April',\r\n          'May',\r\n          'June',\r\n          'July',\r\n          'August'\r\n        ],\r\n        datasets: [{\r\n         label: 'Sales Analytics',\r\n          data: [65,59,80,81,56,89,40,32,65,59,80,81],\r\n          backgroundColor: ['#ec707e','#ec707e','#ec707e','#ec707e','#ec707e','#ec707e','#ec707e','#ec707e'],\r\n          hoverBackgroundColor: ['#02a461','#02a461','#02a461','#02a461','#02a461','#02a461','#02a461','#02a461']\r\n        }]\r\n      };\r\n      \r\n      const option = {\r\n        tootlbar:{\r\n          show: false\r\n        },\r\n        tooltips: {\r\n          callbacks: {\r\n            label: function(tooltipItem, data) {\r\n              var dataset = data.datasets[tooltipItem.datasetIndex];\r\n              var meta = dataset._meta[Object.keys(dataset._meta)[0]];\r\n              var total = meta.total;\r\n              var currentValue = dataset.data[tooltipItem.index];\r\n              var percentage = parseFloat((currentValue/total*100).toFixed(1));\r\n              return currentValue + ' (' + percentage + '%)';\r\n            },\r\n            title: function(tooltipItem, data) {\r\n              return data.labels[tooltipItem[0].index];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    return(\r\n            <React.Fragment>\r\n             <Bar data={data} options={option}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BarChart;   "]},"metadata":{},"sourceType":"module"}